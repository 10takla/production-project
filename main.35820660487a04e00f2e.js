/*! For license information please see main.35820660487a04e00f2e.js.LICENSE.txt */
(()=>{var e,t,n={98:function(e,t){var n="undefined"!=typeof self?self:this,l=function(){function e(){this.fetch=!1,this.DOMException=n.DOMException}return e.prototype=n,new e}();!function(e){!function(t){var n="URLSearchParams"in e,l="Symbol"in e&&"iterator"in Symbol,r="FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),s="FormData"in e,i="ArrayBuffer"in e;if(i)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],a=ArrayBuffer.isView||function(e){return e&&o.indexOf(Object.prototype.toString.call(e))>-1};function p(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function u(e){return"string"!=typeof e&&(e=String(e)),e}function c(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return l&&(t[Symbol.iterator]=function(){return t}),t}function d(e){this.map={},e instanceof d?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function f(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function g(e){return new Promise((function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}}))}function h(e){var t=new FileReader,n=g(t);return t.readAsArrayBuffer(e),n}function v(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function m(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:r&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:s&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:n&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():i&&r&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=v(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):i&&(ArrayBuffer.prototype.isPrototypeOf(e)||a(e))?this._bodyArrayBuffer=v(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r&&(this.blob=function(){var e=f(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var e,t,n,l=f(this);if(l)return l;if(this._bodyBlob)return e=this._bodyBlob,n=g(t=new FileReader),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),l=0;l<t.length;l++)n[l]=String.fromCharCode(t[l]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},s&&(this.formData=function(){return this.text().then(b)}),this.json=function(){return this.text().then(JSON.parse)},this}d.prototype.append=function(e,t){e=p(e),t=u(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},d.prototype.delete=function(e){delete this.map[p(e)]},d.prototype.get=function(e){return e=p(e),this.has(e)?this.map[e]:null},d.prototype.has=function(e){return this.map.hasOwnProperty(p(e))},d.prototype.set=function(e,t){this.map[p(e)]=u(t)},d.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},d.prototype.keys=function(){var e=[];return this.forEach((function(t,n){e.push(n)})),c(e)},d.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),c(e)},d.prototype.entries=function(){var e=[];return this.forEach((function(t,n){e.push([n,t])})),c(e)},l&&(d.prototype[Symbol.iterator]=d.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function y(e,t){var n,l,r=(t=t||{}).body;if(e instanceof y){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new d(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,r||null==e._bodyInit||(r=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new d(t.headers)),this.method=(l=(n=t.method||this.method||"GET").toUpperCase(),w.indexOf(l)>-1?l:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function b(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var n=e.split("="),l=n.shift().replace(/\+/g," "),r=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(l),decodeURIComponent(r))}})),t}function k(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new d(t.headers),this.url=t.url||"",this._initBody(e)}y.prototype.clone=function(){return new y(this,{body:this._bodyInit})},m.call(y.prototype),m.call(k.prototype),k.prototype.clone=function(){return new k(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},k.error=function(){var e=new k(null,{status:0,statusText:""});return e.type="error",e};var x=[301,302,303,307,308];k.redirect=function(e,t){if(-1===x.indexOf(t))throw new RangeError("Invalid status code");return new k(null,{status:t,headers:{location:e}})},t.DOMException=e.DOMException;try{new t.DOMException}catch(e){t.DOMException=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack},t.DOMException.prototype=Object.create(Error.prototype),t.DOMException.prototype.constructor=t.DOMException}function j(e,n){return new Promise((function(l,s){var i=new y(e,n);if(i.signal&&i.signal.aborted)return s(new t.DOMException("Aborted","AbortError"));var o=new XMLHttpRequest;function a(){o.abort()}o.onload=function(){var e,t,n={status:o.status,statusText:o.statusText,headers:(e=o.getAllResponseHeaders()||"",t=new d,e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach((function(e){var n=e.split(":"),l=n.shift().trim();if(l){var r=n.join(":").trim();t.append(l,r)}})),t)};n.url="responseURL"in o?o.responseURL:n.headers.get("X-Request-URL");var r="response"in o?o.response:o.responseText;l(new k(r,n))},o.onerror=function(){s(new TypeError("Network request failed"))},o.ontimeout=function(){s(new TypeError("Network request failed"))},o.onabort=function(){s(new t.DOMException("Aborted","AbortError"))},o.open(i.method,i.url,!0),"include"===i.credentials?o.withCredentials=!0:"omit"===i.credentials&&(o.withCredentials=!1),"responseType"in o&&r&&(o.responseType="blob"),i.headers.forEach((function(e,t){o.setRequestHeader(t,e)})),i.signal&&(i.signal.addEventListener("abort",a),o.onreadystatechange=function(){4===o.readyState&&i.signal.removeEventListener("abort",a)}),o.send(void 0===i._bodyInit?null:i._bodyInit)}))}j.polyfill=!0,e.fetch||(e.fetch=j,e.Headers=d,e.Request=y,e.Response=k),t.Headers=d,t.Request=y,t.Response=k,t.fetch=j,Object.defineProperty(t,"__esModule",{value:!0})}({})}(l),l.fetch.ponyfill=!0,delete l.fetch.polyfill;var r=l;(t=r.fetch).default=r.fetch,t.fetch=r.fetch,t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response,e.exports=t},679:(e,t,n)=>{"use strict";var l=n(864),r={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},s={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},o={};function a(e){return l.isMemo(e)?i:o[e.$$typeof]||r}o[l.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},o[l.Memo]=i;var p=Object.defineProperty,u=Object.getOwnPropertyNames,c=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,g=Object.prototype;e.exports=function e(t,n,l){if("string"!=typeof n){if(g){var r=f(n);r&&r!==g&&e(t,r,l)}var i=u(n);c&&(i=i.concat(c(n)));for(var o=a(t),h=a(n),v=0;v<i.length;++v){var m=i[v];if(!(s[m]||l&&l[m]||h&&h[m]||o&&o[m])){var w=d(n,m);try{p(t,m,w)}catch(e){}}}}return t}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable;function r(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var l={};return"abcdefghijklmnopqrst".split("").forEach((function(e){l[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},l)).join("")}catch(e){return!1}}()?Object.assign:function(e,s){for(var i,o,a=r(e),p=1;p<arguments.length;p++){for(var u in i=Object(arguments[p]))n.call(i,u)&&(a[u]=i[u]);if(t){o=t(i);for(var c=0;c<o.length;c++)l.call(i,o[c])&&(a[o[c]]=i[o[c]])}}return a}},448:(e,t,n)=>{"use strict";var l=n(294),r=n(418),s=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!l)throw Error(i(227));var o=new Set,a={};function p(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(a[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,g={},h={};function v(e,t,n,l,r,s,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=l,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var w=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,l){var r=m.hasOwnProperty(t)?m[t]:null;(null!==r?0===r.type:!l&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,l){if(null==t||function(e,t,n,l){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!l&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,l))return!0;if(l)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,r,l)&&(n=null),l||null===r?function(e){return!!f.call(h,e)||!f.call(g,e)&&(d.test(e)?h[e]=!0:(g[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):r.mustUseProperty?e[r.propertyName]=null===n?3!==r.type&&"":n:(t=r.attributeName,l=r.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,l?e.setAttributeNS(l,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(w,y);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(w,y);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(w,y);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,j=60106,S=60107,O=60108,C=60114,E=60109,P=60110,A=60112,_=60113,T=60120,L=60115,N=60116,R=60121,I=60128,D=60129,M=60130,B=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;x=F("react.element"),j=F("react.portal"),S=F("react.fragment"),O=F("react.strict_mode"),C=F("react.profiler"),E=F("react.provider"),P=F("react.context"),A=F("react.forward_ref"),_=F("react.suspense"),T=F("react.suspense_list"),L=F("react.memo"),N=F("react.lazy"),R=F("react.block"),F("react.scope"),I=F("react.opaque.id"),D=F("react.debug_trace_mode"),M=F("react.offscreen"),B=F("react.legacy_hidden")}var q,z="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}function H(e){if(void 0===q)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);q=t&&t[1]||""}return"\n"+q+e}var V=!1;function Q(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var l=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){l=e}e.call(t.prototype)}else{try{throw Error()}catch(e){l=e}e()}}catch(e){if(e&&l&&"string"==typeof e.stack){for(var r=e.stack.split("\n"),s=l.stack.split("\n"),i=r.length-1,o=s.length-1;1<=i&&0<=o&&r[i]!==s[o];)o--;for(;1<=i&&0<=o;i--,o--)if(r[i]!==s[o]){if(1!==i||1!==o)do{if(i--,0>--o||r[i]!==s[o])return"\n"+r[i].replace(" at new "," at ")}while(1<=i&&0<=o);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function $(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return Q(e.type,!1);case 11:return Q(e.type.render,!1);case 22:return Q(e.type._render,!1);case 1:return Q(e.type,!0);default:return""}}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case j:return"Portal";case C:return"Profiler";case O:return"StrictMode";case _:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case E:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return X(e.type);case R:return X(e._render);case N:t=e._payload,e=e._init;try{return X(e(t))}catch(e){}}return null}function W(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),l=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,s=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return r.call(this)},set:function(e){l=""+e,s.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return l},setValue:function(e){l=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function J(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),l="";return e&&(l=K(e)?e.checked?"true":"false":e.value),(e=l)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return r({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,l=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:l,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=W(t.value),l=t.type;if(null!=n)"number"===l?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===l||"reset"===l)return void e.removeAttribute("value");t.hasOwnProperty("value")?re(e,t.type,n):t.hasOwnProperty("defaultValue")&&re(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function le(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var l=t.type;if(!("submit"!==l&&"reset"!==l||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function re(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function se(e,t){return e=r({children:void 0},t),(t=function(e){var t="";return l.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,l){if(e=e.options,t){t={};for(var r=0;r<n.length;r++)t["$"+n[r]]=!0;for(n=0;n<e.length;n++)r=t.hasOwnProperty("$"+e[n].value),e[n].selected!==r&&(e[n].selected=r),r&&l&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,r=0;r<e.length;r++){if(e[r].value===n)return e[r].selected=!0,void(l&&(e[r].defaultSelected=!0));null!==t||e[r].disabled||(t=e[r])}null!==t&&(t.selected=!0)}}function oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return r({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function pe(e,t){var n=W(t.value),l=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=l&&(e.defaultValue=""+l)}function ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var ce="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ge,he,ve=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ge=ge||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ge.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,l){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function me(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var we={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function be(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||we.hasOwnProperty(e)&&we[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var l=0===n.indexOf("--"),r=be(n,t[n],l);"float"===n&&(n="cssFloat"),l?e.setProperty(n,r):e[n]=r}}Object.keys(we).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),we[t]=we[e]}))}));var xe=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function je(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Oe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Ee=null,Pe=null;function Ae(e){if(e=nr(e)){if("function"!=typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=rr(t),Ce(e.stateNode,e.type,t))}}function _e(e){Ee?Pe?Pe.push(e):Pe=[e]:Ee=e}function Te(){if(Ee){var e=Ee,t=Pe;if(Pe=Ee=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function Le(e,t){return e(t)}function Ne(e,t,n,l,r){return e(t,n,l,r)}function Re(){}var Ie=Le,De=!1,Me=!1;function Be(){null===Ee&&null===Pe||(Re(),Te())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var l=rr(n);if(null===l)return null;n=l[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(l=!l.disabled)||(l=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!l;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var qe=!1;if(c)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){qe=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(he){qe=!1}function Ue(e,t,n,l,r,s,i,o,a){var p=Array.prototype.slice.call(arguments,3);try{t.apply(n,p)}catch(e){this.onError(e)}}var He=!1,Ve=null,Qe=!1,$e=null,Xe={onError:function(e){He=!0,Ve=e}};function We(e,t,n,l,r,s,i,o,a){He=!1,Ve=null,Ue.apply(Xe,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Je(e){if(Ke(e)!==e)throw Error(i(188))}function Ge(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,l=t;;){var r=n.return;if(null===r)break;var s=r.alternate;if(null===s){if(null!==(l=r.return)){n=l;continue}break}if(r.child===s.child){for(s=r.child;s;){if(s===n)return Je(r),e;if(s===l)return Je(r),t;s=s.sibling}throw Error(i(188))}if(n.return!==l.return)n=r,l=s;else{for(var o=!1,a=r.child;a;){if(a===n){o=!0,n=r,l=s;break}if(a===l){o=!0,l=r,n=s;break}a=a.sibling}if(!o){for(a=s.child;a;){if(a===n){o=!0,n=s,l=r;break}if(a===l){o=!0,l=s,n=r;break}a=a.sibling}if(!o)throw Error(i(189))}}if(n.alternate!==l)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,lt,rt=!1,st=[],it=null,ot=null,at=null,pt=new Map,ut=new Map,ct=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,l,r){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:r,targetContainers:[l]}}function gt(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":ot=null;break;case"mouseover":case"mouseout":at=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function ht(e,t,n,l,r,s){return null===e||e.nativeEvent!==s?(e=ft(t,n,l,r,s),null!==t&&null!==(t=nr(t))&&tt(t),e):(e.eventSystemFlags|=l,t=e.targetContainers,null!==r&&-1===t.indexOf(r)&&t.push(r),e)}function vt(e){var t=tr(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void lt(e.lanePriority,(function(){s.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=nr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function wt(e,t,n){mt(e)&&n.delete(t)}function yt(){for(rt=!1;0<st.length;){var e=st[0];if(null!==e.blockedOn){null!==(e=nr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&st.shift()}null!==it&&mt(it)&&(it=null),null!==ot&&mt(ot)&&(ot=null),null!==at&&mt(at)&&(at=null),pt.forEach(wt),ut.forEach(wt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,s.unstable_scheduleCallback(s.unstable_NormalPriority,yt)))}function kt(e){function t(t){return bt(t,e)}if(0<st.length){bt(st[0],e);for(var n=1;n<st.length;n++){var l=st[n];l.blockedOn===e&&(l.blockedOn=null)}}for(null!==it&&bt(it,e),null!==ot&&bt(ot,e),null!==at&&bt(at,e),pt.forEach(t),ut.forEach(t),n=0;n<ct.length;n++)(l=ct[n]).blockedOn===e&&(l.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)vt(n),null===n.blockedOn&&ct.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var jt={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},St={},Ot={};function Ct(e){if(St[e])return St[e];if(!jt[e])return e;var t,n=jt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ot)return St[e]=n[t];return e}c&&(Ot=document.createElement("div").style,"AnimationEvent"in window||(delete jt.animationend.animation,delete jt.animationiteration.animation,delete jt.animationstart.animation),"TransitionEvent"in window||delete jt.transitionend.transition);var Et=Ct("animationend"),Pt=Ct("animationiteration"),At=Ct("animationstart"),_t=Ct("transitionend"),Tt=new Map,Lt=new Map,Nt=["abort","abort",Et,"animationEnd",Pt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",_t,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var l=e[n],r=e[n+1];r="on"+(r[0].toUpperCase()+r.slice(1)),Lt.set(l,t),Tt.set(l,r),p(r,[l])}}(0,s.unstable_now)();var It=8;function Dt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return It=0;var l=0,r=0,s=e.expiredLanes,i=e.suspendedLanes,o=e.pingedLanes;if(0!==s)l=s,r=It=15;else if(0!=(s=134217727&n)){var a=s&~i;0!==a?(l=Dt(a),r=It):0!=(o&=s)&&(l=Dt(o),r=It)}else 0!=(s=n&~i)?(l=Dt(s),r=It):0!==o&&(l=Dt(o),r=It);if(0===l)return 0;if(l=n&((0>(l=31-Ht(l))?0:1<<l)<<1)-1,0!==t&&t!==l&&0==(t&i)){if(Dt(t),r<=It)return t;It=r}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=l;0<t;)r=1<<(n=31-Ht(t)),l|=e[n],t&=~r;return l}function Bt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=qt(24&~t))?Ft(10,t):e;case 10:return 0===(e=qt(192&~t))?Ft(8,t):e;case 8:return 0===(e=qt(3584&~t))&&0===(e=qt(4186112&~t))&&(e=512),e;case 2:return 0===(t=qt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function qt(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var l=t-1;e.suspendedLanes&=l,e.pingedLanes&=l,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Vt(e)/Qt|0)|0},Vt=Math.log,Qt=Math.LN2,$t=s.unstable_UserBlockingPriority,Xt=s.unstable_runWithPriority,Wt=!0;function Kt(e,t,n,l){De||Re();var r=Jt,s=De;De=!0;try{Ne(r,e,t,n,l)}finally{(De=s)||Be()}}function Yt(e,t,n,l){Xt($t,Jt.bind(null,e,t,n,l))}function Jt(e,t,n,l){var r;if(Wt)if((r=0==(4&t))&&0<st.length&&-1<dt.indexOf(e))e=ft(null,e,t,n,l),st.push(e);else{var s=Gt(e,t,n,l);if(null===s)r&&gt(e,l);else{if(r){if(-1<dt.indexOf(e))return e=ft(s,e,t,n,l),void st.push(e);if(function(e,t,n,l,r){switch(t){case"focusin":return it=ht(it,e,t,n,l,r),!0;case"dragenter":return ot=ht(ot,e,t,n,l,r),!0;case"mouseover":return at=ht(at,e,t,n,l,r),!0;case"pointerover":var s=r.pointerId;return pt.set(s,ht(pt.get(s)||null,e,t,n,l,r)),!0;case"gotpointercapture":return s=r.pointerId,ut.set(s,ht(ut.get(s)||null,e,t,n,l,r)),!0}return!1}(s,e,t,n,l))return;gt(e,l)}Rl(e,t,l,null,n)}}}function Gt(e,t,n,l){var r=Oe(l);if(null!==(r=tr(r))){var s=Ke(r);if(null===s)r=null;else{var i=s.tag;if(13===i){if(null!==(r=Ye(s)))return r;r=null}else if(3===i){if(s.stateNode.hydrate)return 3===s.tag?s.stateNode.containerInfo:null;r=null}else s!==r&&(r=null)}}return Rl(e,t,l,r,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,l=n.length,r="value"in Zt?Zt.value:Zt.textContent,s=r.length;for(e=0;e<l&&n[e]===r[e];e++);var i=l-e;for(t=1;t<=i&&n[l-t]===r[s-t];t++);return tn=r.slice(e,1<t?1-t:void 0)}function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function sn(){return!1}function on(e){function t(t,n,l,r,s){for(var i in this._reactName=t,this._targetInst=l,this.type=n,this.nativeEvent=r,this.target=s,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(r):r[i]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?rn:sn,this.isPropagationStopped=sn,this}return r(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var an,pn,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=on(cn),fn=r({},cn,{view:0,detail:0}),gn=on(fn),hn=r({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,pn=e.screenY-un.screenY):pn=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:pn}}),vn=on(hn),mn=on(r({},hn,{dataTransfer:0})),wn=on(r({},fn,{relatedTarget:0})),yn=on(r({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=r({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),kn=on(bn),xn=on(r({},cn,{data:0})),jn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},On={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=On[e])&&!!t[e]}function En(){return Cn}var Pn=r({},fn,{key:function(e){if(e.key){var t=jn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),An=on(Pn),_n=on(r({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=on(r({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Ln=on(r({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=r({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=on(Nn),In=[9,13,27,32],Dn=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var Bn=c&&"TextEvent"in window&&!Mn,Fn=c&&(!Dn||Mn&&8<Mn&&11>=Mn),qn=String.fromCharCode(32),zn=!1;function Un(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Qn[e.type]:"textarea"===t}function Xn(e,t,n,l){_e(l),0<(t=Dl(t,"onChange")).length&&(n=new dn("onChange","change",null,n,l),e.push({event:n,listeners:t}))}var Wn=null,Kn=null;function Yn(e){Pl(e,0)}function Jn(e){if(J(lr(e)))return e}function Gn(e,t){if("change"===e)return t}var Zn=!1;if(c){var el;if(c){var tl="oninput"in document;if(!tl){var nl=document.createElement("div");nl.setAttribute("oninput","return;"),tl="function"==typeof nl.oninput}el=tl}else el=!1;Zn=el&&(!document.documentMode||9<document.documentMode)}function ll(){Wn&&(Wn.detachEvent("onpropertychange",rl),Kn=Wn=null)}function rl(e){if("value"===e.propertyName&&Jn(Kn)){var t=[];if(Xn(t,Kn,e,Oe(e)),e=Yn,De)e(t);else{De=!0;try{Le(e,t)}finally{De=!1,Be()}}}}function sl(e,t,n){"focusin"===e?(ll(),Kn=n,(Wn=t).attachEvent("onpropertychange",rl)):"focusout"===e&&ll()}function il(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Jn(Kn)}function ol(e,t){if("click"===e)return Jn(t)}function al(e,t){if("input"===e||"change"===e)return Jn(t)}var pl="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ul=Object.prototype.hasOwnProperty;function cl(e,t){if(pl(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),l=Object.keys(t);if(n.length!==l.length)return!1;for(l=0;l<n.length;l++)if(!ul.call(t,n[l])||!pl(e[n[l]],t[n[l]]))return!1;return!0}function dl(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fl(e,t){var n,l=dl(e);for(e=0;l;){if(3===l.nodeType){if(n=e+l.textContent.length,e<=t&&n>=t)return{node:l,offset:t-e};e=n}e:{for(;l;){if(l.nextSibling){l=l.nextSibling;break e}l=l.parentNode}l=void 0}l=dl(l)}}function gl(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?gl(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hl(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function vl(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var ml=c&&"documentMode"in document&&11>=document.documentMode,wl=null,yl=null,bl=null,kl=!1;function xl(e,t,n){var l=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;kl||null==wl||wl!==G(l)||(l="selectionStart"in(l=wl)&&vl(l)?{start:l.selectionStart,end:l.selectionEnd}:{anchorNode:(l=(l.ownerDocument&&l.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:l.anchorOffset,focusNode:l.focusNode,focusOffset:l.focusOffset},bl&&cl(bl,l)||(bl=l,0<(l=Dl(yl,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:l}),t.target=wl)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Nt,2);for(var jl="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sl=0;Sl<jl.length;Sl++)Lt.set(jl[Sl],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),p("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),p("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),p("onBeforeInput",["compositionend","keypress","textInput","paste"]),p("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),p("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),p("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ol="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cl=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ol));function El(e,t,n){var l=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,l,r,s,o,a,p){if(We.apply(this,arguments),He){if(!He)throw Error(i(198));var u=Ve;He=!1,Ve=null,Qe||(Qe=!0,$e=u)}}(l,t,void 0,e),e.currentTarget=null}function Pl(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var l=e[n],r=l.event;l=l.listeners;e:{var s=void 0;if(t)for(var i=l.length-1;0<=i;i--){var o=l[i],a=o.instance,p=o.currentTarget;if(o=o.listener,a!==s&&r.isPropagationStopped())break e;El(r,o,p),s=a}else for(i=0;i<l.length;i++){if(a=(o=l[i]).instance,p=o.currentTarget,o=o.listener,a!==s&&r.isPropagationStopped())break e;El(r,o,p),s=a}}}if(Qe)throw e=$e,Qe=!1,$e=null,e}function Al(e,t){var n=sr(t),l=e+"__bubble";n.has(l)||(Nl(t,e,2,!1),n.add(l))}var _l="_reactListening"+Math.random().toString(36).slice(2);function Tl(e){e[_l]||(e[_l]=!0,o.forEach((function(t){Cl.has(t)||Ll(t,!1,e,null),Ll(t,!0,e,null)})))}function Ll(e,t,n,l){var r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,s=n;if("selectionchange"===e&&9!==n.nodeType&&(s=n.ownerDocument),null!==l&&!t&&Cl.has(e)){if("scroll"!==e)return;r|=2,s=l}var i=sr(s),o=e+"__"+(t?"capture":"bubble");i.has(o)||(t&&(r|=4),Nl(s,e,r,t),i.add(o))}function Nl(e,t,n,l){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Kt;break;case 1:r=Yt;break;default:r=Jt}n=r.bind(null,t,n,e),r=void 0,!qe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(r=!0),l?void 0!==r?e.addEventListener(t,n,{capture:!0,passive:r}):e.addEventListener(t,n,!0):void 0!==r?e.addEventListener(t,n,{passive:r}):e.addEventListener(t,n,!1)}function Rl(e,t,n,l,r){var s=l;if(0==(1&t)&&0==(2&t)&&null!==l)e:for(;;){if(null===l)return;var i=l.tag;if(3===i||4===i){var o=l.stateNode.containerInfo;if(o===r||8===o.nodeType&&o.parentNode===r)break;if(4===i)for(i=l.return;null!==i;){var a=i.tag;if((3===a||4===a)&&((a=i.stateNode.containerInfo)===r||8===a.nodeType&&a.parentNode===r))return;i=i.return}for(;null!==o;){if(null===(i=tr(o)))return;if(5===(a=i.tag)||6===a){l=s=i;continue e}o=o.parentNode}}l=l.return}!function(e,t,n){if(Me)return e();Me=!0;try{Ie(e,t,n)}finally{Me=!1,Be()}}((function(){var l=s,r=Oe(n),i=[];e:{var o=Tt.get(e);if(void 0!==o){var a=dn,p=e;switch(e){case"keypress":if(0===ln(n))break e;case"keydown":case"keyup":a=An;break;case"focusin":p="focus",a=wn;break;case"focusout":p="blur",a=wn;break;case"beforeblur":case"afterblur":a=wn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":a=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":a=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":a=Tn;break;case Et:case Pt:case At:a=yn;break;case _t:a=Ln;break;case"scroll":a=gn;break;case"wheel":a=Rn;break;case"copy":case"cut":case"paste":a=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":a=_n}var u=0!=(4&t),c=!u&&"scroll"===e,d=u?null!==o?o+"Capture":null:o;u=[];for(var f,g=l;null!==g;){var h=(f=g).stateNode;if(5===f.tag&&null!==h&&(f=h,null!==d&&null!=(h=Fe(g,d))&&u.push(Il(g,h,f))),c)break;g=g.return}0<u.length&&(o=new a(o,p,null,n,r),i.push({event:o,listeners:u}))}}if(0==(7&t)){if(a="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(p=n.relatedTarget||n.fromElement)||!tr(p)&&!p[Zl])&&(a||o)&&(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=l,null!==(p=(p=n.relatedTarget||n.toElement)?tr(p):null)&&(p!==(c=Ke(p))||5!==p.tag&&6!==p.tag)&&(p=null)):(a=null,p=l),a!==p)){if(u=vn,h="onMouseLeave",d="onMouseEnter",g="mouse","pointerout"!==e&&"pointerover"!==e||(u=_n,h="onPointerLeave",d="onPointerEnter",g="pointer"),c=null==a?o:lr(a),f=null==p?o:lr(p),(o=new u(h,g+"leave",a,n,r)).target=c,o.relatedTarget=f,h=null,tr(r)===l&&((u=new u(d,g+"enter",p,n,r)).target=f,u.relatedTarget=c,h=u),c=h,a&&p)e:{for(d=p,g=0,f=u=a;f;f=Ml(f))g++;for(f=0,h=d;h;h=Ml(h))f++;for(;0<g-f;)u=Ml(u),g--;for(;0<f-g;)d=Ml(d),f--;for(;g--;){if(u===d||null!==d&&u===d.alternate)break e;u=Ml(u),d=Ml(d)}u=null}else u=null;null!==a&&Bl(i,o,a,u,!1),null!==p&&null!==c&&Bl(i,c,p,u,!0)}if("select"===(a=(o=l?lr(l):window).nodeName&&o.nodeName.toLowerCase())||"input"===a&&"file"===o.type)var v=Gn;else if($n(o))if(Zn)v=al;else{v=il;var m=sl}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(v=ol);switch(v&&(v=v(e,l))?Xn(i,v,n,r):(m&&m(e,o,l),"focusout"===e&&(m=o._wrapperState)&&m.controlled&&"number"===o.type&&re(o,"number",o.value)),m=l?lr(l):window,e){case"focusin":($n(m)||"true"===m.contentEditable)&&(wl=m,yl=l,bl=null);break;case"focusout":bl=yl=wl=null;break;case"mousedown":kl=!0;break;case"contextmenu":case"mouseup":case"dragend":kl=!1,xl(i,n,r);break;case"selectionchange":if(ml)break;case"keydown":case"keyup":xl(i,n,r)}var w;if(Dn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Vn?Un(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Fn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Vn&&(w=nn()):(en="value"in(Zt=r)?Zt.value:Zt.textContent,Vn=!0)),0<(m=Dl(l,y)).length&&(y=new xn(y,e,null,n,r),i.push({event:y,listeners:m}),(w||null!==(w=Hn(n)))&&(y.data=w))),(w=Bn?function(e,t){switch(e){case"compositionend":return Hn(t);case"keypress":return 32!==t.which?null:(zn=!0,qn);case"textInput":return(e=t.data)===qn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Dn&&Un(e,t)?(e=nn(),tn=en=Zt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(l=Dl(l,"onBeforeInput")).length&&(r=new xn("onBeforeInput","beforeinput",null,n,r),i.push({event:r,listeners:l}),r.data=w)}Pl(i,t)}))}function Il(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Dl(e,t){for(var n=t+"Capture",l=[];null!==e;){var r=e,s=r.stateNode;5===r.tag&&null!==s&&(r=s,null!=(s=Fe(e,n))&&l.unshift(Il(e,s,r)),null!=(s=Fe(e,t))&&l.push(Il(e,s,r))),e=e.return}return l}function Ml(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Bl(e,t,n,l,r){for(var s=t._reactName,i=[];null!==n&&n!==l;){var o=n,a=o.alternate,p=o.stateNode;if(null!==a&&a===l)break;5===o.tag&&null!==p&&(o=p,r?null!=(a=Fe(n,s))&&i.unshift(Il(n,a,o)):r||null!=(a=Fe(n,s))&&i.push(Il(n,a,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Fl(){}var ql=null,zl=null;function Ul(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Hl(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Vl="function"==typeof setTimeout?setTimeout:void 0,Ql="function"==typeof clearTimeout?clearTimeout:void 0;function $l(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Xl(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wl(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Kl=0,Yl=Math.random().toString(36).slice(2),Jl="__reactFiber$"+Yl,Gl="__reactProps$"+Yl,Zl="__reactContainer$"+Yl,er="__reactEvents$"+Yl;function tr(e){var t=e[Jl];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Zl]||n[Jl]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wl(e);null!==e;){if(n=e[Jl])return n;e=Wl(e)}return t}n=(e=n).parentNode}return null}function nr(e){return!(e=e[Jl]||e[Zl])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function lr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function rr(e){return e[Gl]||null}function sr(e){var t=e[er];return void 0===t&&(t=e[er]=new Set),t}var ir=[],or=-1;function ar(e){return{current:e}}function pr(e){0>or||(e.current=ir[or],ir[or]=null,or--)}function ur(e,t){or++,ir[or]=e.current,e.current=t}var cr={},dr=ar(cr),fr=ar(!1),gr=cr;function hr(e,t){var n=e.type.contextTypes;if(!n)return cr;var l=e.stateNode;if(l&&l.__reactInternalMemoizedUnmaskedChildContext===t)return l.__reactInternalMemoizedMaskedChildContext;var r,s={};for(r in n)s[r]=t[r];return l&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=s),s}function vr(e){return null!=e.childContextTypes}function mr(){pr(fr),pr(dr)}function wr(e,t,n){if(dr.current!==cr)throw Error(i(168));ur(dr,t),ur(fr,n)}function yr(e,t,n){var l=e.stateNode;if(e=t.childContextTypes,"function"!=typeof l.getChildContext)return n;for(var s in l=l.getChildContext())if(!(s in e))throw Error(i(108,X(t)||"Unknown",s));return r({},n,l)}function br(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||cr,gr=dr.current,ur(dr,e),ur(fr,fr.current),!0}function kr(e,t,n){var l=e.stateNode;if(!l)throw Error(i(169));n?(e=yr(e,t,gr),l.__reactInternalMemoizedMergedChildContext=e,pr(fr),pr(dr),ur(dr,e)):pr(fr),ur(fr,n)}var xr=null,jr=null,Sr=s.unstable_runWithPriority,Or=s.unstable_scheduleCallback,Cr=s.unstable_cancelCallback,Er=s.unstable_shouldYield,Pr=s.unstable_requestPaint,Ar=s.unstable_now,_r=s.unstable_getCurrentPriorityLevel,Tr=s.unstable_ImmediatePriority,Lr=s.unstable_UserBlockingPriority,Nr=s.unstable_NormalPriority,Rr=s.unstable_LowPriority,Ir=s.unstable_IdlePriority,Dr={},Mr=void 0!==Pr?Pr:function(){},Br=null,Fr=null,qr=!1,zr=Ar(),Ur=1e4>zr?Ar:function(){return Ar()-zr};function Hr(){switch(_r()){case Tr:return 99;case Lr:return 98;case Nr:return 97;case Rr:return 96;case Ir:return 95;default:throw Error(i(332))}}function Vr(e){switch(e){case 99:return Tr;case 98:return Lr;case 97:return Nr;case 96:return Rr;case 95:return Ir;default:throw Error(i(332))}}function Qr(e,t){return e=Vr(e),Sr(e,t)}function $r(e,t,n){return e=Vr(e),Or(e,t,n)}function Xr(){if(null!==Fr){var e=Fr;Fr=null,Cr(e)}Wr()}function Wr(){if(!qr&&null!==Br){qr=!0;var e=0;try{var t=Br;Qr(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Br=null}catch(t){throw null!==Br&&(Br=Br.slice(e+1)),Or(Tr,Xr),t}finally{qr=!1}}}var Kr=k.ReactCurrentBatchConfig;function Yr(e,t){if(e&&e.defaultProps){for(var n in t=r({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Jr=ar(null),Gr=null,Zr=null,es=null;function ts(){es=Zr=Gr=null}function ns(e){var t=Jr.current;pr(Jr),e.type._context._currentValue=t}function ls(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function rs(e,t){Gr=e,es=Zr=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ii=!0),e.firstContext=null)}function ss(e,t){if(es!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(es=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zr){if(null===Gr)throw Error(i(308));Zr=t,Gr.dependencies={lanes:0,firstContext:t,responders:null}}else Zr=Zr.next=t;return e._currentValue}var is=!1;function os(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function as(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ps(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function us(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function cs(e,t){var n=e.updateQueue,l=e.alternate;if(null!==l&&n===(l=l.updateQueue)){var r=null,s=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===s?r=s=i:s=s.next=i,n=n.next}while(null!==n);null===s?r=s=t:s=s.next=t}else r=s=t;return n={baseState:l.baseState,firstBaseUpdate:r,lastBaseUpdate:s,shared:l.shared,effects:l.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ds(e,t,n,l){var s=e.updateQueue;is=!1;var i=s.firstBaseUpdate,o=s.lastBaseUpdate,a=s.shared.pending;if(null!==a){s.shared.pending=null;var p=a,u=p.next;p.next=null,null===o?i=u:o.next=u,o=p;var c=e.alternate;if(null!==c){var d=(c=c.updateQueue).lastBaseUpdate;d!==o&&(null===d?c.firstBaseUpdate=u:d.next=u,c.lastBaseUpdate=p)}}if(null!==i){for(d=s.baseState,o=0,c=u=p=null;;){a=i.lane;var f=i.eventTime;if((l&a)===a){null!==c&&(c=c.next={eventTime:f,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var g=e,h=i;switch(a=t,f=n,h.tag){case 1:if("function"==typeof(g=h.payload)){d=g.call(f,d,a);break e}d=g;break e;case 3:g.flags=-4097&g.flags|64;case 0:if(null==(a="function"==typeof(g=h.payload)?g.call(f,d,a):g))break e;d=r({},d,a);break e;case 2:is=!0}}null!==i.callback&&(e.flags|=32,null===(a=s.effects)?s.effects=[i]:a.push(i))}else f={eventTime:f,lane:a,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===c?(u=c=f,p=d):c=c.next=f,o|=a;if(null===(i=i.next)){if(null===(a=s.shared.pending))break;i=a.next,a.next=null,s.lastBaseUpdate=a,s.shared.pending=null}}null===c&&(p=d),s.baseState=p,s.firstBaseUpdate=u,s.lastBaseUpdate=c,Bo|=o,e.lanes=o,e.memoizedState=d}}function fs(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var l=e[t],r=l.callback;if(null!==r){if(l.callback=null,l=n,"function"!=typeof r)throw Error(i(191,r));r.call(l)}}}var gs=(new l.Component).refs;function hs(e,t,n,l){n=null==(n=n(l,t=e.memoizedState))?t:r({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var vs={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var l=pa(),r=ua(e),s=ps(l,r);s.payload=t,null!=n&&(s.callback=n),us(e,s),ca(e,r,l)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var l=pa(),r=ua(e),s=ps(l,r);s.tag=1,s.payload=t,null!=n&&(s.callback=n),us(e,s),ca(e,r,l)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=pa(),l=ua(e),r=ps(n,l);r.tag=2,null!=t&&(r.callback=t),us(e,r),ca(e,l,n)}};function ms(e,t,n,l,r,s,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(l,s,i):!(t.prototype&&t.prototype.isPureReactComponent&&cl(n,l)&&cl(r,s))}function ws(e,t,n){var l=!1,r=cr,s=t.contextType;return"object"==typeof s&&null!==s?s=ss(s):(r=vr(t)?gr:dr.current,s=(l=null!=(l=t.contextTypes))?hr(e,r):cr),t=new t(n,s),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vs,e.stateNode=t,t._reactInternals=e,l&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=s),t}function ys(e,t,n,l){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,l),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,l),t.state!==e&&vs.enqueueReplaceState(t,t.state,null)}function bs(e,t,n,l){var r=e.stateNode;r.props=n,r.state=e.memoizedState,r.refs=gs,os(e);var s=t.contextType;"object"==typeof s&&null!==s?r.context=ss(s):(s=vr(t)?gr:dr.current,r.context=hr(e,s)),ds(e,n,r,l),r.state=e.memoizedState,"function"==typeof(s=t.getDerivedStateFromProps)&&(hs(e,t,s,n),r.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(t=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),t!==r.state&&vs.enqueueReplaceState(r,r.state,null),ds(e,n,r,l),r.state=e.memoizedState),"function"==typeof r.componentDidMount&&(e.flags|=4)}var ks=Array.isArray;function xs(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var l=n.stateNode}if(!l)throw Error(i(147,e));var r=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===r?t.ref:(t=function(e){var t=l.refs;t===gs&&(t=l.refs={}),null===e?delete t[r]:t[r]=e},t._stringRef=r,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function js(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ss(e){function t(t,n){if(e){var l=t.lastEffect;null!==l?(l.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,l){if(!e)return null;for(;null!==l;)t(n,l),l=l.sibling;return null}function l(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function r(e,t){return(e=Ha(e,t)).index=0,e.sibling=null,e}function s(t,n,l){return t.index=l,e?null!==(l=t.alternate)?(l=l.index)<n?(t.flags=2,n):l:(t.flags=2,n):n}function o(t){return e&&null===t.alternate&&(t.flags=2),t}function a(e,t,n,l){return null===t||6!==t.tag?((t=Xa(n,e.mode,l)).return=e,t):((t=r(t,n)).return=e,t)}function p(e,t,n,l){return null!==t&&t.elementType===n.type?((l=r(t,n.props)).ref=xs(e,t,n),l.return=e,l):((l=Va(n.type,n.key,n.props,null,e.mode,l)).ref=xs(e,t,n),l.return=e,l)}function u(e,t,n,l){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Wa(n,e.mode,l)).return=e,t):((t=r(t,n.children||[])).return=e,t)}function c(e,t,n,l,s){return null===t||7!==t.tag?((t=Qa(n,e.mode,l,s)).return=e,t):((t=r(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xa(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Va(t.type,t.key,t.props,null,e.mode,n)).ref=xs(e,null,t),n.return=e,n;case j:return(t=Wa(t,e.mode,n)).return=e,t}if(ks(t)||U(t))return(t=Qa(t,e.mode,n,null)).return=e,t;js(e,t)}return null}function f(e,t,n,l){var r=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:a(e,t,""+n,l);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===r?n.type===S?c(e,t,n.props.children,l,r):p(e,t,n,l):null;case j:return n.key===r?u(e,t,n,l):null}if(ks(n)||U(n))return null!==r?null:c(e,t,n,l,null);js(e,n)}return null}function g(e,t,n,l,r){if("string"==typeof l||"number"==typeof l)return a(t,e=e.get(n)||null,""+l,r);if("object"==typeof l&&null!==l){switch(l.$$typeof){case x:return e=e.get(null===l.key?n:l.key)||null,l.type===S?c(t,e,l.props.children,r,l.key):p(t,e,l,r);case j:return u(t,e=e.get(null===l.key?n:l.key)||null,l,r)}if(ks(l)||U(l))return c(t,e=e.get(n)||null,l,r,null);js(t,l)}return null}function h(r,i,o,a){for(var p=null,u=null,c=i,h=i=0,v=null;null!==c&&h<o.length;h++){c.index>h?(v=c,c=null):v=c.sibling;var m=f(r,c,o[h],a);if(null===m){null===c&&(c=v);break}e&&c&&null===m.alternate&&t(r,c),i=s(m,i,h),null===u?p=m:u.sibling=m,u=m,c=v}if(h===o.length)return n(r,c),p;if(null===c){for(;h<o.length;h++)null!==(c=d(r,o[h],a))&&(i=s(c,i,h),null===u?p=c:u.sibling=c,u=c);return p}for(c=l(r,c);h<o.length;h++)null!==(v=g(c,r,h,o[h],a))&&(e&&null!==v.alternate&&c.delete(null===v.key?h:v.key),i=s(v,i,h),null===u?p=v:u.sibling=v,u=v);return e&&c.forEach((function(e){return t(r,e)})),p}function v(r,o,a,p){var u=U(a);if("function"!=typeof u)throw Error(i(150));if(null==(a=u.call(a)))throw Error(i(151));for(var c=u=null,h=o,v=o=0,m=null,w=a.next();null!==h&&!w.done;v++,w=a.next()){h.index>v?(m=h,h=null):m=h.sibling;var y=f(r,h,w.value,p);if(null===y){null===h&&(h=m);break}e&&h&&null===y.alternate&&t(r,h),o=s(y,o,v),null===c?u=y:c.sibling=y,c=y,h=m}if(w.done)return n(r,h),u;if(null===h){for(;!w.done;v++,w=a.next())null!==(w=d(r,w.value,p))&&(o=s(w,o,v),null===c?u=w:c.sibling=w,c=w);return u}for(h=l(r,h);!w.done;v++,w=a.next())null!==(w=g(h,r,v,w.value,p))&&(e&&null!==w.alternate&&h.delete(null===w.key?v:w.key),o=s(w,o,v),null===c?u=w:c.sibling=w,c=w);return e&&h.forEach((function(e){return t(r,e)})),u}return function(e,l,s,a){var p="object"==typeof s&&null!==s&&s.type===S&&null===s.key;p&&(s=s.props.children);var u="object"==typeof s&&null!==s;if(u)switch(s.$$typeof){case x:e:{for(u=s.key,p=l;null!==p;){if(p.key===u){if(7===p.tag){if(s.type===S){n(e,p.sibling),(l=r(p,s.props.children)).return=e,e=l;break e}}else if(p.elementType===s.type){n(e,p.sibling),(l=r(p,s.props)).ref=xs(e,p,s),l.return=e,e=l;break e}n(e,p);break}t(e,p),p=p.sibling}s.type===S?((l=Qa(s.props.children,e.mode,a,s.key)).return=e,e=l):((a=Va(s.type,s.key,s.props,null,e.mode,a)).ref=xs(e,l,s),a.return=e,e=a)}return o(e);case j:e:{for(p=s.key;null!==l;){if(l.key===p){if(4===l.tag&&l.stateNode.containerInfo===s.containerInfo&&l.stateNode.implementation===s.implementation){n(e,l.sibling),(l=r(l,s.children||[])).return=e,e=l;break e}n(e,l);break}t(e,l),l=l.sibling}(l=Wa(s,e.mode,a)).return=e,e=l}return o(e)}if("string"==typeof s||"number"==typeof s)return s=""+s,null!==l&&6===l.tag?(n(e,l.sibling),(l=r(l,s)).return=e,e=l):(n(e,l),(l=Xa(s,e.mode,a)).return=e,e=l),o(e);if(ks(s))return h(e,l,s,a);if(U(s))return v(e,l,s,a);if(u&&js(e,s),void 0===s&&!p)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,X(e.type)||"Component"))}return n(e,l)}}var Os=Ss(!0),Cs=Ss(!1),Es={},Ps=ar(Es),As=ar(Es),_s=ar(Es);function Ts(e){if(e===Es)throw Error(i(174));return e}function Ls(e,t){switch(ur(_s,t),ur(As,e),ur(Ps,Es),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}pr(Ps),ur(Ps,t)}function Ns(){pr(Ps),pr(As),pr(_s)}function Rs(e){Ts(_s.current);var t=Ts(Ps.current),n=fe(t,e.type);t!==n&&(ur(As,e),ur(Ps,n))}function Is(e){As.current===e&&(pr(Ps),pr(As))}var Ds=ar(0);function Ms(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Bs=null,Fs=null,qs=!1;function zs(e,t){var n=za(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Us(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Hs(e){if(qs){var t=Fs;if(t){var n=t;if(!Us(e,t)){if(!(t=Xl(n.nextSibling))||!Us(e,t))return e.flags=-1025&e.flags|2,qs=!1,void(Bs=e);zs(Bs,n)}Bs=e,Fs=Xl(t.firstChild)}else e.flags=-1025&e.flags|2,qs=!1,Bs=e}}function Vs(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Bs=e}function Qs(e){if(e!==Bs)return!1;if(!qs)return Vs(e),qs=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Hl(t,e.memoizedProps))for(t=Fs;t;)zs(e,t),t=Xl(t.nextSibling);if(Vs(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fs=Xl(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fs=null}}else Fs=Bs?Xl(e.stateNode.nextSibling):null;return!0}function $s(){Fs=Bs=null,qs=!1}var Xs=[];function Ws(){for(var e=0;e<Xs.length;e++)Xs[e]._workInProgressVersionPrimary=null;Xs.length=0}var Ks=k.ReactCurrentDispatcher,Ys=k.ReactCurrentBatchConfig,Js=0,Gs=null,Zs=null,ei=null,ti=!1,ni=!1;function li(){throw Error(i(321))}function ri(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!pl(e[n],t[n]))return!1;return!0}function si(e,t,n,l,r,s){if(Js=s,Gs=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ks.current=null===e||null===e.memoizedState?Ti:Li,e=n(l,r),ni){s=0;do{if(ni=!1,!(25>s))throw Error(i(301));s+=1,ei=Zs=null,t.updateQueue=null,Ks.current=Ni,e=n(l,r)}while(ni)}if(Ks.current=_i,t=null!==Zs&&null!==Zs.next,Js=0,ei=Zs=Gs=null,ti=!1,t)throw Error(i(300));return e}function ii(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ei?Gs.memoizedState=ei=e:ei=ei.next=e,ei}function oi(){if(null===Zs){var e=Gs.alternate;e=null!==e?e.memoizedState:null}else e=Zs.next;var t=null===ei?Gs.memoizedState:ei.next;if(null!==t)ei=t,Zs=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Zs=e).memoizedState,baseState:Zs.baseState,baseQueue:Zs.baseQueue,queue:Zs.queue,next:null},null===ei?Gs.memoizedState=ei=e:ei=ei.next=e}return ei}function ai(e,t){return"function"==typeof t?t(e):t}function pi(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var l=Zs,r=l.baseQueue,s=n.pending;if(null!==s){if(null!==r){var o=r.next;r.next=s.next,s.next=o}l.baseQueue=r=s,n.pending=null}if(null!==r){r=r.next,l=l.baseState;var a=o=s=null,p=r;do{var u=p.lane;if((Js&u)===u)null!==a&&(a=a.next={lane:0,action:p.action,eagerReducer:p.eagerReducer,eagerState:p.eagerState,next:null}),l=p.eagerReducer===e?p.eagerState:e(l,p.action);else{var c={lane:u,action:p.action,eagerReducer:p.eagerReducer,eagerState:p.eagerState,next:null};null===a?(o=a=c,s=l):a=a.next=c,Gs.lanes|=u,Bo|=u}p=p.next}while(null!==p&&p!==r);null===a?s=l:a.next=o,pl(l,t.memoizedState)||(Ii=!0),t.memoizedState=l,t.baseState=s,t.baseQueue=a,n.lastRenderedState=l}return[t.memoizedState,n.dispatch]}function ui(e){var t=oi(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var l=n.dispatch,r=n.pending,s=t.memoizedState;if(null!==r){n.pending=null;var o=r=r.next;do{s=e(s,o.action),o=o.next}while(o!==r);pl(s,t.memoizedState)||(Ii=!0),t.memoizedState=s,null===t.baseQueue&&(t.baseState=s),n.lastRenderedState=s}return[s,l]}function ci(e,t,n){var l=t._getVersion;l=l(t._source);var r=t._workInProgressVersionPrimary;if(null!==r?e=r===l:(e=e.mutableReadLanes,(e=(Js&e)===e)&&(t._workInProgressVersionPrimary=l,Xs.push(t))),e)return n(t._source);throw Xs.push(t),Error(i(350))}function di(e,t,n,l){var r=_o;if(null===r)throw Error(i(349));var s=t._getVersion,o=s(t._source),a=Ks.current,p=a.useState((function(){return ci(r,t,n)})),u=p[1],c=p[0];p=ei;var d=e.memoizedState,f=d.refs,g=f.getSnapshot,h=d.source;d=d.subscribe;var v=Gs;return e.memoizedState={refs:f,source:t,subscribe:l},a.useEffect((function(){f.getSnapshot=n,f.setSnapshot=u;var e=s(t._source);if(!pl(o,e)){e=n(t._source),pl(c,e)||(u(e),e=ua(v),r.mutableReadLanes|=e&r.pendingLanes),e=r.mutableReadLanes,r.entangledLanes|=e;for(var l=r.entanglements,i=e;0<i;){var a=31-Ht(i),p=1<<a;l[a]|=e,i&=~p}}}),[n,t,l]),a.useEffect((function(){return l(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var l=ua(v);r.mutableReadLanes|=l&r.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,l]),pl(g,n)&&pl(h,t)&&pl(d,l)||((e={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:c}).dispatch=u=Ai.bind(null,Gs,e),p.queue=e,p.baseQueue=null,c=ci(r,t,n),p.memoizedState=p.baseState=c),c}function fi(e,t,n){return di(oi(),e,t,n)}function gi(e){var t=ii();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ai,lastRenderedState:e}).dispatch=Ai.bind(null,Gs,e),[t.memoizedState,e]}function hi(e,t,n,l){return e={tag:e,create:t,destroy:n,deps:l,next:null},null===(t=Gs.updateQueue)?(t={lastEffect:null},Gs.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(l=n.next,n.next=e,e.next=l,t.lastEffect=e),e}function vi(e){return e={current:e},ii().memoizedState=e}function mi(){return oi().memoizedState}function wi(e,t,n,l){var r=ii();Gs.flags|=e,r.memoizedState=hi(1|t,n,void 0,void 0===l?null:l)}function yi(e,t,n,l){var r=oi();l=void 0===l?null:l;var s=void 0;if(null!==Zs){var i=Zs.memoizedState;if(s=i.destroy,null!==l&&ri(l,i.deps))return void hi(t,n,s,l)}Gs.flags|=e,r.memoizedState=hi(1|t,n,s,l)}function bi(e,t){return wi(516,4,e,t)}function ki(e,t){return yi(516,4,e,t)}function xi(e,t){return yi(4,2,e,t)}function ji(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Si(e,t,n){return n=null!=n?n.concat([e]):null,yi(4,2,ji.bind(null,t,e),n)}function Oi(){}function Ci(e,t){var n=oi();t=void 0===t?null:t;var l=n.memoizedState;return null!==l&&null!==t&&ri(t,l[1])?l[0]:(n.memoizedState=[e,t],e)}function Ei(e,t){var n=oi();t=void 0===t?null:t;var l=n.memoizedState;return null!==l&&null!==t&&ri(t,l[1])?l[0]:(e=e(),n.memoizedState=[e,t],e)}function Pi(e,t){var n=Hr();Qr(98>n?98:n,(function(){e(!0)})),Qr(97<n?97:n,(function(){var n=Ys.transition;Ys.transition=1;try{e(!1),t()}finally{Ys.transition=n}}))}function Ai(e,t,n){var l=pa(),r=ua(e),s={lane:r,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?s.next=s:(s.next=i.next,i.next=s),t.pending=s,i=e.alternate,e===Gs||null!==i&&i===Gs)ni=ti=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var o=t.lastRenderedState,a=i(o,n);if(s.eagerReducer=i,s.eagerState=a,pl(a,o))return}catch(e){}ca(e,r,l)}}var _i={readContext:ss,useCallback:li,useContext:li,useEffect:li,useImperativeHandle:li,useLayoutEffect:li,useMemo:li,useReducer:li,useRef:li,useState:li,useDebugValue:li,useDeferredValue:li,useTransition:li,useMutableSource:li,useOpaqueIdentifier:li,unstable_isNewReconciler:!1},Ti={readContext:ss,useCallback:function(e,t){return ii().memoizedState=[e,void 0===t?null:t],e},useContext:ss,useEffect:bi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wi(4,2,ji.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wi(4,2,e,t)},useMemo:function(e,t){var n=ii();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var l=ii();return t=void 0!==n?n(t):t,l.memoizedState=l.baseState=t,e=(e=l.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ai.bind(null,Gs,e),[l.memoizedState,e]},useRef:vi,useState:gi,useDebugValue:Oi,useDeferredValue:function(e){var t=gi(e),n=t[0],l=t[1];return bi((function(){var t=Ys.transition;Ys.transition=1;try{l(e)}finally{Ys.transition=t}}),[e]),n},useTransition:function(){var e=gi(!1),t=e[0];return vi(e=Pi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var l=ii();return l.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},di(l,e,t,n)},useOpaqueIdentifier:function(){if(qs){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Kl++).toString(36))),Error(i(355))})),n=gi(t)[1];return 0==(2&Gs.mode)&&(Gs.flags|=516,hi(5,(function(){n("r:"+(Kl++).toString(36))}),void 0,null)),t}return gi(t="r:"+(Kl++).toString(36)),t},unstable_isNewReconciler:!1},Li={readContext:ss,useCallback:Ci,useContext:ss,useEffect:ki,useImperativeHandle:Si,useLayoutEffect:xi,useMemo:Ei,useReducer:pi,useRef:mi,useState:function(){return pi(ai)},useDebugValue:Oi,useDeferredValue:function(e){var t=pi(ai),n=t[0],l=t[1];return ki((function(){var t=Ys.transition;Ys.transition=1;try{l(e)}finally{Ys.transition=t}}),[e]),n},useTransition:function(){var e=pi(ai)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return pi(ai)[0]},unstable_isNewReconciler:!1},Ni={readContext:ss,useCallback:Ci,useContext:ss,useEffect:ki,useImperativeHandle:Si,useLayoutEffect:xi,useMemo:Ei,useReducer:ui,useRef:mi,useState:function(){return ui(ai)},useDebugValue:Oi,useDeferredValue:function(e){var t=ui(ai),n=t[0],l=t[1];return ki((function(){var t=Ys.transition;Ys.transition=1;try{l(e)}finally{Ys.transition=t}}),[e]),n},useTransition:function(){var e=ui(ai)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return ui(ai)[0]},unstable_isNewReconciler:!1},Ri=k.ReactCurrentOwner,Ii=!1;function Di(e,t,n,l){t.child=null===e?Cs(t,null,n,l):Os(t,e.child,n,l)}function Mi(e,t,n,l,r){n=n.render;var s=t.ref;return rs(t,r),l=si(e,t,n,l,s,r),null===e||Ii?(t.flags|=1,Di(e,t,l,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,to(e,t,r))}function Bi(e,t,n,l,r,s){if(null===e){var i=n.type;return"function"!=typeof i||Ua(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Va(n.type,null,l,t,t.mode,s)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,l,r,s))}return i=e.child,0==(r&s)&&(r=i.memoizedProps,(n=null!==(n=n.compare)?n:cl)(r,l)&&e.ref===t.ref)?to(e,t,s):(t.flags|=1,(e=Ha(i,l)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,n,l,r,s){if(null!==e&&cl(e.memoizedProps,l)&&e.ref===t.ref){if(Ii=!1,0==(s&r))return t.lanes=e.lanes,to(e,t,s);0!=(16384&e.flags)&&(Ii=!0)}return Ui(e,t,n,l,s)}function qi(e,t,n){var l=t.pendingProps,r=l.children,s=null!==e?e.memoizedState:null;if("hidden"===l.mode||"unstable-defer-without-hiding"===l.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ya(0,n);else{if(0==(1073741824&n))return e=null!==s?s.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ya(0,e),null;t.memoizedState={baseLanes:0},ya(0,null!==s?s.baseLanes:n)}else null!==s?(l=s.baseLanes|n,t.memoizedState=null):l=n,ya(0,l);return Di(e,t,r,n),t.child}function zi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ui(e,t,n,l,r){var s=vr(n)?gr:dr.current;return s=hr(t,s),rs(t,r),n=si(e,t,n,l,s,r),null===e||Ii?(t.flags|=1,Di(e,t,n,r),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~r,to(e,t,r))}function Hi(e,t,n,l,r){if(vr(n)){var s=!0;br(t)}else s=!1;if(rs(t,r),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ws(t,n,l),bs(t,n,l,r),l=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var a=i.context,p=n.contextType;p="object"==typeof p&&null!==p?ss(p):hr(t,p=vr(n)?gr:dr.current);var u=n.getDerivedStateFromProps,c="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==l||a!==p)&&ys(t,i,l,p),is=!1;var d=t.memoizedState;i.state=d,ds(t,l,i,r),a=t.memoizedState,o!==l||d!==a||fr.current||is?("function"==typeof u&&(hs(t,n,u,l),a=t.memoizedState),(o=is||ms(t,n,o,l,d,a,p))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=l,t.memoizedState=a),i.props=l,i.state=a,i.context=p,l=o):("function"==typeof i.componentDidMount&&(t.flags|=4),l=!1)}else{i=t.stateNode,as(e,t),o=t.memoizedProps,p=t.type===t.elementType?o:Yr(t.type,o),i.props=p,c=t.pendingProps,d=i.context,a="object"==typeof(a=n.contextType)&&null!==a?ss(a):hr(t,a=vr(n)?gr:dr.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==c||d!==a)&&ys(t,i,l,a),is=!1,d=t.memoizedState,i.state=d,ds(t,l,i,r);var g=t.memoizedState;o!==c||d!==g||fr.current||is?("function"==typeof f&&(hs(t,n,f,l),g=t.memoizedState),(p=is||ms(t,n,p,l,d,g,a))?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(l,g,a),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(l,g,a)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=l,t.memoizedState=g),i.props=l,i.state=g,i.context=a,l=p):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),l=!1)}return Vi(e,t,n,l,s,r)}function Vi(e,t,n,l,r,s){zi(e,t);var i=0!=(64&t.flags);if(!l&&!i)return r&&kr(t,n,!1),to(e,t,s);l=t.stateNode,Ri.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:l.render();return t.flags|=1,null!==e&&i?(t.child=Os(t,e.child,null,s),t.child=Os(t,null,o,s)):Di(e,t,o,s),t.memoizedState=l.state,r&&kr(t,n,!0),t.child}function Qi(e){var t=e.stateNode;t.pendingContext?wr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wr(0,t.context,!1),Ls(e,t.containerInfo)}var $i,Xi,Wi,Ki={dehydrated:null,retryLane:0};function Yi(e,t,n){var l,r=t.pendingProps,s=Ds.current,i=!1;return(l=0!=(64&t.flags))||(l=(null===e||null!==e.memoizedState)&&0!=(2&s)),l?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===r.fallback||!0===r.unstable_avoidThisFallback||(s|=1),ur(Ds,1&s),null===e?(void 0!==r.fallback&&Hs(t),e=r.children,s=r.fallback,i?(e=Ji(t,e,s,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ki,e):"number"==typeof r.unstable_expectedLoadTime?(e=Ji(t,e,s,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ki,t.lanes=33554432,e):((n=$a({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(r=function(e,t,n,l,r){var s=t.mode,i=e.child;e=i.sibling;var o={mode:"hidden",children:n};return 0==(2&s)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=o,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Ha(i,o),null!==e?l=Ha(e,l):(l=Qa(l,s,r,null)).flags|=2,l.return=t,n.return=t,n.sibling=l,t.child=n,l}(e,t,r.children,r.fallback,n),i=t.child,s=e.child.memoizedState,i.memoizedState=null===s?{baseLanes:n}:{baseLanes:s.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Ki,r):(n=function(e,t,n,l){var r=e.child;return e=r.sibling,n=Ha(r,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=l),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,r.children,n),t.memoizedState=null,n))}function Ji(e,t,n,l){var r=e.mode,s=e.child;return t={mode:"hidden",children:t},0==(2&r)&&null!==s?(s.childLanes=0,s.pendingProps=t):s=$a(t,r,0,null),n=Qa(n,r,l,null),s.return=e,n.return=e,s.sibling=n,e.child=s,n}function Gi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ls(e.return,t)}function Zi(e,t,n,l,r,s){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:l,tail:n,tailMode:r,lastEffect:s}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=l,i.tail=n,i.tailMode=r,i.lastEffect=s)}function eo(e,t,n){var l=t.pendingProps,r=l.revealOrder,s=l.tail;if(Di(e,t,l.children,n),0!=(2&(l=Ds.current)))l=1&l|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Gi(e,n);else if(19===e.tag)Gi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}l&=1}if(ur(Ds,l),0==(2&t.mode))t.memoizedState=null;else switch(r){case"forwards":for(n=t.child,r=null;null!==n;)null!==(e=n.alternate)&&null===Ms(e)&&(r=n),n=n.sibling;null===(n=r)?(r=t.child,t.child=null):(r=n.sibling,n.sibling=null),Zi(t,!1,r,n,s,t.lastEffect);break;case"backwards":for(n=null,r=t.child,t.child=null;null!==r;){if(null!==(e=r.alternate)&&null===Ms(e)){t.child=r;break}e=r.sibling,r.sibling=n,n=r,r=e}Zi(t,!0,n,null,s,t.lastEffect);break;case"together":Zi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function to(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Bo|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ha(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ha(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function no(e,t){if(!qs)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var l=null;null!==n;)null!==n.alternate&&(l=n),n=n.sibling;null===l?t||null===e.tail?e.tail=null:e.tail.sibling=null:l.sibling=null}}function lo(e,t,n){var l=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return vr(t.type)&&mr(),null;case 3:return Ns(),pr(fr),pr(dr),Ws(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==e&&null!==e.child||(Qs(t)?t.flags|=4:l.hydrate||(t.flags|=256)),null;case 5:Is(t);var s=Ts(_s.current);if(n=t.type,null!==e&&null!=t.stateNode)Xi(e,t,n,l),e.ref!==t.ref&&(t.flags|=128);else{if(!l){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ts(Ps.current),Qs(t)){l=t.stateNode,n=t.type;var o=t.memoizedProps;switch(l[Jl]=t,l[Gl]=o,n){case"dialog":Al("cancel",l),Al("close",l);break;case"iframe":case"object":case"embed":Al("load",l);break;case"video":case"audio":for(e=0;e<Ol.length;e++)Al(Ol[e],l);break;case"source":Al("error",l);break;case"img":case"image":case"link":Al("error",l),Al("load",l);break;case"details":Al("toggle",l);break;case"input":ee(l,o),Al("invalid",l);break;case"select":l._wrapperState={wasMultiple:!!o.multiple},Al("invalid",l);break;case"textarea":ae(l,o),Al("invalid",l)}for(var p in je(n,o),e=null,o)o.hasOwnProperty(p)&&(s=o[p],"children"===p?"string"==typeof s?l.textContent!==s&&(e=["children",s]):"number"==typeof s&&l.textContent!==""+s&&(e=["children",""+s]):a.hasOwnProperty(p)&&null!=s&&"onScroll"===p&&Al("scroll",l));switch(n){case"input":Y(l),le(l,o,!0);break;case"textarea":Y(l),ue(l);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(l.onclick=Fl)}l=e,t.updateQueue=l,null!==l&&(t.flags|=4)}else{switch(p=9===s.nodeType?s:s.ownerDocument,e===ce&&(e=de(n)),e===ce?"script"===n?((e=p.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof l.is?e=p.createElement(n,{is:l.is}):(e=p.createElement(n),"select"===n&&(p=e,l.multiple?p.multiple=!0:l.size&&(p.size=l.size))):e=p.createElementNS(e,n),e[Jl]=t,e[Gl]=l,$i(e,t),t.stateNode=e,p=Se(n,l),n){case"dialog":Al("cancel",e),Al("close",e),s=l;break;case"iframe":case"object":case"embed":Al("load",e),s=l;break;case"video":case"audio":for(s=0;s<Ol.length;s++)Al(Ol[s],e);s=l;break;case"source":Al("error",e),s=l;break;case"img":case"image":case"link":Al("error",e),Al("load",e),s=l;break;case"details":Al("toggle",e),s=l;break;case"input":ee(e,l),s=Z(e,l),Al("invalid",e);break;case"option":s=se(e,l);break;case"select":e._wrapperState={wasMultiple:!!l.multiple},s=r({},l,{value:void 0}),Al("invalid",e);break;case"textarea":ae(e,l),s=oe(e,l),Al("invalid",e);break;default:s=l}je(n,s);var u=s;for(o in u)if(u.hasOwnProperty(o)){var c=u[o];"style"===o?ke(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&ve(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&me(e,c):"number"==typeof c&&me(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(a.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Al("scroll",e):null!=c&&b(e,o,c,p))}switch(n){case"input":Y(e),le(e,l,!1);break;case"textarea":Y(e),ue(e);break;case"option":null!=l.value&&e.setAttribute("value",""+W(l.value));break;case"select":e.multiple=!!l.multiple,null!=(o=l.value)?ie(e,!!l.multiple,o,!1):null!=l.defaultValue&&ie(e,!!l.multiple,l.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=Fl)}Ul(n,l)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Wi(0,t,e.memoizedProps,l);else{if("string"!=typeof l&&null===t.stateNode)throw Error(i(166));n=Ts(_s.current),Ts(Ps.current),Qs(t)?(l=t.stateNode,n=t.memoizedProps,l[Jl]=t,l.nodeValue!==n&&(t.flags|=4)):((l=(9===n.nodeType?n:n.ownerDocument).createTextNode(l))[Jl]=t,t.stateNode=l)}return null;case 13:return pr(Ds),l=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(l=null!==l,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Qs(t):n=null!==e.memoizedState,l&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ds.current)?0===Io&&(Io=3):(0!==Io&&3!==Io||(Io=4),null===_o||0==(134217727&Bo)&&0==(134217727&Fo)||ha(_o,Lo))),(l||n)&&(t.flags|=4),null);case 4:return Ns(),null===e&&Tl(t.stateNode.containerInfo),null;case 10:return ns(t),null;case 19:if(pr(Ds),null===(l=t.memoizedState))return null;if(o=0!=(64&t.flags),null===(p=l.rendering))if(o)no(l,!1);else{if(0!==Io||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(p=Ms(e))){for(t.flags|=64,no(l,!1),null!==(o=p.updateQueue)&&(t.updateQueue=o,t.flags|=4),null===l.lastEffect&&(t.firstEffect=null),t.lastEffect=l.lastEffect,l=n,n=t.child;null!==n;)e=l,(o=n).flags&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(p=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=p.childLanes,o.lanes=p.lanes,o.child=p.child,o.memoizedProps=p.memoizedProps,o.memoizedState=p.memoizedState,o.updateQueue=p.updateQueue,o.type=p.type,e=p.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ur(Ds,1&Ds.current|2),t.child}e=e.sibling}null!==l.tail&&Ur()>Ho&&(t.flags|=64,o=!0,no(l,!1),t.lanes=33554432)}else{if(!o)if(null!==(e=Ms(p))){if(t.flags|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),no(l,!0),null===l.tail&&"hidden"===l.tailMode&&!p.alternate&&!qs)return null!==(t=t.lastEffect=l.lastEffect)&&(t.nextEffect=null),null}else 2*Ur()-l.renderingStartTime>Ho&&1073741824!==n&&(t.flags|=64,o=!0,no(l,!1),t.lanes=33554432);l.isBackwards?(p.sibling=t.child,t.child=p):(null!==(n=l.last)?n.sibling=p:t.child=p,l.last=p)}return null!==l.tail?(n=l.tail,l.rendering=n,l.tail=n.sibling,l.lastEffect=t.lastEffect,l.renderingStartTime=Ur(),n.sibling=null,t=Ds.current,ur(Ds,o?1&t|2:1&t),n):null;case 23:case 24:return ba(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==l.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ro(e){switch(e.tag){case 1:vr(e.type)&&mr();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ns(),pr(fr),pr(dr),Ws(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Is(e),null;case 13:return pr(Ds),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return pr(Ds),null;case 4:return Ns(),null;case 10:return ns(e),null;case 23:case 24:return ba(),null;default:return null}}function so(e,t){try{var n="",l=t;do{n+=$(l),l=l.return}while(l);var r=n}catch(e){r="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:r}}function io(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}$i=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Xi=function(e,t,n,l){var s=e.memoizedProps;if(s!==l){e=t.stateNode,Ts(Ps.current);var i,o=null;switch(n){case"input":s=Z(e,s),l=Z(e,l),o=[];break;case"option":s=se(e,s),l=se(e,l),o=[];break;case"select":s=r({},s,{value:void 0}),l=r({},l,{value:void 0}),o=[];break;case"textarea":s=oe(e,s),l=oe(e,l),o=[];break;default:"function"!=typeof s.onClick&&"function"==typeof l.onClick&&(e.onclick=Fl)}for(c in je(n,l),n=null,s)if(!l.hasOwnProperty(c)&&s.hasOwnProperty(c)&&null!=s[c])if("style"===c){var p=s[c];for(i in p)p.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(a.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in l){var u=l[c];if(p=null!=s?s[c]:void 0,l.hasOwnProperty(c)&&u!==p&&(null!=u||null!=p))if("style"===c)if(p){for(i in p)!p.hasOwnProperty(i)||u&&u.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in u)u.hasOwnProperty(i)&&p[i]!==u[i]&&(n||(n={}),n[i]=u[i])}else n||(o||(o=[]),o.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,p=p?p.__html:void 0,null!=u&&p!==u&&(o=o||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(o=o||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(a.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Al("scroll",e),o||p===u||(o=[])):"object"==typeof u&&null!==u&&u.$$typeof===I?u.toString():(o=o||[]).push(c,u))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},Wi=function(e,t,n,l){n!==l&&(t.flags|=4)};var oo="function"==typeof WeakMap?WeakMap:Map;function ao(e,t,n){(n=ps(-1,n)).tag=3,n.payload={element:null};var l=t.value;return n.callback=function(){Xo||(Xo=!0,Wo=l),io(0,t)},n}function po(e,t,n){(n=ps(-1,n)).tag=3;var l=e.type.getDerivedStateFromError;if("function"==typeof l){var r=t.value;n.payload=function(){return io(0,t),l(r)}}var s=e.stateNode;return null!==s&&"function"==typeof s.componentDidCatch&&(n.callback=function(){"function"!=typeof l&&(null===Ko?Ko=new Set([this]):Ko.add(this),io(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var uo="function"==typeof WeakSet?WeakSet:Set;function co(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Ma(e,t)}else t.current=null}function fo(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,l=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yr(t.type,n),l),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$l(t.stateNode.containerInfo))}throw Error(i(163))}function go(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var l=e.create;e.destroy=l()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var r=e;l=r.next,0!=(4&(r=r.tag))&&0!=(1&r)&&(Ra(n,e),Na(n,e)),e=l}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(l=n.elementType===n.type?t.memoizedProps:Yr(n.type,t.memoizedProps),e.componentDidUpdate(l,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fs(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}fs(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ul(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&kt(n)))))}throw Error(i(163))}function ho(e,t){for(var n=e;;){if(5===n.tag){var l=n.stateNode;if(t)"function"==typeof(l=l.style).setProperty?l.setProperty("display","none","important"):l.display="none";else{l=n.stateNode;var r=n.memoizedProps.style;r=null!=r&&r.hasOwnProperty("display")?r.display:null,l.style.display=be("display",r)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vo(e,t){if(jr&&"function"==typeof jr.onCommitFiberUnmount)try{jr.onCommitFiberUnmount(xr,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var l=n,r=l.destroy;if(l=l.tag,void 0!==r)if(0!=(4&l))Ra(t,n);else{l=t;try{r()}catch(e){Ma(l,e)}}n=n.next}while(n!==e)}break;case 1:if(co(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Ma(t,e)}break;case 5:co(t);break;case 4:xo(e,t)}}function mo(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function wo(e){return 5===e.tag||3===e.tag||4===e.tag}function yo(e){e:{for(var t=e.return;null!==t;){if(wo(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var l=!1;break;case 3:case 4:t=t.containerInfo,l=!0;break;default:throw Error(i(161))}16&n.flags&&(me(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||wo(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}l?bo(e,n,t):ko(e,n,t)}function bo(e,t,n){var l=e.tag,r=5===l||6===l;if(r)e=r?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Fl));else if(4!==l&&null!==(e=e.child))for(bo(e,t,n),e=e.sibling;null!==e;)bo(e,t,n),e=e.sibling}function ko(e,t,n){var l=e.tag,r=5===l||6===l;if(r)e=r?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==l&&null!==(e=e.child))for(ko(e,t,n),e=e.sibling;null!==e;)ko(e,t,n),e=e.sibling}function xo(e,t){for(var n,l,r=t,s=!1;;){if(!s){s=r.return;e:for(;;){if(null===s)throw Error(i(160));switch(n=s.stateNode,s.tag){case 5:l=!1;break e;case 3:case 4:n=n.containerInfo,l=!0;break e}s=s.return}s=!0}if(5===r.tag||6===r.tag){e:for(var o=e,a=r,p=a;;)if(vo(o,p),null!==p.child&&4!==p.tag)p.child.return=p,p=p.child;else{if(p===a)break e;for(;null===p.sibling;){if(null===p.return||p.return===a)break e;p=p.return}p.sibling.return=p.return,p=p.sibling}l?(o=n,a=r.stateNode,8===o.nodeType?o.parentNode.removeChild(a):o.removeChild(a)):n.removeChild(r.stateNode)}else if(4===r.tag){if(null!==r.child){n=r.stateNode.containerInfo,l=!0,r.child.return=r,r=r.child;continue}}else if(vo(e,r),null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;4===(r=r.return).tag&&(s=!1)}r.sibling.return=r.return,r=r.sibling}}function jo(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var l=n=n.next;do{3==(3&l.tag)&&(e=l.destroy,l.destroy=void 0,void 0!==e&&e()),l=l.next}while(l!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){l=t.memoizedProps;var r=null!==e?e.memoizedProps:l;e=t.type;var s=t.updateQueue;if(t.updateQueue=null,null!==s){for(n[Gl]=l,"input"===e&&"radio"===l.type&&null!=l.name&&te(n,l),Se(e,r),t=Se(e,l),r=0;r<s.length;r+=2){var o=s[r],a=s[r+1];"style"===o?ke(n,a):"dangerouslySetInnerHTML"===o?ve(n,a):"children"===o?me(n,a):b(n,o,a,t)}switch(e){case"input":ne(n,l);break;case"textarea":pe(n,l);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!l.multiple,null!=(s=l.value)?ie(n,!!l.multiple,s,!1):e!==!!l.multiple&&(null!=l.defaultValue?ie(n,!!l.multiple,l.defaultValue,!0):ie(n,!!l.multiple,l.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,kt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Uo=Ur(),ho(t.child,!0)),void So(t);case 19:return void So(t);case 23:case 24:return void ho(t,null!==t.memoizedState)}throw Error(i(163))}function So(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new uo),t.forEach((function(t){var l=Fa.bind(null,e,t);n.has(t)||(n.add(t),t.then(l,l))}))}}function Oo(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Co=Math.ceil,Eo=k.ReactCurrentDispatcher,Po=k.ReactCurrentOwner,Ao=0,_o=null,To=null,Lo=0,No=0,Ro=ar(0),Io=0,Do=null,Mo=0,Bo=0,Fo=0,qo=0,zo=null,Uo=0,Ho=1/0;function Vo(){Ho=Ur()+500}var Qo,$o=null,Xo=!1,Wo=null,Ko=null,Yo=!1,Jo=null,Go=90,Zo=[],ea=[],ta=null,na=0,la=null,ra=-1,sa=0,ia=0,oa=null,aa=!1;function pa(){return 0!=(48&Ao)?Ur():-1!==ra?ra:ra=Ur()}function ua(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Hr()?1:2;if(0===sa&&(sa=Mo),0!==Kr.transition){0!==ia&&(ia=null!==zo?zo.pendingLanes:0),e=sa;var t=4186112&~ia;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Hr(),e=Ft(0!=(4&Ao)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),sa)}function ca(e,t,n){if(50<na)throw na=0,la=null,Error(i(185));if(null===(e=da(e,t)))return null;Ut(e,t,n),e===_o&&(Fo|=t,4===Io&&ha(e,Lo));var l=Hr();1===t?0!=(8&Ao)&&0==(48&Ao)?va(e):(fa(e,n),0===Ao&&(Vo(),Xr())):(0==(4&Ao)||98!==l&&99!==l||(null===ta?ta=new Set([e]):ta.add(e)),fa(e,n)),zo=e}function da(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function fa(e,t){for(var n=e.callbackNode,l=e.suspendedLanes,r=e.pingedLanes,s=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-Ht(o),p=1<<a,u=s[a];if(-1===u){if(0==(p&l)||0!=(p&r)){u=t,Dt(p);var c=It;s[a]=10<=c?u+250:6<=c?u+5e3:-1}}else u<=t&&(e.expiredLanes|=p);o&=~p}if(l=Mt(e,e===_o?Lo:0),t=It,0===l)null!==n&&(n!==Dr&&Cr(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Dr&&Cr(n)}15===t?(n=va.bind(null,e),null===Br?(Br=[n],Fr=Or(Tr,Wr)):Br.push(n),n=Dr):14===t?n=$r(99,va.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=$r(n,ga.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function ga(e){if(ra=-1,ia=sa=0,0!=(48&Ao))throw Error(i(327));var t=e.callbackNode;if(La()&&e.callbackNode!==t)return null;var n=Mt(e,e===_o?Lo:0);if(0===n)return null;var l=n,r=Ao;Ao|=16;var s=ja();for(_o===e&&Lo===l||(Vo(),ka(e,l));;)try{Ca();break}catch(t){xa(e,t)}if(ts(),Eo.current=s,Ao=r,null!==To?l=0:(_o=null,Lo=0,l=Io),0!=(Mo&Fo))ka(e,0);else if(0!==l){if(2===l&&(Ao|=64,e.hydrate&&(e.hydrate=!1,$l(e.containerInfo)),0!==(n=Bt(e))&&(l=Sa(e,n))),1===l)throw t=Do,ka(e,0),ha(e,n),fa(e,Ur()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,l){case 0:case 1:throw Error(i(345));case 2:case 5:Aa(e);break;case 3:if(ha(e,n),(62914560&n)===n&&10<(l=Uo+500-Ur())){if(0!==Mt(e,0))break;if(((r=e.suspendedLanes)&n)!==n){pa(),e.pingedLanes|=e.suspendedLanes&r;break}e.timeoutHandle=Vl(Aa.bind(null,e),l);break}Aa(e);break;case 4:if(ha(e,n),(4186112&n)===n)break;for(l=e.eventTimes,r=-1;0<n;){var o=31-Ht(n);s=1<<o,(o=l[o])>r&&(r=o),n&=~s}if(n=r,10<(n=(120>(n=Ur()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Co(n/1960))-n)){e.timeoutHandle=Vl(Aa.bind(null,e),n);break}Aa(e);break;default:throw Error(i(329))}}return fa(e,Ur()),e.callbackNode===t?ga.bind(null,e):null}function ha(e,t){for(t&=~qo,t&=~Fo,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),l=1<<n;e[n]=-1,t&=~l}}function va(e){if(0!=(48&Ao))throw Error(i(327));if(La(),e===_o&&0!=(e.expiredLanes&Lo)){var t=Lo,n=Sa(e,t);0!=(Mo&Fo)&&(n=Sa(e,t=Mt(e,t)))}else n=Sa(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(Ao|=64,e.hydrate&&(e.hydrate=!1,$l(e.containerInfo)),0!==(t=Bt(e))&&(n=Sa(e,t))),1===n)throw n=Do,ka(e,0),ha(e,t),fa(e,Ur()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Aa(e),fa(e,Ur()),null}function ma(e,t){var n=Ao;Ao|=1;try{return e(t)}finally{0===(Ao=n)&&(Vo(),Xr())}}function wa(e,t){var n=Ao;Ao&=-2,Ao|=8;try{return e(t)}finally{0===(Ao=n)&&(Vo(),Xr())}}function ya(e,t){ur(Ro,No),No|=t,Mo|=t}function ba(){No=Ro.current,pr(Ro)}function ka(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ql(n)),null!==To)for(n=To.return;null!==n;){var l=n;switch(l.tag){case 1:null!=(l=l.type.childContextTypes)&&mr();break;case 3:Ns(),pr(fr),pr(dr),Ws();break;case 5:Is(l);break;case 4:Ns();break;case 13:case 19:pr(Ds);break;case 10:ns(l);break;case 23:case 24:ba()}n=n.return}_o=e,To=Ha(e.current,null),Lo=No=Mo=t,Io=0,Do=null,qo=Fo=Bo=0}function xa(e,t){for(;;){var n=To;try{if(ts(),Ks.current=_i,ti){for(var l=Gs.memoizedState;null!==l;){var r=l.queue;null!==r&&(r.pending=null),l=l.next}ti=!1}if(Js=0,ei=Zs=Gs=null,ni=!1,Po.current=null,null===n||null===n.return){Io=1,Do=t,To=null;break}e:{var s=e,i=n.return,o=n,a=t;if(t=Lo,o.flags|=2048,o.firstEffect=o.lastEffect=null,null!==a&&"object"==typeof a&&"function"==typeof a.then){var p=a;if(0==(2&o.mode)){var u=o.alternate;u?(o.updateQueue=u.updateQueue,o.memoizedState=u.memoizedState,o.lanes=u.lanes):(o.updateQueue=null,o.memoizedState=null)}var c=0!=(1&Ds.current),d=i;do{var f;if(f=13===d.tag){var g=d.memoizedState;if(null!==g)f=null!==g.dehydrated;else{var h=d.memoizedProps;f=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!c)}}if(f){var v=d.updateQueue;if(null===v){var m=new Set;m.add(p),d.updateQueue=m}else v.add(p);if(0==(2&d.mode)){if(d.flags|=64,o.flags|=16384,o.flags&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var w=ps(-1,1);w.tag=2,us(o,w)}o.lanes|=1;break e}a=void 0,o=t;var y=s.pingCache;if(null===y?(y=s.pingCache=new oo,a=new Set,y.set(p,a)):void 0===(a=y.get(p))&&(a=new Set,y.set(p,a)),!a.has(o)){a.add(o);var b=Ba.bind(null,s,p,o);p.then(b,b)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);a=Error((X(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Io&&(Io=2),a=so(a,o),d=i;do{switch(d.tag){case 3:s=a,d.flags|=4096,t&=-t,d.lanes|=t,cs(d,ao(0,s,t));break e;case 1:s=a;var k=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Ko||!Ko.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,cs(d,po(d,s,t));break e}}d=d.return}while(null!==d)}Pa(n)}catch(e){t=e,To===n&&null!==n&&(To=n=n.return);continue}break}}function ja(){var e=Eo.current;return Eo.current=_i,null===e?_i:e}function Sa(e,t){var n=Ao;Ao|=16;var l=ja();for(_o===e&&Lo===t||ka(e,t);;)try{Oa();break}catch(t){xa(e,t)}if(ts(),Ao=n,Eo.current=l,null!==To)throw Error(i(261));return _o=null,Lo=0,Io}function Oa(){for(;null!==To;)Ea(To)}function Ca(){for(;null!==To&&!Er();)Ea(To)}function Ea(e){var t=Qo(e.alternate,e,No);e.memoizedProps=e.pendingProps,null===t?Pa(e):To=t,Po.current=null}function Pa(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=lo(n,t,No)))return void(To=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&No)||0==(4&n.mode)){for(var l=0,r=n.child;null!==r;)l|=r.lanes|r.childLanes,r=r.sibling;n.childLanes=l}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ro(t)))return n.flags&=2047,void(To=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(To=t);To=t=e}while(null!==t);0===Io&&(Io=5)}function Aa(e){var t=Hr();return Qr(99,_a.bind(null,e,t)),null}function _a(e,t){do{La()}while(null!==Jo);if(0!=(48&Ao))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var l=n.lanes|n.childLanes,r=l,s=e.pendingLanes&~r;e.pendingLanes=r,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=r,e.mutableReadLanes&=r,e.entangledLanes&=r,r=e.entanglements;for(var o=e.eventTimes,a=e.expirationTimes;0<s;){var p=31-Ht(s),u=1<<p;r[p]=0,o[p]=-1,a[p]=-1,s&=~u}if(null!==ta&&0==(24&l)&&ta.has(e)&&ta.delete(e),e===_o&&(To=_o=null,Lo=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,l=n.firstEffect):l=n:l=n.firstEffect,null!==l){if(r=Ao,Ao|=32,Po.current=null,ql=Wt,vl(o=hl())){if("selectionStart"in o)a={start:o.selectionStart,end:o.selectionEnd};else e:if(a=(a=o.ownerDocument)&&a.defaultView||window,(u=a.getSelection&&a.getSelection())&&0!==u.rangeCount){a=u.anchorNode,s=u.anchorOffset,p=u.focusNode,u=u.focusOffset;try{a.nodeType,p.nodeType}catch(e){a=null;break e}var c=0,d=-1,f=-1,g=0,h=0,v=o,m=null;t:for(;;){for(var w;v!==a||0!==s&&3!==v.nodeType||(d=c+s),v!==p||0!==u&&3!==v.nodeType||(f=c+u),3===v.nodeType&&(c+=v.nodeValue.length),null!==(w=v.firstChild);)m=v,v=w;for(;;){if(v===o)break t;if(m===a&&++g===s&&(d=c),m===p&&++h===u&&(f=c),null!==(w=v.nextSibling))break;m=(v=m).parentNode}v=w}a=-1===d||-1===f?null:{start:d,end:f}}else a=null;a=a||{start:0,end:0}}else a=null;zl={focusedElem:o,selectionRange:a},Wt=!1,oa=null,aa=!1,$o=l;do{try{Ta()}catch(e){if(null===$o)throw Error(i(330));Ma($o,e),$o=$o.nextEffect}}while(null!==$o);oa=null,$o=l;do{try{for(o=e;null!==$o;){var y=$o.flags;if(16&y&&me($o.stateNode,""),128&y){var b=$o.alternate;if(null!==b){var k=b.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&y){case 2:yo($o),$o.flags&=-3;break;case 6:yo($o),$o.flags&=-3,jo($o.alternate,$o);break;case 1024:$o.flags&=-1025;break;case 1028:$o.flags&=-1025,jo($o.alternate,$o);break;case 4:jo($o.alternate,$o);break;case 8:xo(o,a=$o);var x=a.alternate;mo(a),null!==x&&mo(x)}$o=$o.nextEffect}}catch(e){if(null===$o)throw Error(i(330));Ma($o,e),$o=$o.nextEffect}}while(null!==$o);if(k=zl,b=hl(),y=k.focusedElem,o=k.selectionRange,b!==y&&y&&y.ownerDocument&&gl(y.ownerDocument.documentElement,y)){null!==o&&vl(y)&&(b=o.start,void 0===(k=o.end)&&(k=b),"selectionStart"in y?(y.selectionStart=b,y.selectionEnd=Math.min(k,y.value.length)):(k=(b=y.ownerDocument||document)&&b.defaultView||window).getSelection&&(k=k.getSelection(),a=y.textContent.length,x=Math.min(o.start,a),o=void 0===o.end?x:Math.min(o.end,a),!k.extend&&x>o&&(a=o,o=x,x=a),a=fl(y,x),s=fl(y,o),a&&s&&(1!==k.rangeCount||k.anchorNode!==a.node||k.anchorOffset!==a.offset||k.focusNode!==s.node||k.focusOffset!==s.offset)&&((b=b.createRange()).setStart(a.node,a.offset),k.removeAllRanges(),x>o?(k.addRange(b),k.extend(s.node,s.offset)):(b.setEnd(s.node,s.offset),k.addRange(b))))),b=[];for(k=y;k=k.parentNode;)1===k.nodeType&&b.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<b.length;y++)(k=b[y]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Wt=!!ql,zl=ql=null,e.current=n,$o=l;do{try{for(y=e;null!==$o;){var j=$o.flags;if(36&j&&go(y,$o.alternate,$o),128&j){b=void 0;var S=$o.ref;if(null!==S){var O=$o.stateNode;$o.tag,b=O,"function"==typeof S?S(b):S.current=b}}$o=$o.nextEffect}}catch(e){if(null===$o)throw Error(i(330));Ma($o,e),$o=$o.nextEffect}}while(null!==$o);$o=null,Mr(),Ao=r}else e.current=n;if(Yo)Yo=!1,Jo=e,Go=t;else for($o=l;null!==$o;)t=$o.nextEffect,$o.nextEffect=null,8&$o.flags&&((j=$o).sibling=null,j.stateNode=null),$o=t;if(0===(l=e.pendingLanes)&&(Ko=null),1===l?e===la?na++:(na=0,la=e):na=0,n=n.stateNode,jr&&"function"==typeof jr.onCommitFiberRoot)try{jr.onCommitFiberRoot(xr,n,void 0,64==(64&n.current.flags))}catch(e){}if(fa(e,Ur()),Xo)throw Xo=!1,e=Wo,Wo=null,e;return 0!=(8&Ao)||Xr(),null}function Ta(){for(;null!==$o;){var e=$o.alternate;aa||null===oa||(0!=(8&$o.flags)?Ze($o,oa)&&(aa=!0):13===$o.tag&&Oo(e,$o)&&Ze($o,oa)&&(aa=!0));var t=$o.flags;0!=(256&t)&&fo(e,$o),0==(512&t)||Yo||(Yo=!0,$r(97,(function(){return La(),null}))),$o=$o.nextEffect}}function La(){if(90!==Go){var e=97<Go?97:Go;return Go=90,Qr(e,Ia)}return!1}function Na(e,t){Zo.push(t,e),Yo||(Yo=!0,$r(97,(function(){return La(),null})))}function Ra(e,t){ea.push(t,e),Yo||(Yo=!0,$r(97,(function(){return La(),null})))}function Ia(){if(null===Jo)return!1;var e=Jo;if(Jo=null,0!=(48&Ao))throw Error(i(331));var t=Ao;Ao|=32;var n=ea;ea=[];for(var l=0;l<n.length;l+=2){var r=n[l],s=n[l+1],o=r.destroy;if(r.destroy=void 0,"function"==typeof o)try{o()}catch(e){if(null===s)throw Error(i(330));Ma(s,e)}}for(n=Zo,Zo=[],l=0;l<n.length;l+=2){r=n[l],s=n[l+1];try{var a=r.create;r.destroy=a()}catch(e){if(null===s)throw Error(i(330));Ma(s,e)}}for(a=e.current.firstEffect;null!==a;)e=a.nextEffect,a.nextEffect=null,8&a.flags&&(a.sibling=null,a.stateNode=null),a=e;return Ao=t,Xr(),!0}function Da(e,t,n){us(e,t=ao(0,t=so(n,t),1)),t=pa(),null!==(e=da(e,1))&&(Ut(e,1,t),fa(e,t))}function Ma(e,t){if(3===e.tag)Da(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Da(n,e,t);break}if(1===n.tag){var l=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof l.componentDidCatch&&(null===Ko||!Ko.has(l))){var r=po(n,e=so(t,e),1);if(us(n,r),r=pa(),null!==(n=da(n,1)))Ut(n,1,r),fa(n,r);else if("function"==typeof l.componentDidCatch&&(null===Ko||!Ko.has(l)))try{l.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ba(e,t,n){var l=e.pingCache;null!==l&&l.delete(t),t=pa(),e.pingedLanes|=e.suspendedLanes&n,_o===e&&(Lo&n)===n&&(4===Io||3===Io&&(62914560&Lo)===Lo&&500>Ur()-Uo?ka(e,0):qo|=n),fa(e,t)}function Fa(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Hr()?1:2:(0===sa&&(sa=Mo),0===(t=qt(62914560&~sa))&&(t=4194304))),n=pa(),null!==(e=da(e,t))&&(Ut(e,t,n),fa(e,n))}function qa(e,t,n,l){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=l,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function za(e,t,n,l){return new qa(e,t,n,l)}function Ua(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ha(e,t){var n=e.alternate;return null===n?((n=za(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Va(e,t,n,l,r,s){var o=2;if(l=e,"function"==typeof e)Ua(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case S:return Qa(n.children,r,s,t);case D:o=8,r|=16;break;case O:o=8,r|=1;break;case C:return(e=za(12,n,t,8|r)).elementType=C,e.type=C,e.lanes=s,e;case _:return(e=za(13,n,t,r)).type=_,e.elementType=_,e.lanes=s,e;case T:return(e=za(19,n,t,r)).elementType=T,e.lanes=s,e;case M:return $a(n,r,s,t);case B:return(e=za(24,n,t,r)).elementType=B,e.lanes=s,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case E:o=10;break e;case P:o=9;break e;case A:o=11;break e;case L:o=14;break e;case N:o=16,l=null;break e;case R:o=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=za(o,n,t,r)).elementType=e,t.type=l,t.lanes=s,t}function Qa(e,t,n,l){return(e=za(7,e,l,t)).lanes=n,e}function $a(e,t,n,l){return(e=za(23,e,l,t)).elementType=M,e.lanes=n,e}function Xa(e,t,n){return(e=za(6,e,null,t)).lanes=n,e}function Wa(e,t,n){return(t=za(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ka(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Ya(e,t,n){var l=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:j,key:null==l?null:""+l,children:e,containerInfo:t,implementation:n}}function Ja(e,t,n,l){var r=t.current,s=pa(),o=ua(r);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var a=n;do{switch(a.tag){case 3:a=a.stateNode.context;break t;case 1:if(vr(a.type)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break t}}a=a.return}while(null!==a);throw Error(i(171))}if(1===n.tag){var p=n.type;if(vr(p)){n=yr(n,p,a);break e}}n=a}else n=cr;return null===t.context?t.context=n:t.pendingContext=n,(t=ps(s,o)).payload={element:e},null!==(l=void 0===l?null:l)&&(t.callback=l),us(r,t),ca(r,o,s),o}function Ga(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Za(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ep(e,t){Za(e,t),(e=e.alternate)&&Za(e,t)}function tp(e,t,n){var l=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ka(e,t,null!=n&&!0===n.hydrate),t=za(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,os(t),e[Zl]=n.current,Tl(8===e.nodeType?e.parentNode:e),l)for(e=0;e<l.length;e++){var r=(t=l[e])._getVersion;r=r(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,r]:n.mutableSourceEagerHydrationData.push(t,r)}this._internalRoot=n}function np(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function lp(e,t,n,l,r){var s=n._reactRootContainer;if(s){var i=s._internalRoot;if("function"==typeof r){var o=r;r=function(){var e=Ga(i);o.call(e)}}Ja(t,i,e,r)}else{if(s=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tp(e,0,t?{hydrate:!0}:void 0)}(n,l),i=s._internalRoot,"function"==typeof r){var a=r;r=function(){var e=Ga(i);a.call(e)}}wa((function(){Ja(t,i,e,r)}))}return Ga(i)}function rp(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!np(t))throw Error(i(200));return Ya(e,t,null,n)}Qo=function(e,t,n){var l=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fr.current)Ii=!0;else{if(0==(n&l)){switch(Ii=!1,t.tag){case 3:Qi(t),$s();break;case 5:Rs(t);break;case 1:vr(t.type)&&br(t);break;case 4:Ls(t,t.stateNode.containerInfo);break;case 10:l=t.memoizedProps.value;var r=t.type._context;ur(Jr,r._currentValue),r._currentValue=l;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Yi(e,t,n):(ur(Ds,1&Ds.current),null!==(t=to(e,t,n))?t.sibling:null);ur(Ds,1&Ds.current);break;case 19:if(l=0!=(n&t.childLanes),0!=(64&e.flags)){if(l)return eo(e,t,n);t.flags|=64}if(null!==(r=t.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),ur(Ds,Ds.current),l)break;return null;case 23:case 24:return t.lanes=0,qi(e,t,n)}return to(e,t,n)}Ii=0!=(16384&e.flags)}else Ii=!1;switch(t.lanes=0,t.tag){case 2:if(l=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=hr(t,dr.current),rs(t,n),r=si(null,t,l,e,r,n),t.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vr(l)){var s=!0;br(t)}else s=!1;t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,os(t);var o=l.getDerivedStateFromProps;"function"==typeof o&&hs(t,l,o,e),r.updater=vs,t.stateNode=r,r._reactInternals=t,bs(t,l,e,n),t=Vi(null,t,l,!0,s,n)}else t.tag=0,Di(null,t,r,n),t=t.child;return t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(s=r._init)(r._payload),t.type=r,s=t.tag=function(e){if("function"==typeof e)return Ua(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===L)return 14}return 2}(r),e=Yr(r,e),s){case 0:t=Ui(null,t,r,e,n);break e;case 1:t=Hi(null,t,r,e,n);break e;case 11:t=Mi(null,t,r,e,n);break e;case 14:t=Bi(null,t,r,Yr(r.type,e),l,n);break e}throw Error(i(306,r,""))}return t;case 0:return l=t.type,r=t.pendingProps,Ui(e,t,l,r=t.elementType===l?r:Yr(l,r),n);case 1:return l=t.type,r=t.pendingProps,Hi(e,t,l,r=t.elementType===l?r:Yr(l,r),n);case 3:if(Qi(t),l=t.updateQueue,null===e||null===l)throw Error(i(282));if(l=t.pendingProps,r=null!==(r=t.memoizedState)?r.element:null,as(e,t),ds(t,l,null,n),(l=t.memoizedState.element)===r)$s(),t=to(e,t,n);else{if((s=(r=t.stateNode).hydrate)&&(Fs=Xl(t.stateNode.containerInfo.firstChild),Bs=t,s=qs=!0),s){if(null!=(e=r.mutableSourceEagerHydrationData))for(r=0;r<e.length;r+=2)(s=e[r])._workInProgressVersionPrimary=e[r+1],Xs.push(s);for(n=Cs(t,null,l,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Di(e,t,l,n),$s();t=t.child}return t;case 5:return Rs(t),null===e&&Hs(t),l=t.type,r=t.pendingProps,s=null!==e?e.memoizedProps:null,o=r.children,Hl(l,r)?o=null:null!==s&&Hl(l,s)&&(t.flags|=16),zi(e,t),Di(e,t,o,n),t.child;case 6:return null===e&&Hs(t),null;case 13:return Yi(e,t,n);case 4:return Ls(t,t.stateNode.containerInfo),l=t.pendingProps,null===e?t.child=Os(t,null,l,n):Di(e,t,l,n),t.child;case 11:return l=t.type,r=t.pendingProps,Mi(e,t,l,r=t.elementType===l?r:Yr(l,r),n);case 7:return Di(e,t,t.pendingProps,n),t.child;case 8:case 12:return Di(e,t,t.pendingProps.children,n),t.child;case 10:e:{l=t.type._context,r=t.pendingProps,o=t.memoizedProps,s=r.value;var a=t.type._context;if(ur(Jr,a._currentValue),a._currentValue=s,null!==o)if(a=o.value,0==(s=pl(a,s)?0:0|("function"==typeof l._calculateChangedBits?l._calculateChangedBits(a,s):1073741823))){if(o.children===r.children&&!fr.current){t=to(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var p=a.dependencies;if(null!==p){o=a.child;for(var u=p.firstContext;null!==u;){if(u.context===l&&0!=(u.observedBits&s)){1===a.tag&&((u=ps(-1,n&-n)).tag=2,us(a,u)),a.lanes|=n,null!==(u=a.alternate)&&(u.lanes|=n),ls(a.return,n),p.lanes|=n;break}u=u.next}}else o=10===a.tag&&a.type===t.type?null:a.child;if(null!==o)o.return=a;else for(o=a;null!==o;){if(o===t){o=null;break}if(null!==(a=o.sibling)){a.return=o.return,o=a;break}o=o.return}a=o}Di(e,t,r.children,n),t=t.child}return t;case 9:return r=t.type,l=(s=t.pendingProps).children,rs(t,n),l=l(r=ss(r,s.unstable_observedBits)),t.flags|=1,Di(e,t,l,n),t.child;case 14:return s=Yr(r=t.type,t.pendingProps),Bi(e,t,r,s=Yr(r.type,s),l,n);case 15:return Fi(e,t,t.type,t.pendingProps,l,n);case 17:return l=t.type,r=t.pendingProps,r=t.elementType===l?r:Yr(l,r),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,vr(l)?(e=!0,br(t)):e=!1,rs(t,n),ws(t,l,r),bs(t,l,r,n),Vi(null,t,l,!0,e,n);case 19:return eo(e,t,n);case 23:case 24:return qi(e,t,n)}throw Error(i(156,t.tag))},tp.prototype.render=function(e){Ja(e,this._internalRoot,null,null)},tp.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ja(null,e,null,(function(){t[Zl]=null}))},et=function(e){13===e.tag&&(ca(e,4,pa()),ep(e,4))},tt=function(e){13===e.tag&&(ca(e,67108864,pa()),ep(e,67108864))},nt=function(e){if(13===e.tag){var t=pa(),n=ua(e);ca(e,n,t),ep(e,n)}},lt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var l=n[t];if(l!==e&&l.form===e.form){var r=rr(l);if(!r)throw Error(i(90));J(l),ne(l,r)}}}break;case"textarea":pe(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Le=ma,Ne=function(e,t,n,l,r){var s=Ao;Ao|=4;try{return Qr(98,e.bind(null,t,n,l,r))}finally{0===(Ao=s)&&(Vo(),Xr())}},Re=function(){0==(49&Ao)&&(function(){if(null!==ta){var e=ta;ta=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,fa(e,Ur())}))}Xr()}(),La())},Ie=function(e,t){var n=Ao;Ao|=2;try{return e(t)}finally{0===(Ao=n)&&(Vo(),Xr())}};var sp={Events:[nr,lr,rr,_e,Te,La,{current:!1}]},ip={findFiberByHostInstance:tr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},op={bundleType:ip.bundleType,version:ip.version,rendererPackageName:ip.rendererPackageName,rendererConfig:ip.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:ip.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ap=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ap.isDisabled&&ap.supportsFiber)try{xr=ap.inject(op),jr=ap}catch(he){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sp,t.createPortal=rp,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ao;if(0!=(48&n))return e(t);Ao|=1;try{if(e)return Qr(99,e.bind(null,t))}finally{Ao=n,Xr()}},t.hydrate=function(e,t,n){if(!np(t))throw Error(i(200));return lp(null,e,t,!0,n)},t.render=function(e,t,n){if(!np(t))throw Error(i(200));return lp(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!np(e))throw Error(i(40));return!!e._reactRootContainer&&(wa((function(){lp(null,null,e,!1,(function(){e._reactRootContainer=null,e[Zl]=null}))})),!0)},t.unstable_batchedUpdates=ma,t.unstable_createPortal=function(e,t){return rp(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,l){if(!np(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return lp(e,t,n,!1,l)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,l=n?Symbol.for("react.element"):60103,r=n?Symbol.for("react.portal"):60106,s=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,o=n?Symbol.for("react.profiler"):60114,a=n?Symbol.for("react.provider"):60109,p=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,c=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,g=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,m=n?Symbol.for("react.block"):60121,w=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,b=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case l:switch(e=e.type){case u:case c:case s:case o:case i:case f:return e;default:switch(e=e&&e.$$typeof){case p:case d:case v:case h:case a:return e;default:return t}}case r:return t}}}function x(e){return k(e)===c}t.AsyncMode=u,t.ConcurrentMode=c,t.ContextConsumer=p,t.ContextProvider=a,t.Element=l,t.ForwardRef=d,t.Fragment=s,t.Lazy=v,t.Memo=h,t.Portal=r,t.Profiler=o,t.StrictMode=i,t.Suspense=f,t.isAsyncMode=function(e){return x(e)||k(e)===u},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===p},t.isContextProvider=function(e){return k(e)===a},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===l},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===s},t.isLazy=function(e){return k(e)===v},t.isMemo=function(e){return k(e)===h},t.isPortal=function(e){return k(e)===r},t.isProfiler=function(e){return k(e)===o},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===s||e===c||e===o||e===i||e===f||e===g||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===a||e.$$typeof===p||e.$$typeof===d||e.$$typeof===w||e.$$typeof===y||e.$$typeof===b||e.$$typeof===m)},t.typeOf=k},864:(e,t,n)=>{"use strict";e.exports=n(921)},359:(e,t)=>{"use strict";if("function"==typeof Symbol&&Symbol.for){var n=Symbol.for;n("react.element"),n("react.portal"),n("react.fragment"),n("react.strict_mode"),n("react.profiler"),n("react.provider"),n("react.context"),n("react.forward_ref"),n("react.suspense"),n("react.suspense_list"),n("react.memo"),n("react.lazy"),n("react.block"),n("react.server.block"),n("react.fundamental"),n("react.debug_trace_mode"),n("react.legacy_hidden")}},973:(e,t,n)=>{"use strict";n(359)},251:(e,t,n)=>{"use strict";n(418);var l=n(294),r=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var s=Symbol.for;r=s("react.element"),t.Fragment=s("react.fragment")}var i=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,o=Object.prototype.hasOwnProperty,a={key:!0,ref:!0,__self:!0,__source:!0};function p(e,t,n){var l,s={},p=null,u=null;for(l in void 0!==n&&(p=""+n),void 0!==t.key&&(p=""+t.key),void 0!==t.ref&&(u=t.ref),t)o.call(t,l)&&!a.hasOwnProperty(l)&&(s[l]=t[l]);if(e&&e.defaultProps)for(l in t=e.defaultProps)void 0===s[l]&&(s[l]=t[l]);return{$$typeof:r,type:e,key:p,ref:u,props:s,_owner:i.current}}t.jsx=p,t.jsxs=p},408:(e,t,n)=>{"use strict";var l=n(418),r=60103,s=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,o=60110,a=60112;t.Suspense=60113;var p=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var c=Symbol.for;r=c("react.element"),s=c("react.portal"),t.Fragment=c("react.fragment"),t.StrictMode=c("react.strict_mode"),t.Profiler=c("react.profiler"),i=c("react.provider"),o=c("react.context"),a=c("react.forward_ref"),t.Suspense=c("react.suspense"),p=c("react.memo"),u=c("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function v(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||g}function m(){}function w(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||g}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var y=w.prototype=new m;y.constructor=w,l(y,v.prototype),y.isPureReactComponent=!0;var b={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function j(e,t,n){var l,s={},i=null,o=null;if(null!=t)for(l in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,l)&&!x.hasOwnProperty(l)&&(s[l]=t[l]);var a=arguments.length-2;if(1===a)s.children=n;else if(1<a){for(var p=Array(a),u=0;u<a;u++)p[u]=arguments[u+2];s.children=p}if(e&&e.defaultProps)for(l in a=e.defaultProps)void 0===s[l]&&(s[l]=a[l]);return{$$typeof:r,type:e,key:i,ref:o,props:s,_owner:b.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===r}var O=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function E(e,t,n,l,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case r:case s:a=!0}}if(a)return i=i(a=e),e=""===l?"."+C(a,0):l,Array.isArray(i)?(n="",null!=e&&(n=e.replace(O,"$&/")+"/"),E(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||a&&a.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(a=0,l=""===l?".":l+":",Array.isArray(e))for(var p=0;p<e.length;p++){var u=l+C(o=e[p],p);a+=E(o,t,n,u,i)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),p=0;!(o=e.next()).done;)a+=E(o=o.value,t,n,u=l+C(o,p++),i);else if("object"===o)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return a}function P(e,t,n){if(null==e)return e;var l=[],r=0;return E(e,l,"","",(function(e){return t.call(n,e,r++)})),l}function A(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var _={current:null};function T(){var e=_.current;if(null===e)throw Error(f(321));return e}var L={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:b,IsSomeRendererActing:{current:!1},assign:l};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(f(143));return e}},t.Component=v,t.PureComponent=w,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var s=l({},e.props),i=e.key,o=e.ref,a=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,a=b.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var p=e.type.defaultProps;for(u in t)k.call(t,u)&&!x.hasOwnProperty(u)&&(s[u]=void 0===t[u]&&void 0!==p?p[u]:t[u])}var u=arguments.length-2;if(1===u)s.children=n;else if(1<u){p=Array(u);for(var c=0;c<u;c++)p[c]=arguments[c+2];s.children=p}return{$$typeof:r,type:e.type,key:i,ref:o,props:s,_owner:a}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:o,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=j,t.createFactory=function(e){var t=j.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:a,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return T().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,n){return T().useReducer(e,t,n)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},893:(e,t,n)=>{"use strict";e.exports=n(251)},53:(e,t)=>{"use strict";var n,l,r,s;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,a=o.now();t.unstable_now=function(){return o.now()-a}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var p=null,u=null,c=function(){if(null!==p)try{var e=t.unstable_now();p(!0,e),p=null}catch(e){throw setTimeout(c,0),e}};n=function(e){null!==p?setTimeout(n,0,e):(p=e,setTimeout(c,0))},l=function(e,t){u=setTimeout(e,t)},r=function(){clearTimeout(u)},t.unstable_shouldYield=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var g=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof g&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,v=null,m=-1,w=5,y=0;t.unstable_shouldYield=function(){return t.unstable_now()>=y},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):w=0<e?Math.floor(1e3/e):5};var b=new MessageChannel,k=b.port2;b.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();y=e+w;try{v(!0,e)?k.postMessage(null):(h=!1,v=null)}catch(e){throw k.postMessage(null),e}}else h=!1},n=function(e){v=e,h||(h=!0,k.postMessage(null))},l=function(e,n){m=d((function(){e(t.unstable_now())}),n)},r=function(){f(m),m=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var l=n-1>>>1,r=e[l];if(!(void 0!==r&&0<O(r,t)))break e;e[l]=t,e[n]=r,n=l}}function j(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var l=0,r=e.length;l<r;){var s=2*(l+1)-1,i=e[s],o=s+1,a=e[o];if(void 0!==i&&0>O(i,n))void 0!==a&&0>O(a,i)?(e[l]=a,e[o]=n,l=o):(e[l]=i,e[s]=n,l=s);else{if(!(void 0!==a&&0>O(a,n)))break e;e[l]=a,e[o]=n,l=o}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],E=[],P=1,A=null,_=3,T=!1,L=!1,N=!1;function R(e){for(var t=j(E);null!==t;){if(null===t.callback)S(E);else{if(!(t.startTime<=e))break;S(E),t.sortIndex=t.expirationTime,x(C,t)}t=j(E)}}function I(e){if(N=!1,R(e),!L)if(null!==j(C))L=!0,n(D);else{var t=j(E);null!==t&&l(I,t.startTime-e)}}function D(e,n){L=!1,N&&(N=!1,r()),T=!0;var s=_;try{for(R(n),A=j(C);null!==A&&(!(A.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=A.callback;if("function"==typeof i){A.callback=null,_=A.priorityLevel;var o=i(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?A.callback=o:A===j(C)&&S(C),R(n)}else S(C);A=j(C)}if(null!==A)var a=!0;else{var p=j(E);null!==p&&l(I,p.startTime-n),a=!1}return a}finally{A=null,_=s,T=!1}}var M=s;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||T||(L=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return _},t.unstable_getFirstCallbackNode=function(){return j(C)},t.unstable_next=function(e){switch(_){case 1:case 2:case 3:var t=3;break;default:t=_}var n=_;_=t;try{return e()}finally{_=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=M,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=_;_=e;try{return t()}finally{_=n}},t.unstable_scheduleCallback=function(e,s,i){var o=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?o+i:o,e){case 1:var a=-1;break;case 2:a=250;break;case 5:a=1073741823;break;case 4:a=1e4;break;default:a=5e3}return e={id:P++,callback:s,priorityLevel:e,startTime:i,expirationTime:a=i+a,sortIndex:-1},i>o?(e.sortIndex=i,x(E,e),null===j(C)&&e===j(E)&&(N?r():N=!0,l(I,i-o))):(e.sortIndex=a,x(C,e),L||T||(L=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=_;return function(){var n=_;_=t;try{return e.apply(this,arguments)}finally{_=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},154:(e,t,n)=>{var l;if("function"==typeof fetch&&(void 0!==n.g&&n.g.fetch?l=n.g.fetch:"undefined"!=typeof window&&window.fetch&&(l=window.fetch)),"undefined"==typeof window||void 0===window.document){var r=l||n(98);r.default&&(r=r.default),t.default=r,e.exports=t.default}}},l={};function r(e){var t=l[e];if(void 0!==t)return t.exports;var s=l[e]={exports:{}};return n[e].call(s.exports,s,s.exports,r),s.exports}t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(n,l){if(1&l&&(n=this(n)),8&l)return n;if("object"==typeof n&&n){if(4&l&&n.__esModule)return n;if(16&l&&"function"==typeof n.then)return n}var s=Object.create(null);r.r(s);var i={};e=e||[null,t({}),t([]),t(t)];for(var o=2&l&&n;"object"==typeof o&&!~e.indexOf(o);o=t(o))Object.getOwnPropertyNames(o).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,r.d(s,i),s},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e,t=r(893),n=r(935),l=r(294);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},s.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));var i="beforeunload";function o(e){e.preventDefault(),e.returnValue=""}function a(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function p(e){var t=e.pathname,n=void 0===t?"/":t,l=e.search,r=void 0===l?"":l,s=e.hash,i=void 0===s?"":s;return r&&"?"!==r&&(n+="?"===r.charAt(0)?r:"?"+r),i&&"#"!==i&&(n+="#"===i.charAt(0)?i:"#"+i),n}function u(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var l=e.indexOf("?");l>=0&&(t.search=e.substr(l),e=e.substr(0,l)),e&&(t.pathname=e)}return t}function c(e,t){if(!e)throw new Error(t)}const d=(0,l.createContext)(null),f=(0,l.createContext)(null),g=(0,l.createContext)({outlet:null,matches:[]});function h(e){return function(e){let t=(0,l.useContext)(g).outlet;return t?(0,l.createElement)(k.Provider,{value:e},t):t}(e.context)}function v(e){c(!1)}function m(t){let{basename:n="/",children:r=null,location:s,navigationType:i=e.Pop,navigator:o,static:a=!1}=t;y()&&c(!1);let p=N(n),g=(0,l.useMemo)((()=>({basename:p,navigator:o,static:a})),[p,o,a]);"string"==typeof s&&(s=u(s));let{pathname:h="/",search:v="",hash:m="",state:w=null,key:b="default"}=s,k=(0,l.useMemo)((()=>{let e=T(h,p);return null==e?null:{pathname:e,search:v,hash:m,state:w,key:b}}),[p,h,v,m,w,b]);return null==k?null:(0,l.createElement)(d.Provider,{value:g},(0,l.createElement)(f.Provider,{children:r,value:{location:k,navigationType:i}}))}function w(e){let{children:t,location:n}=e;return function(e,t){y()||c(!1);let{matches:n}=(0,l.useContext)(g),r=n[n.length-1],s=r?r.params:{},i=(r&&r.pathname,r?r.pathnameBase:"/");r&&r.route;let o,a=b();if(t){var p;let e="string"==typeof t?u(t):t;"/"===i||(null==(p=e.pathname)?void 0:p.startsWith(i))||c(!1),o=e}else o=a;let d=o.pathname||"/",f=function(e,t,n){void 0===n&&(n="/");let l=T(("string"==typeof t?u(t):t).pathname||"/",n);if(null==l)return null;let r=S(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(r);let s=null;for(let e=0;null==s&&e<r.length;++e)s=P(r[e],l);return s}(e,{pathname:"/"===i?d:d.slice(i.length)||"/"});return function(e,t){return void 0===t&&(t=[]),null==e?null:e.reduceRight(((n,r,s)=>(0,l.createElement)(g.Provider,{children:void 0!==r.route.element?r.route.element:(0,l.createElement)(h,null),value:{outlet:n,matches:t.concat(e.slice(0,s+1))}})),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:L([i,e.pathname]),pathnameBase:"/"===e.pathnameBase?i:L([i,e.pathnameBase])}))),n)}(j(t),n)}function y(){return null!=(0,l.useContext)(f)}function b(){return y()||c(!1),(0,l.useContext)(f).location}const k=(0,l.createContext)(null);function x(e){let{matches:t}=(0,l.useContext)(g),{pathname:n}=b(),r=JSON.stringify(t.map((e=>e.pathnameBase)));return(0,l.useMemo)((()=>_(e,JSON.parse(r),n)),[e,r,n])}function j(e){let t=[];return l.Children.forEach(e,(e=>{if(!(0,l.isValidElement)(e))return;if(e.type===l.Fragment)return void t.push.apply(t,j(e.props.children));e.type!==v&&c(!1);let n={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(n.children=j(e.props.children)),t.push(n)})),t}function S(e,t,n,l){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===l&&(l=""),e.forEach(((e,r)=>{let s={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:r,route:e};s.relativePath.startsWith("/")&&(s.relativePath.startsWith(l)||c(!1),s.relativePath=s.relativePath.slice(l.length));let i=L([l,s.relativePath]),o=n.concat(s);e.children&&e.children.length>0&&(!0===e.index&&c(!1),S(e.children,t,o,i)),(null!=e.path||e.index)&&t.push({path:i,score:E(i,e.index),routesMeta:o})})),t}const O=/^:\w+$/,C=e=>"*"===e;function E(e,t){let n=e.split("/"),l=n.length;return n.some(C)&&(l+=-2),t&&(l+=2),n.filter((e=>!C(e))).reduce(((e,t)=>e+(O.test(t)?3:""===t?1:10)),l)}function P(e,t){let{routesMeta:n}=e,l={},r="/",s=[];for(let e=0;e<n.length;++e){let i=n[e],o=e===n.length-1,a="/"===r?t:t.slice(r.length)||"/",p=A({path:i.relativePath,caseSensitive:i.caseSensitive,end:o},a);if(!p)return null;Object.assign(l,p.params);let u=i.route;s.push({params:l,pathname:L([r,p.pathname]),pathnameBase:L([r,p.pathnameBase]),route:u}),"/"!==p.pathnameBase&&(r=L([r,p.pathnameBase]))}return s}function A(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,l]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let l=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(l.push(t),"([^\\/]+)")));return e.endsWith("*")?(l.push("*"),r+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r+=n?"\\/*$":"(?:\\b|\\/|$)",[new RegExp(r,t?void 0:"i"),l]}(e.path,e.caseSensitive,e.end),r=t.match(n);if(!r)return null;let s=r[0],i=s.replace(/(.)\/+$/,"$1"),o=r.slice(1);return{params:l.reduce(((e,t,n)=>{if("*"===t){let e=o[n]||"";i=s.slice(0,s.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(o[n]||""),e}),{}),pathname:s,pathnameBase:i,pattern:e}}function _(e,t,n){let l,r="string"==typeof e?u(e):e,s=""===e||""===r.pathname?"/":r.pathname;if(null==s)l=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;r.pathname=t.join("/")}l=e>=0?t[e]:"/"}let i=function(e,t){void 0===t&&(t="/");let{pathname:n,search:l="",hash:r=""}="string"==typeof e?u(e):e,s=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:s,search:R(l),hash:I(r)}}(r,l);return s&&"/"!==s&&s.endsWith("/")&&!i.pathname.endsWith("/")&&(i.pathname+="/"),i}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const L=e=>e.join("/").replace(/\/\/+/g,"/"),N=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),R=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",I=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function D(){return D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},D.apply(this,arguments)}const M=["onClick","reloadDocument","replace","state","target","to"],B=(0,l.forwardRef)((function(e,t){let{onClick:n,reloadDocument:r,replace:s=!1,state:i,target:o,to:a}=e,f=function(e,t){if(null==e)return{};var n,l,r={},s=Object.keys(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,M),h=function(e){y()||c(!1);let{basename:t,navigator:n}=(0,l.useContext)(d),{hash:r,pathname:s,search:i}=x(e),o=s;if("/"!==t){let n=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?u(e).pathname:e.pathname}(e),l=null!=n&&n.endsWith("/");o="/"===s?t+(l?"/":""):L([t,s])}return n.createHref({pathname:o,search:i,hash:r})}(a),v=function(e,t){let{target:n,replace:r,state:s}=void 0===t?{}:t,i=function(){y()||c(!1);let{basename:e,navigator:t}=(0,l.useContext)(d),{matches:n}=(0,l.useContext)(g),{pathname:r}=b(),s=JSON.stringify(n.map((e=>e.pathnameBase))),i=(0,l.useRef)(!1);(0,l.useEffect)((()=>{i.current=!0}));let o=(0,l.useCallback)((function(n,l){if(void 0===l&&(l={}),!i.current)return;if("number"==typeof n)return void t.go(n);let o=_(n,JSON.parse(s),r);"/"!==e&&(o.pathname=L([e,o.pathname])),(l.replace?t.replace:t.push)(o,l.state)}),[e,t,s,r]);return o}(),o=b(),a=x(e);return(0,l.useCallback)((t=>{if(!(0!==t.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(t))){t.preventDefault();let n=!!r||p(o)===p(a);i(e,{replace:n,state:s})}}),[o,i,a,r,s,n,e])}(a,{replace:s,state:i,target:o});return(0,l.createElement)("a",D({},f,{href:h,onClick:function(e){n&&n(e),e.defaultPrevented||r||v(e)},ref:t,target:o}))}));var F;!function(e){e.LIGHT="app_light_theme",e.DARK="app_dark_theme"}(F||(F={}));var q=(0,l.createContext)({}),z="theme",U=function(){return U=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},U.apply(this,arguments)},H=localStorage.getItem(z)||F.LIGHT;var V=l.createContext(null),Q=function(e){e()},$=function(){return Q},X={notify:function(){},get:function(){return[]}};var W="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?l.useLayoutEffect:l.useEffect;const K=function(e){var t=e.store,n=e.context,r=e.children,s=(0,l.useMemo)((function(){var e=function(e,t){var n,l=X;function r(){i.onStateChange&&i.onStateChange()}function s(){n||(n=t?t.addNestedSub(r):e.subscribe(r),l=function(){var e=$(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var l=!0,r=n={callback:e,next:null,prev:n};return r.prev?r.prev.next=r:t=r,function(){l&&null!==t&&(l=!1,r.next?r.next.prev=r.prev:n=r.prev,r.prev?r.prev.next=r.next:t=r.next)}}}}())}var i={addNestedSub:function(e){return s(),l.subscribe(e)},notifyNestedSubs:function(){l.notify()},handleChangeWrapper:r,isSubscribed:function(){return Boolean(n)},trySubscribe:s,tryUnsubscribe:function(){n&&(n(),n=void 0,l.clear(),l=X)},getListeners:function(){return l}};return i}(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),i=(0,l.useMemo)((function(){return t.getState()}),[t]);W((function(){var e=s.subscription;return e.trySubscribe(),i!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[s,i]);var o=n||V;return l.createElement(o.Provider,{value:s},r)};function Y(){return(0,l.useContext)(V)}function J(e){void 0===e&&(e=V);var t=e===V?Y:function(){return(0,l.useContext)(e)};return function(){return t().store}}r(679),r(973);var G=J();function Z(e){void 0===e&&(e=V);var t=e===V?G:J(e);return function(){return t().dispatch}}var ee,te=Z();function ne(e){for(var t=arguments.length,n=Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function le(e){return!!e&&!!e[He]}function re(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Ve}(e)||Array.isArray(e)||!!e[Ue]||!!e.constructor[Ue]||ue(e)||ce(e))}function se(e,t,n){void 0===n&&(n=!1),0===ie(e)?(n?Object.keys:Qe)(e).forEach((function(l){n&&"symbol"==typeof l||t(l,e[l],e)})):e.forEach((function(n,l){return t(l,n,e)}))}function ie(e){var t=e[He];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:ue(e)?2:ce(e)?3:0}function oe(e,t){return 2===ie(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function ae(e,t,n){var l=ie(e);2===l?e.set(t,n):3===l?(e.delete(t),e.add(n)):e[t]=n}function pe(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function ue(e){return Be&&e instanceof Map}function ce(e){return Fe&&e instanceof Set}function de(e){return e.o||e.t}function fe(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=$e(e);delete t[He];for(var n=Qe(t),l=0;l<n.length;l++){var r=n[l],s=t[r];!1===s.writable&&(s.writable=!0,s.configurable=!0),(s.get||s.set)&&(t[r]={configurable:!0,writable:!0,enumerable:s.enumerable,value:e[r]})}return Object.create(Object.getPrototypeOf(e),t)}function ge(e,t){return void 0===t&&(t=!1),ve(e)||le(e)||!re(e)||(ie(e)>1&&(e.set=e.add=e.clear=e.delete=he),Object.freeze(e),t&&se(e,(function(e,t){return ge(t,!0)}),!0)),e}function he(){ne(2)}function ve(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function me(e){var t=Xe[e];return t||ne(18,e),t}function we(){return De}function ye(e,t){t&&(me("Patches"),e.u=[],e.s=[],e.v=t)}function be(e){ke(e),e.p.forEach(je),e.p=null}function ke(e){e===De&&(De=e.l)}function xe(e){return De={p:[],l:De,h:e,m:!0,_:0}}function je(e){var t=e[He];0===t.i||1===t.i?t.j():t.O=!0}function Se(e,t){t._=t.p.length;var n=t.p[0],l=void 0!==e&&e!==n;return t.h.g||me("ES5").S(t,e,l),l?(n[He].P&&(be(t),ne(4)),re(e)&&(e=Oe(t,e),t.l||Ee(t,e)),t.u&&me("Patches").M(n[He].t,e,t.u,t.s)):e=Oe(t,n,[]),be(t),t.u&&t.v(t.u,t.s),e!==ze?e:void 0}function Oe(e,t,n){if(ve(t))return t;var l=t[He];if(!l)return se(t,(function(r,s){return Ce(e,l,t,r,s,n)}),!0),t;if(l.A!==e)return t;if(!l.P)return Ee(e,l.t,!0),l.t;if(!l.I){l.I=!0,l.A._--;var r=4===l.i||5===l.i?l.o=fe(l.k):l.o;se(3===l.i?new Set(r):r,(function(t,s){return Ce(e,l,r,t,s,n)})),Ee(e,r,!1),n&&e.u&&me("Patches").R(l,n,e.u,e.s)}return l.o}function Ce(e,t,n,l,r,s){if(le(r)){var i=Oe(e,r,s&&t&&3!==t.i&&!oe(t.D,l)?s.concat(l):void 0);if(ae(n,l,i),!le(i))return;e.m=!1}if(re(r)&&!ve(r)){if(!e.h.F&&e._<1)return;Oe(e,r),t&&t.A.l||Ee(e,r)}}function Ee(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&ge(t,n)}function Pe(e,t){var n=e[He];return(n?de(n):e)[t]}function Ae(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var l=Object.getOwnPropertyDescriptor(n,t);if(l)return l;n=Object.getPrototypeOf(n)}}function _e(e){e.P||(e.P=!0,e.l&&_e(e.l))}function Te(e){e.o||(e.o=fe(e.t))}function Le(e,t,n){var l=ue(t)?me("MapSet").N(t,n):ce(t)?me("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),l={i:n?1:0,A:t?t.A:we(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},r=l,s=We;n&&(r=[l],s=Ke);var i=Proxy.revocable(r,s),o=i.revoke,a=i.proxy;return l.k=a,l.j=o,a}(t,n):me("ES5").J(t,n);return(n?n.A:we()).p.push(l),l}function Ne(e){return le(e)||ne(22,e),function e(t){if(!re(t))return t;var n,l=t[He],r=ie(t);if(l){if(!l.P&&(l.i<4||!me("ES5").K(l)))return l.t;l.I=!0,n=Re(t,r),l.I=!1}else n=Re(t,r);return se(n,(function(t,r){l&&function(e,t){return 2===ie(e)?e.get(t):e[t]}(l.t,t)===r||ae(n,t,e(r))})),3===r?new Set(n):n}(e)}function Re(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return fe(e)}ee=n.unstable_batchedUpdates,Q=ee;var Ie,De,Me="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Be="undefined"!=typeof Map,Fe="undefined"!=typeof Set,qe="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,ze=Me?Symbol.for("immer-nothing"):((Ie={})["immer-nothing"]=!0,Ie),Ue=Me?Symbol.for("immer-draftable"):"__$immer_draftable",He=Me?Symbol.for("immer-state"):"__$immer_state",Ve=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),Qe="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,$e=Object.getOwnPropertyDescriptors||function(e){var t={};return Qe(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},Xe={},We={get:function(e,t){if(t===He)return e;var n=de(e);if(!oe(n,t))return function(e,t,n){var l,r=Ae(t,n);return r?"value"in r?r.value:null===(l=r.get)||void 0===l?void 0:l.call(e.k):void 0}(e,n,t);var l=n[t];return e.I||!re(l)?l:l===Pe(e.t,t)?(Te(e),e.o[t]=Le(e.A.h,l,e)):l},has:function(e,t){return t in de(e)},ownKeys:function(e){return Reflect.ownKeys(de(e))},set:function(e,t,n){var l=Ae(de(e),t);if(null==l?void 0:l.set)return l.set.call(e.k,n),!0;if(!e.P){var r=Pe(de(e),t),s=null==r?void 0:r[He];if(s&&s.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(pe(n,r)&&(void 0!==n||oe(e.t,t)))return!0;Te(e),_e(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==Pe(e.t,t)||t in e.t?(e.D[t]=!1,Te(e),_e(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=de(e),l=Reflect.getOwnPropertyDescriptor(n,t);return l?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:l.enumerable,value:n[t]}:l},defineProperty:function(){ne(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){ne(12)}},Ke={};se(We,(function(e,t){Ke[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Ke.deleteProperty=function(e,t){return Ke.set.call(this,e,t,void 0)},Ke.set=function(e,t,n){return We.set.call(this,e[0],t,n,e[0])};var Ye=function(){function e(e){var t=this;this.g=qe,this.F=!0,this.produce=function(e,n,l){if("function"==typeof e&&"function"!=typeof n){var r=n;n=e;var s=t;return function(e){var t=this;void 0===e&&(e=r);for(var l=arguments.length,i=Array(l>1?l-1:0),o=1;o<l;o++)i[o-1]=arguments[o];return s.produce(e,(function(e){var l;return(l=n).call.apply(l,[t,e].concat(i))}))}}var i;if("function"!=typeof n&&ne(6),void 0!==l&&"function"!=typeof l&&ne(7),re(e)){var o=xe(t),a=Le(t,e,void 0),p=!0;try{i=n(a),p=!1}finally{p?be(o):ke(o)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return ye(o,l),Se(e,o)}),(function(e){throw be(o),e})):(ye(o,l),Se(i,o))}if(!e||"object"!=typeof e){if(void 0===(i=n(e))&&(i=e),i===ze&&(i=void 0),t.F&&ge(i,!0),l){var u=[],c=[];me("Patches").M(e,i,u,c),l(u,c)}return i}ne(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var l=arguments.length,r=Array(l>1?l-1:0),s=1;s<l;s++)r[s-1]=arguments[s];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(r))}))};var l,r,s=t.produce(e,n,(function(e,t){l=e,r=t}));return"undefined"!=typeof Promise&&s instanceof Promise?s.then((function(e){return[e,l,r]})):[s,l,r]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){re(e)||ne(8),le(e)&&(e=Ne(e));var t=xe(this),n=Le(this,e,void 0);return n[He].C=!0,ke(t),n},t.finishDraft=function(e,t){var n=(e&&e[He]).A;return ye(n,t),Se(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!qe&&ne(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var l=t[n];if(0===l.path.length&&"replace"===l.op){e=l.value;break}}n>-1&&(t=t.slice(n+1));var r=me("Patches").$;return le(e)?r(e,t):this.produce(e,(function(e){return r(e,t)}))},e}(),Je=new Ye,Ge=Je.produce;Je.produceWithPatches.bind(Je),Je.setAutoFreeze.bind(Je),Je.setUseProxies.bind(Je),Je.applyPatches.bind(Je),Je.createDraft.bind(Je),Je.finishDraft.bind(Je);const Ze=Ge;function et(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function tt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function nt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?tt(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function lt(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var rt="function"==typeof Symbol&&Symbol.observable||"@@observable",st=function(){return Math.random().toString(36).substring(7).split("").join(".")},it={INIT:"@@redux/INIT"+st(),REPLACE:"@@redux/REPLACE"+st(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+st()}};function ot(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function at(e,t,n){var l;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(lt(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(lt(1));return n(at)(e,t)}if("function"!=typeof e)throw new Error(lt(2));var r=e,s=t,i=[],o=i,a=!1;function p(){o===i&&(o=i.slice())}function u(){if(a)throw new Error(lt(3));return s}function c(e){if("function"!=typeof e)throw new Error(lt(4));if(a)throw new Error(lt(5));var t=!0;return p(),o.push(e),function(){if(t){if(a)throw new Error(lt(6));t=!1,p();var n=o.indexOf(e);o.splice(n,1),i=null}}}function d(e){if(!ot(e))throw new Error(lt(7));if(void 0===e.type)throw new Error(lt(8));if(a)throw new Error(lt(9));try{a=!0,s=r(s,e)}finally{a=!1}for(var t=i=o,n=0;n<t.length;n++)(0,t[n])();return e}function f(e){if("function"!=typeof e)throw new Error(lt(10));r=e,d({type:it.REPLACE})}function g(){var e,t=c;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(lt(11));function n(){e.next&&e.next(u())}return n(),{unsubscribe:t(n)}}})[rt]=function(){return this},e}return d({type:it.INIT}),(l={dispatch:d,subscribe:c,getState:u,replaceReducer:f})[rt]=g,l}function pt(e){for(var t=Object.keys(e),n={},l=0;l<t.length;l++){var r=t[l];"function"==typeof e[r]&&(n[r]=e[r])}var s,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:it.INIT}))throw new Error(lt(12));if(void 0===n(void 0,{type:it.PROBE_UNKNOWN_ACTION()}))throw new Error(lt(13))}))}(n)}catch(e){s=e}return function(e,t){if(void 0===e&&(e={}),s)throw s;for(var l=!1,r={},o=0;o<i.length;o++){var a=i[o],p=n[a],u=e[a],c=p(u,t);if(void 0===c)throw t&&t.type,new Error(lt(14));r[a]=c,l=l||c!==u}return(l=l||i.length!==Object.keys(e).length)?r:e}}function ut(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function ct(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),l=function(){throw new Error(lt(15))},r={getState:n.getState,dispatch:function(){return l.apply(void 0,arguments)}},s=t.map((function(e){return e(r)}));return l=ut.apply(void 0,s)(n.dispatch),nt(nt({},n),{},{dispatch:l})}}}function dt(e){return function(t){var n=t.dispatch,l=t.getState;return function(t){return function(r){return"function"==typeof r?r(n,l,e):t(r)}}}}var ft=dt();ft.withExtraArgument=dt;const gt=ft;var ht,vt=(ht=function(e,t){return ht=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},ht(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}ht(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),mt=function(e,t){for(var n=0,l=t.length,r=e.length;n<l;n++,r++)e[r]=t[n];return e},wt=Object.defineProperty,yt=(Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols),bt=Object.prototype.hasOwnProperty,kt=Object.prototype.propertyIsEnumerable,xt=function(e,t,n){return t in e?wt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},jt=function(e,t){for(var n in t||(t={}))bt.call(t,n)&&xt(e,n,t[n]);if(yt)for(var l=0,r=yt(t);l<r.length;l++)n=r[l],kt.call(t,n)&&xt(e,n,t[n]);return e},St="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?ut:ut.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Ot=function(e){function t(){for(var n=[],l=0;l<arguments.length;l++)n[l]=arguments[l];var r=e.apply(this,n)||this;return Object.setPrototypeOf(r,t.prototype),r}return vt(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,mt([void 0],e[0].concat(this)))):new(t.bind.apply(t,mt([void 0],e.concat(this))))},t}(Array);function Ct(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,l=(e.immutableCheck,e.serializableCheck,new Ot);return n&&(function(e){return"boolean"==typeof e}(n)?l.push(gt):l.push(gt.withExtraArgument(n.extraArgument))),l}(e)},l=e||{},r=l.reducer,s=void 0===r?void 0:r,i=l.middleware,o=void 0===i?n():i,a=l.devTools,p=void 0===a||a,u=l.preloadedState,c=void 0===u?void 0:u,d=l.enhancers,f=void 0===d?void 0:d;if("function"==typeof s)t=s;else{if(!function(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}(s))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=pt(s)}var g=o;"function"==typeof g&&(g=g(n));var h=ct.apply(void 0,g),v=ut;p&&(v=St(jt({trace:!1},"object"==typeof p&&p)));var m=[h];return Array.isArray(f)?m=mt([h],f):"function"==typeof f&&(m=f(m)),at(t,c,v.apply(void 0,m))}function Et(e,t){function n(){for(var n=[],l=0;l<arguments.length;l++)n[l]=arguments[l];if(t){var r=t.apply(void 0,n);if(!r)throw new Error("prepareAction did not return an object");return jt(jt({type:e,payload:r.payload},"meta"in r&&{meta:r.meta}),"error"in r&&{error:r.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Pt(e){var t,n={},l=[],r={addCase:function(e,t){var l="string"==typeof e?e:e.type;if(l in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[l]=t,r},addMatcher:function(e,t){return l.push({matcher:e,reducer:t}),r},addDefaultCase:function(e){return t=e,r}};return e(r),[n,l,t]}function At(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,l="function"==typeof e.initialState?e.initialState:Ze(e.initialState,(function(){})),r=e.reducers||{},s=Object.keys(r),i={},o={},a={};function p(){var t="function"==typeof e.extraReducers?Pt(e.extraReducers):[e.extraReducers],n=t[0],r=void 0===n?{}:n,s=t[1],i=void 0===s?[]:s,a=t[2],p=void 0===a?void 0:a,u=jt(jt({},r),o);return function(e,t,n,l){void 0===n&&(n=[]);var r,s="function"==typeof t?Pt(t):[t,n,l],i=s[0],o=s[1],a=s[2];if(function(e){return"function"==typeof e}(e))r=function(){return Ze(e(),(function(){}))};else{var p=Ze(e,(function(){}));r=function(){return p}}function u(e,t){void 0===e&&(e=r());var n=mt([i[t.type]],o.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[a]),n.reduce((function(e,n){if(n){var l;if(le(e))return void 0===(l=n(e,t))?e:l;if(re(e))return Ze(e,(function(e){return n(e,t)}));if(void 0===(l=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return l}return e}),e)}return u.getInitialState=r,u}(l,u,i,p)}return s.forEach((function(e){var n,l,s=r[e],p=function(e,t){return e+"/"+t}(t,e);"reducer"in s?(n=s.reducer,l=s.prepare):n=s,i[e]=n,o[p]=n,a[e]=l?Et(p,l):Et(p)})),{name:t,reducer:function(e,t){return n||(n=p()),n(e,t)},actions:a,caseReducers:i,getInitialState:function(){return n||(n=p()),n.getInitialState()}}}Object.assign;var _t="listenerMiddleware";Et(_t+"/add"),Et(_t+"/removeAll"),Et(_t+"/remove"),function(){function e(e,t){var n=r[e];return n?n.enumerable=t:r[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[He];return We.get(t,e)},set:function(t){var n=this[He];We.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var r=e[t][He];if(!r.P)switch(r.i){case 5:l(r)&&_e(r);break;case 4:n(r)&&_e(r)}}}function n(e){for(var t=e.t,n=e.k,l=Qe(n),r=l.length-1;r>=0;r--){var s=l[r];if(s!==He){var i=t[s];if(void 0===i&&!oe(t,s))return!0;var o=n[s],a=o&&o[He];if(a?a.t!==i:!pe(o,i))return!0}}var p=!!t[He];return l.length!==Qe(t).length+(p?0:1)}function l(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var l=0;l<t.length;l++)if(!t.hasOwnProperty(l))return!0;return!1}var r={};!function(e,t){Xe[e]||(Xe[e]=t)}("ES5",{J:function(t,n){var l=Array.isArray(t),r=function(t,n){if(t){for(var l=Array(n.length),r=0;r<n.length;r++)Object.defineProperty(l,""+r,e(r,!0));return l}var s=$e(n);delete s[He];for(var i=Qe(s),o=0;o<i.length;o++){var a=i[o];s[a]=e(a,t||!!s[a].enumerable)}return Object.create(Object.getPrototypeOf(n),s)}(l,t),s={i:l?5:4,A:n?n.A:we(),P:!1,I:!1,D:{},l:n,t,k:r,o:null,O:!1,C:!1};return Object.defineProperty(r,He,{value:s,writable:!0}),r},S:function(e,n,r){r?le(n)&&n[He].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[He];if(n){var r=n.t,s=n.k,i=n.D,o=n.i;if(4===o)se(s,(function(t){t!==He&&(void 0!==r[t]||oe(r,t)?i[t]||e(s[t]):(i[t]=!0,_e(n)))})),se(r,(function(e){void 0!==s[e]||oe(s,e)||(i[e]=!1,_e(n))}));else if(5===o){if(l(n)&&(_e(n),i.length=!0),s.length<r.length)for(var a=s.length;a<r.length;a++)i[a]=!1;else for(var p=r.length;p<s.length;p++)i[p]=!0;for(var u=Math.min(s.length,r.length),c=0;c<u;c++)s.hasOwnProperty(c)||(i[c]=!0),void 0===i[c]&&e(s[c])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):l(e)}})}();var Tt=At({name:"counter",initialState:{value:0},reducers:{increment:function(e){e.value+=1},decrement:function(e){e.value-=1}}}),Lt=(Tt.actions,Tt.reducer),Nt=function(e,t,n){if(n||2===arguments.length)for(var l,r=0,s=t.length;r<s;r++)!l&&r in t||(l||(l=Array.prototype.slice.call(t,0,r)),l[r]=t[r]);return e.concat(l||Array.prototype.slice.call(t))};function Rt(e,t,n){return void 0===t&&(t={}),void 0===n&&(n=[]),Nt(Nt([e],n.filter(Boolean),!0),Object.entries(t).filter((function(e){e[0];var t=e[1];return Boolean(t)})).map((function(e){return e[0]})),!0).join(" ")}const It={Button:"a4nOaSMD",clear:"FAEtIpnJ",clearInverted:"DYECq6t7",outline:"pxBl_FAS",background:"nXdyjtYb",backgroundInverted:"EXVU3xfn",square:"pKS1Awqk",size_m:"xvXQXBtA",size_l:"rsm7T6wj",size_xl:"WJ8HetTm",disabled:"AeTCGE3z"};var Dt,Mt,Bt=function(){return Bt=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Bt.apply(this,arguments)};!function(e){e.CLEAR="clear",e.CLEAR_INVERTED="clearInverted",e.OUTLINE="outline",e.BACKGROUND="background",e.BACKGROUND_INVERTED="backgroundInverted"}(Dt||(Dt={})),function(e){e.M="size_m",e.L="size_l",e.XL="size_xl"}(Mt||(Mt={}));var Ft=(0,l.memo)((function(e){var n,l=e.className,r=e.children,s=e.theme,i=e.square,o=e.disabled,a=e.size,p=void 0===a?Mt.M:a,u=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&t.indexOf(l)<0&&(n[l]=e[l]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(l=Object.getOwnPropertySymbols(e);r<l.length;r++)t.indexOf(l[r])<0&&Object.prototype.propertyIsEnumerable.call(e,l[r])&&(n[l[r]]=e[l[r]])}return n}(e,["className","children","theme","square","disabled","size"]),c=((n={})[It[s]]=!0,n[It.square]=i,n[It[p]]=!0,n[It.disabled]=o,n);return(0,t.jsx)("button",Bt({type:"button",className:Rt(It.Button,c,[l]),disabled:o},u,{children:r}),void 0)})),qt="NOT_FOUND",zt=function(e,t){return e===t};function Ut(e,t){var n,l,r="object"==typeof t?t:{equalityCheck:t},s=r.equalityCheck,i=void 0===s?zt:s,o=r.maxSize,a=void 0===o?1:o,p=r.resultEqualityCheck,u=function(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var l=t.length,r=0;r<l;r++)if(!e(t[r],n[r]))return!1;return!0}}(i),c=1===a?(n=u,{get:function(e){return l&&n(l.key,e)?l.value:qt},put:function(e,t){l={key:e,value:t}},getEntries:function(){return l?[l]:[]},clear:function(){l=void 0}}):function(e,t){var n=[];function l(e){var l=n.findIndex((function(n){return t(e,n.key)}));if(l>-1){var r=n[l];return l>0&&(n.splice(l,1),n.unshift(r)),r.value}return qt}return{get:l,put:function(t,r){l(t)===qt&&(n.unshift({key:t,value:r}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(a,u);function d(){var t=c.get(arguments);if(t===qt){if(t=e.apply(null,arguments),p){var n=c.getEntries(),l=n.find((function(e){return p(e.value,t)}));l&&(t=l.value)}c.put(arguments,t)}return t}return d.clearCache=function(){return c.clear()},d}function Ht(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return"function"==typeof e?"function "+(e.name||"unnamed")+"()":typeof e})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+n+"]")}return t}function Vt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];var r=function(){for(var t=arguments.length,l=new Array(t),r=0;r<t;r++)l[r]=arguments[r];var s,i=0,o={memoizeOptions:void 0},a=l.pop();if("object"==typeof a&&(o=a,a=l.pop()),"function"!=typeof a)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof a+"]");var p=o,u=p.memoizeOptions,c=void 0===u?n:u,d=Array.isArray(c)?c:[c],f=Ht(l),g=e.apply(void 0,[function(){return i++,a.apply(null,arguments)}].concat(d)),h=e((function(){for(var e=[],t=f.length,n=0;n<t;n++)e.push(f[n].apply(null,arguments));return s=g.apply(null,e)}));return Object.assign(h,{resultFunc:a,memoizedResultFunc:g,dependencies:f,lastResult:function(){return s},recomputations:function(){return i},resetRecomputations:function(){return i=0}}),h};return r}var Qt=(Vt(Ut)((function(e){return e.counter}),(function(e){return e.value})),"user"),$t=At({name:"user",initialState:{},reducers:{setAuthData:function(e,t){e.authData=t.payload},initAuthData:function(e){var t=localStorage.getItem(Qt);t&&(e.authData=JSON.parse(t))},logout:function(e){e.authData=void 0,localStorage.removeItem(Qt)}}}),Xt=$t.actions,Wt=$t.reducer,Kt=function(){return Kt=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Kt.apply(this,arguments)},Yt=function(){return Yt=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Yt.apply(this,arguments)};var Jt=function(){return Jt=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Jt.apply(this,arguments)},Gt=(0,l.createContext)({}),Zt="opp_state",en=function(){return en=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},en.apply(this,arguments)},tn=JSON.parse(localStorage.getItem(Zt))||{font:{size:1,range:{min:.1,max:4}},opened:{isThemesOpened:!0,isQuestionsOpened:!1}};const nn=function(e){var n=e.children,r=(0,l.useState)(tn),s=r[0],i=r[1],o=(0,l.useMemo)((function(){return{opp:s,setOpp:i}}),[s]);return(0,l.useEffect)((function(){localStorage.setItem(Zt,JSON.stringify(s))}),[s]),(0,t.jsx)(Gt.Provider,en({value:o},{children:n}),void 0)};var ln=function(){return ln=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},ln.apply(this,arguments)},rn=function(e){var n=e.className;return(0,t.jsxs)("div",ln({className:Rt("lds-ellipsis",{},[n])},{children:[(0,t.jsx)("div",{},void 0),(0,t.jsx)("div",{},void 0),(0,t.jsx)("div",{},void 0),(0,t.jsx)("div",{},void 0)]}),void 0)};var sn=function(){return sn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},sn.apply(this,arguments)},on=function(e){var n=e.className;return(0,t.jsx)("div",sn({className:Rt("nH4iNW6o",{},[n])},{children:(0,t.jsx)(rn,{},void 0)}),void 0)},an=function(){return an=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},an.apply(this,arguments)};const pn=(0,l.memo)((function(e){var n=e.isActive,l=e.onClick,r=e.changeable,s=e.text,i=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&t.indexOf(l)<0&&(n[l]=e[l]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(l=Object.getOwnPropertySymbols(e);r<l.length;r++)t.indexOf(l[r])<0&&Object.prototype.propertyIsEnumerable.call(e,l[r])&&(n[l[r]]=e[l[r]])}return n}(e,["isActive","onClick","changeable","text"]);return(0,t.jsxs)("button",an({},i,{type:"button",onClick:function(){return l(!n)}},{children:[n?r[0]:r[1]," ",s]}),void 0)}));var un=function(){return un=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},un.apply(this,arguments)};const cn=function(e){var n=e.onButtonThemesClick,r=e.onButtonQuestionsClick,s=(0,l.useContext)(Gt).opp.opened,i=s.isThemesOpened,o=s.isQuestionsOpened;return(0,t.jsxs)("div",un({className:"u3leK6SG"},{children:[(0,t.jsx)(pn,{isActive:i,onClick:n,changeable:["Скрыть","Раскрыть"],text:"все темы",className:"nncwOoaZ"},void 0),(0,t.jsx)(pn,{isActive:o,onClick:r,changeable:["Скрыть","Раскрыть"],text:"все вопросы",className:"ah91jMki",disabled:!i},void 0)]}),void 0)},dn={HelpButton:"f4up8tzn",theme:"_HlyBTJN",question:"EPPPMenm"};var fn=function(){return fn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},fn.apply(this,arguments)};const gn=function(e){var n=e.scrollRef,r=e.isOpenItems,s=e.items,i=e.className,o=e.text,a=(0,l.useState)(null),p=a[0],u=a[1],c=(0,l.useCallback)((function(){var e=function(e){return e.getBoundingClientRect().top+e.clientHeight},t=s.filter((function(t){return t.title&&r[t.id]&&e(t.title)<0&&e(t.fold)>0}));u(t.length?t[t.length-1]:null)}),[s,r]);return(0,l.useEffect)((function(){n.current.addEventListener("scroll",c)}),[c,n]),(0,l.useEffect)((function(){c()}),[r,c]),(0,t.jsx)(t.Fragment,{children:p&&(0,t.jsxs)("button",fn({type:"button",className:[dn.HelpButton,dn[i]].join(" "),onClick:p.callback},{children:["Скрыть"," ",o," ","№",p.id+1]}),void 0)},void 0)};function hn(e,t){if(null==e)return{};var n,l,r={},s=Object.keys(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}function vn(e,t){return vn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},vn(e,t)}function mn(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,vn(e,t)}function wn(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}const yn=l.createContext(null);var bn=function(e){return e.scrollTop},kn="unmounted",xn="exited",jn="entering",Sn="entered",On="exiting",Cn=function(e){function t(t,n){var l;l=e.call(this,t,n)||this;var r,s=n&&!n.isMounting?t.enter:t.appear;return l.appearStatus=null,t.in?s?(r=xn,l.appearStatus=jn):r=Sn:r=t.unmountOnExit||t.mountOnEnter?kn:xn,l.state={status:r},l.nextCallback=null,l}mn(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===kn?{status:xn}:null};var r=t.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==jn&&n!==Sn&&(t=jn):n!==jn&&n!==Sn||(t=On)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,l=this.props.timeout;return e=t=n=l,null!=l&&"number"!=typeof l&&(e=l.exit,t=l.enter,n=void 0!==l.appear?l.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===jn){if(this.props.unmountOnExit||this.props.mountOnEnter){var l=this.props.nodeRef?this.props.nodeRef.current:n.findDOMNode(this);l&&bn(l)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===xn&&this.setState({status:kn})},r.performEnter=function(e){var t=this,l=this.props.enter,r=this.context?this.context.isMounting:e,s=this.props.nodeRef?[r]:[n.findDOMNode(this),r],i=s[0],o=s[1],a=this.getTimeouts(),p=r?a.appear:a.enter;e||l?(this.props.onEnter(i,o),this.safeSetState({status:jn},(function(){t.props.onEntering(i,o),t.onTransitionEnd(p,(function(){t.safeSetState({status:Sn},(function(){t.props.onEntered(i,o)}))}))}))):this.safeSetState({status:Sn},(function(){t.props.onEntered(i)}))},r.performExit=function(){var e=this,t=this.props.exit,l=this.getTimeouts(),r=this.props.nodeRef?void 0:n.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:On},(function(){e.props.onExiting(r),e.onTransitionEnd(l.exit,(function(){e.safeSetState({status:xn},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:xn},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(l){n&&(n=!1,t.nextCallback=null,e(l))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var l=this.props.nodeRef?this.props.nodeRef.current:n.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(l&&!r){if(this.props.addEndListener){var s=this.props.nodeRef?[this.nextCallback]:[l,this.nextCallback],i=s[0],o=s[1];this.props.addEndListener(i,o)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var e=this.state.status;if(e===kn)return null;var t=this.props,n=t.children,r=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,hn(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return l.createElement(yn.Provider,{value:null},"function"==typeof n?n(e,r):l.cloneElement(l.Children.only(n),r))},t}(l.Component);function En(){}Cn.contextType=yn,Cn.propTypes={},Cn.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:En,onEntering:En,onEntered:En,onExit:En,onExiting:En,onExited:En},Cn.UNMOUNTED=kn,Cn.EXITED=xn,Cn.ENTERING=jn,Cn.ENTERED=Sn,Cn.EXITING=On;const Pn=Cn;var An=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return l=t,void((n=e).classList?n.classList.remove(l):"string"==typeof n.className?n.className=wn(n.className,l):n.setAttribute("class",wn(n.className&&n.className.baseVal||"",l)));var n,l}))},_n=function(e){function t(){for(var t,n=arguments.length,l=new Array(n),r=0;r<n;r++)l[r]=arguments[r];return(t=e.call.apply(e,[this].concat(l))||this).appliedClasses={appear:{},enter:{},exit:{}},t.onEnter=function(e,n){var l=t.resolveArguments(e,n),r=l[0],s=l[1];t.removeClasses(r,"exit"),t.addClass(r,s?"appear":"enter","base"),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var l=t.resolveArguments(e,n),r=l[0],s=l[1]?"appear":"enter";t.addClass(r,s,"active"),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var l=t.resolveArguments(e,n),r=l[0],s=l[1]?"appear":"enter";t.removeClasses(r,s),t.addClass(r,s,"done"),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){var n=t.resolveArguments(e)[0];t.removeClasses(n,"appear"),t.removeClasses(n,"enter"),t.addClass(n,"exit","base"),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){var n=t.resolveArguments(e)[0];t.addClass(n,"exit","active"),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){var n=t.resolveArguments(e)[0];t.removeClasses(n,"exit"),t.addClass(n,"exit","done"),t.props.onExited&&t.props.onExited(e)},t.resolveArguments=function(e,n){return t.props.nodeRef?[t.props.nodeRef.current,e]:[e,n]},t.getClassNames=function(e){var n=t.props.classNames,l="string"==typeof n,r=l?(l&&n?n+"-":"")+e:n[e];return{baseClassName:r,activeClassName:l?r+"-active":n[e+"Active"],doneClassName:l?r+"-done":n[e+"Done"]}},t}mn(t,e);var n=t.prototype;return n.addClass=function(e,t,n){var l=this.getClassNames(t)[n+"ClassName"],r=this.getClassNames("enter").doneClassName;"appear"===t&&"done"===n&&r&&(l+=" "+r),"active"===n&&e&&bn(e),l&&(this.appliedClasses[t][n]=l,function(e,t){e&&t&&t.split(" ").forEach((function(t){return l=t,void((n=e).classList?n.classList.add(l):function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")}(n,l)||("string"==typeof n.className?n.className=n.className+" "+l:n.setAttribute("class",(n.className&&n.className.baseVal||"")+" "+l)));var n,l}))}(e,l))},n.removeClasses=function(e,t){var n=this.appliedClasses[t],l=n.base,r=n.active,s=n.done;this.appliedClasses[t]={},l&&An(e,l),r&&An(e,r),s&&An(e,s)},n.render=function(){var e=this.props,t=(e.classNames,hn(e,["classNames"]));return l.createElement(Pn,s({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(l.Component);_n.defaultProps={classNames:""},_n.propTypes={};const Tn=_n,Ln={FoldItem:"D4X2ki84",title:"vV2P8MxZ",content:"ZQ2VKorQ",enter:"hAEsMg0I","enter-active":"rPgAfjMj","enter-done":"ELymFVJZ",exit:"Y6EpJm8E","exit-active":"tyIued4X","exit-done":"Yg6FXHOO",theme:"fDnMpJ2u",folded:"ckVC9jeT",question:"rS6pBl1n"};var Nn=function(){return Nn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Nn.apply(this,arguments)};const Rn=function(e){var n,r=e.title,s=e.children,i=e.index,o=e.isOpen,a=e.className,p=e.onChange,u=e.itemsRef,c=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&t.indexOf(l)<0&&(n[l]=e[l]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(l=Object.getOwnPropertySymbols(e);r<l.length;r++)t.indexOf(l[r])<0&&Object.prototype.propertyIsEnumerable.call(e,l[r])&&(n[l[r]]=e[l[r]])}return n}(e,["title","children","index","isOpen","className","onChange","itemsRef"]),d=(0,l.useCallback)((function(){p()}),[p]),f=(0,l.useMemo)((function(){var e=getComputedStyle(document.documentElement);return parseInt(e.getPropertyValue("--animation-fold-duration"),10)}),[]),g=(0,l.useRef)({});return(0,l.useEffect)((function(){if(g.current.hasOwnProperty("fold")){var e=g.current;u.current.push(Nn(Nn({},e),{id:i,callback:function(){return p()}}))}}),[g,i,u,p]),(0,t.jsxs)("div",Nn({className:Rt(Ln.FoldItem,(n={},n[Ln.folded]=!o,n),[Ln[a]])},c,{ref:function(e){g.current=Nn(Nn({},g.current),{fold:e})}},{children:[(0,t.jsx)("div",Nn({className:Ln.title,onClick:d,ref:function(e){g.current=Nn(Nn({},g.current),{title:e})}},{children:r}),void 0),(0,t.jsx)(Tn,Nn({mountOnEnter:!0,unmountOnExit:!0,in:o,timeout:f},{children:(0,t.jsx)("div",Nn({className:[Ln.content,"content"].join(" "),ref:function(e){g.current=Nn(Nn({},g.current),{content:e})}},{children:s}),void 0)}),void 0)]}),void 0)};var In=function(){return In=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},In.apply(this,arguments)};const Dn=function(e){var n=e.list,l=e.children,r=e.setTitle,s=e.onChange,i=e.isOpen,o=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&t.indexOf(l)<0&&(n[l]=e[l]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(l=Object.getOwnPropertySymbols(e);r<l.length;r++)t.indexOf(l[r])<0&&Object.prototype.propertyIsEnumerable.call(e,l[r])&&(n[l[r]]=e[l[r]])}return n}(e,["list","children","setTitle","onChange","isOpen"]);return(0,t.jsx)(t.Fragment,{children:n.map((function(e,n){var a=e[0],p=e[1];return(0,t.jsx)(Rn,In({index:n,title:r(a,n,p),isOpen:i(n),onChange:function(){return s(n)}},o,{children:l(p,n)}),a)}))},void 0)};var Mn=function(){return Mn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Mn.apply(this,arguments)},Bn=function(e,t,n){if(n||2===arguments.length)for(var l,r=0,s=t.length;r<s;r++)!l&&r in t||(l||(l=Array.prototype.slice.call(t,0,r)),l[r]=t[r]);return e.concat(l||Array.prototype.slice.call(t))},Fn=function(e){var n=e.themesRef,r=e.questionsRef,s=e.answers,i=e.isOpenThemes,o=e.setIsOpenThemes,a=e.isOpenQuestions,p=e.setIsOpenQuestions,u=(0,l.useContext)(Gt).setOpp,c=(0,l.useCallback)((function(e,n,l){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("h1",{children:"".concat(n+1,". ").concat(e)},void 0),(0,t.jsx)("span",Mn({className:"questions-length"},{children:l.length}),void 0)]},void 0)}),[]),d=(0,l.useCallback)((function(e,n){return(0,t.jsx)("h2",{children:"".concat(n+1,". ").concat(e)},void 0)}),[]),f=(0,l.useCallback)((function(e){var t=Bn([],i,!0);t[e]=!t[e],o(t);var n=t.every((function(e){return e})),l=t.some((function(e){return e}));u((function(e){return Mn(Mn({},e),{opened:Mn(Mn({},e.opened),{isThemesOpened:n||l})})}))}),[i,o,u]),g=(0,l.useCallback)((function(e,t){var n=Bn([],a,!0);n[t][e]=!n[t][e],p(n);var l=n.every((function(e){return e})),r=n.some((function(e){return e}));u((function(e){return Mn(Mn({},e),{opened:Mn(Mn({},e.opened),{isQuestionsOpened:l||r})})}))}),[a,p,u]);return(0,t.jsx)("div",Mn({className:"qTP5XuUo"},{children:(0,t.jsx)(Dn,Mn({itemsRef:n,className:"theme",isOpen:function(e){return i[e]},list:s,setTitle:c,onChange:function(e){return f(e)}},{children:function(e,n){return(0,t.jsx)(Dn,Mn({itemsRef:r,className:"question",isOpen:function(e){return a[n][e]},list:e,setTitle:d,onChange:function(e){return g(e,n)}},{children:function(e){return(0,t.jsx)("div",{className:"gA8UF5Zx",dangerouslySetInnerHTML:{__html:e}},void 0)}}),void 0)}}),void 0)}),void 0)};var qn=function(){return qn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},qn.apply(this,arguments)};const zn=function(){var e=(0,l.useContext)(Gt),n=e.opp.font,r=n.size,s=n.range,i=s.min,o=s.max,a=e.setOpp,p=(0,l.useCallback)((function(e){var t,n=parseFloat(null===(t=e.currentTarget)||void 0===t?void 0:t.value);n&&a((function(e){return qn(qn({},e),{font:qn(qn({},e.font),{size:n})})}))}),[a]);return(0,t.jsx)("div",qn({className:"SCEhWaC3"},{children:(0,t.jsx)("input",{step:.1,value:r,min:i,max:o,type:"range",onInput:p},void 0)}),void 0)};var Un=function(){return Un=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Un.apply(this,arguments)};const Hn=function(e){var n=e.answers,r=e.fileName,s=(0,l.useState)({}),i=s[0],o=s[1],a=(0,l.useCallback)((function(){var e=n.map((function(e){var t=e[0],n=e[1];return['<h1 class="theme">'.concat(t,"</h1>"),n.map((function(e,t){var n=e[0],l=e[1];return"<il>".concat(['<h2 class="question">'.concat(t+1,".").concat(n,"</h2>"),'<div class="answer">'.concat(l,"</div>")].join(""),"</il>")})).join("")].join("")})).join("\n\n"),t=htmlDocx.asBlob(e);o({href:URL.createObjectURL(t),download:"".concat(r,".docx")})}),[n]);return(0,l.useEffect)((function(){var e=document.createElement("script");e.src="https://cdn.jsdelivr.net/npm/html-docx-js/dist/html-docx.js",e.onload=a,document.head.appendChild(e)}),[a]),(0,t.jsx)("a",Un({className:"UShU9_kK"},i,{children:"Скачать word файл"}),void 0)};var Vn;function Qn(){return Qn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},Qn.apply(this,arguments)}const $n=function(e){return l.createElement("svg",Qn({xmlns:"http://www.w3.org/2000/svg",height:48,viewBox:"0 -960 960 960",width:48},e),Vn||(Vn=l.createElement("path",{d:"M359-240 120-479l239-239 43 43-167 167h545v-172h60v231H236l166 166-43 43Z"})))};var Xn=function(){return Xn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Xn.apply(this,arguments)},Wn=function(e){var n=e.className,l=e.answers,r=e.fileName;return(0,t.jsxs)("div",Xn({className:Rt("quwscpvr",{},[n])},{children:[(0,t.jsx)(B,Xn({className:"dJC9htLZ",to:"/"},{children:(0,t.jsx)($n,{},void 0)}),void 0),(0,t.jsx)(Hn,{fileName:r,answers:l},void 0),(0,t.jsx)(zn,{},void 0)]}),void 0)},Kn=function(){return Kn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Kn.apply(this,arguments)};const Yn=function(e){var n=e.json,r=e.title,s=(0,l.useContext)(Gt),i=s.opp,o=i.font.size,a=i.opened,p=a.isThemesOpened,u=a.isQuestionsOpened,c=s.setOpp,d=(0,l.useMemo)((function(){return Object.entries(n)}),[n]),f=(0,l.useState)(d.map((function(){return p}))),g=f[0],h=f[1],v=(0,l.useState)(d.map((function(e){return e[0],e[1].map((function(){return u}))}))),m=v[0],w=v[1],y=(0,l.useCallback)((function(){c((function(e){return Kn(Kn({},e),{opened:Kn(Kn({},e.opened),{isThemesOpened:!p})})})),h(d.map((function(){return!p})))}),[c,p,d]),b=(0,l.useCallback)((function(){c((function(e){return Kn(Kn({},e),{opened:Kn(Kn({},e.opened),{isQuestionsOpened:!u})})})),w(d.map((function(e){return e[0],e[1].map((function(){return!u}))})))}),[c,d,u]),k=(0,l.useRef)([]),x=(0,l.useRef)([]),j=(0,l.useRef)(null);return(0,t.jsxs)("div",Kn({className:"opp"},{children:[(0,t.jsx)("div",{className:"top-side"},void 0),(0,t.jsxs)("div",Kn({className:"body",ref:j},{children:[(0,t.jsx)("div",Kn({className:"top-side"},{children:(0,t.jsx)(Wn,{fileName:r,answers:d},void 0)}),void 0),(0,t.jsx)("div",Kn({className:"help-panel"},{children:(0,t.jsx)(gn,{text:"тему",className:"theme",items:k.current,isOpenItems:g,scrollRef:j},void 0)}),void 0),(0,t.jsx)("div",Kn({className:"bottom-side",style:{fontSize:"".concat(o,"em")}},{children:(0,t.jsx)(Fn,Kn({},{themesRef:k,questionsRef:x,answers:d,isOpenThemes:g,setIsOpenThemes:h,isOpenQuestions:m,setIsOpenQuestions:w}),void 0)}),void 0)]}),void 0),(0,t.jsx)("div",Kn({className:"bottom-side"},{children:(0,t.jsx)(cn,Kn({},{onButtonThemesClick:y,onButtonQuestionsClick:b}),void 0)}),void 0)]}),void 0)},Jn=JSON.parse('{"СИСТЕМЫ ЭЛЕКТРОСНАБЖЕНИЯ":[["Термины и определения: энергосистема, электроэнергетическая система, система электроснабжения, независимый источник питания, центр питания, ГПП, РП, ТП, внешнее и внутреннее электроснабжение.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><ol><li><p>Энергосистема: Энергосистема представляет собой комплекс взаимосвязанных энергетических объектов, таких как генерирующие станции, трансформаторные подстанции, линии электропередачи, распределительные сети и потребители, которые работают совместно для обеспечения передачи и распределения электроэнергии.</p></li><li><p>Электроэнергетическая система: Электроэнергетическая система (ЭЭС) представляет собой комплекс взаимодействующих электроэнергетических систем, которые объединены для обеспечения устойчивой и надежной передачи и распределения электроэнергии на большие территории.</p></li><li><p>Система электроснабжения: Система электроснабжения (СЭС) – это комплекс технических и организационных мероприятий, включающий генерацию, передачу, распределение и потребление электроэнергии с целью обеспечения электрической энергией потребителей.</p></li><li><p>Независимый источник питания: Независимый источник питания (НИП) – это система или устройство, которое может обеспечивать непрерывное электропитание для определенных устройств или систем даже в случае отключения основного источника электропитания.</p></li><li><p>Центр питания: Центр питания представляет собой устройство или подстанцию, которая обеспечивает электроэнергией определенную территорию, здание или группу потребителей.</p></li><li><p>ГПП (главный пункт подстанции): ГПП – это часть электростанции или подстанции, которая выполняет функцию основной точки сбора и распределения электроэнергии для дальнейшей передачи.</p></li><li><p>РП (распределительный пункт): РП – это участок в системе электроснабжения, где происходит распределение электроэнергии на конечных потребителей через сети низкого напряжения.</p></li><li><p>ТП (трансформаторная подстанция): ТП – это часть системы электроснабжения, где происходит трансформация электрического напряжения для передачи и распределения электроэнергии на различные уровни напряжения.</p></li><li><p>Внешнее электроснабжение: Внешнее электроснабжение – это электропитание, получаемое из внешних источников, таких как электростанции или подстанции.</p></li><li><p>Внутреннее электроснабжение: Внутреннее электроснабжение – это электропитание, организованное внутри здания, сооружения или объекта для обеспечения его электрических потребностей.</p></li></ol></div>"],["Категории надежности электроснабжения приемников электрической энергии по ПУЭ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Категории надежности электроснабжения приемников электрической энергии по ПУЭ (Правила устройства электроустановок) определяют степень гарантированной надежности и безопасности электроснабжения различных потребителей. Категории надежности обозначаются буквами латинского алфавита от \\"А\\" до \\"Е\\", где \\"А\\" представляет наивысшую надежность, а \\"Е\\" – наименьшую.</p><ol><li><p>Категория \\"А\\": Категория \\"А\\" обозначает непрерывное электроснабжение, которое требуется для объектов жизнеобеспечения и безопасности, таких как больницы, аварийно-спасательные службы, важные объекты обороны и безопасности.</p></li><li><p>Категория \\"Б\\": Категория \\"Б\\" предполагает высокую степень надежности электроснабжения для объектов, функционирование которых критично для обеспечения жизнедеятельности большого числа людей или для предотвращения катастрофических последствий, например, метрополитены, аэропорты, жилые дома высокой этажности и т.д.</p></li><li><p>Категория \\"В\\": Категория \\"В\\" применяется для объектов, которым требуется высокая надежность электроснабжения, но последствия от его временного прерывания не являются критическими. Сюда относятся некоторые производственные предприятия, офисы, торговые центры и другие объекты средней важности.</p></li><li><p>Категория \\"Г\\": Категория \\"Г\\" предполагает обеспечение нормального электроснабжения, но допускается его временные отключения. К этой категории можно отнести некоторые производственные предприятия, которым при некритических перерывах можно осуществлять запасные меры.</p></li><li><p>Категория \\"Д\\": Категория \\"Д\\" применяется для объектов, электроснабжение которых может быть прервано без значительных последствий. Это могут быть определенные производственные и складские помещения, объекты развлечений, некоторые магазины.</p></li><li><p>Категория \\"Е\\": Категория \\"Е\\" обозначает объекты, для которых электроснабжение не требуется, либо временные прерывания не имеют значения.</p></li></ol><p>Важно заметить, что выбор категории надежности зависит от специфики каждого объекта и его важности в общей системе электроснабжения.</p></div>"],["Понятие индивидуальных и групповых графиков нагрузки. Коэффициент формы, использования, спроса, максимума нагрузки.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Индивидуальные и групповые графики нагрузки, а также связанные с ними понятия коэффициента формы, использования, спроса и максимума нагрузки являются важными характеристиками систем электроснабжения.</p><ol><li><p>Индивидуальные графики нагрузки: Индивидуальные графики нагрузки представляют собой диаграммы, отражающие изменение потребления электроэнергии во времени для отдельного потребителя или устройства. Они позволяют анализировать и оптимизировать энергопотребление для конкретного потребителя.</p></li><li><p>Групповые графики нагрузки: Групповые графики нагрузки отражают общее изменение электропотребления для группы потребителей или зоны электроснабжения. Эти графики позволяют оценить нагрузку на определенный участок сети или подстанцию.</p></li><li><p>Коэффициент формы: Коэффициент формы (или коэффициент нагрузки по форме) – это отношение максимальной мощности к средней мощности нагрузки за определенный период времени (например, за сутки или месяц). Он характеризует степень неравномерности распределения нагрузки.</p></li><li><p>Коэффициент использования: Коэффициент использования (или коэффициент загрузки) – это отношение фактической мощности нагрузки к максимально возможной мощности (номинальной мощности установленного оборудования). Он показывает, насколько интенсивно используется электрооборудование.</p></li><li><p>Коэффициент спроса: Коэффициент спроса (или коэффициент утилизации) – это отношение фактической мощности нагрузки к максимальной мощности, которая была бы потреблена, если бы все потребители работали одновременно на своей номинальной мощности. Этот коэффициент позволяет оценить \\"избыточность\\" установленной мощности.</p></li><li><p>Максимум нагрузки: Максимум нагрузки – это максимальное значение мощности, которое потребляется системой или потребителем в определенный период времени (чаще всего за год). Максимум нагрузки имеет большое значение при планировании и проектировании электросистем, так как он определяет минимальную необходимую мощность генерации и емкость передающих линий и подстанций.</p></li></ol><p>Все эти параметры являются важными при анализе нагрузки и проектировании электроэнергетических систем, позволяя эффективно управлять и оптимизировать электроснабжение.</p></div>"],["Методы расчета электрических нагрузок.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Методы расчета электрических нагрузок позволяют определить объем и характеристики потребления электроэнергии для различных потребителей и систем электроснабжения. Вот некоторые из основных методов расчета электрических нагрузок:</p><ol><li><p>Метод суммирования мощностей потребителей: Этот метод заключается в простом суммировании мощностей всех подключенных к системе электроприемников или потребителей. Это наиболее простой метод, который применяется для небольших систем с невысоким уровнем сложности нагрузки.</p></li><li><p>Метод расчета по типовым коэффициентам: Для некоторых типов потребителей (например, жилых домов или офисных зданий) используются типовые коэффициенты, которые определяют нагрузку в зависимости от количества и мощности установленных устройств.</p></li><li><p>Метод профилей нагрузки: Этот метод предполагает сбор данных о реальном электропотреблении в течение определенного времени с помощью счетчиков электроэнергии или мониторинга нагрузки. Полученные данные используются для создания профиля нагрузки, который характеризует изменение нагрузки в разные часы суток или дни.</p></li><li><p>Метод эквивалентных часов: В этом методе нагрузка выражается в виде количества часов, в течение которых потребитель потребляет электроэнергию на номинальной мощности. Это удобно для определения эквивалентной нагрузки для потребителей с неравномерной работой.</p></li><li><p>Метод расчета на основе стандартных нормативов: Для различных типов потребителей существуют стандартные нормативы или рекомендации по расчету электрических нагрузок, основанные на определенных стандартных условиях использования.</p></li><li><p>Методы математического моделирования: Для более сложных систем электроснабжения и крупных промышленных предприятий применяются математические модели, которые учитывают различные факторы, влияющие на нагрузку, такие как пиковая нагрузка, сезонные колебания и т.д.</p></li></ol><p>Выбор метода расчета зависит от размера системы электроснабжения, типа потребителей, доступности данных и уровня точности, который требуется для планирования и проектирования электроэнергетических систем.</p></div>"],["Порядок расчета нагрузок по методу упорядоченных диаграмм.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Метод упорядоченных диаграмм (или метод диаграмм) является одним из способов расчета нагрузок в системах электроснабжения, основанных на графическом представлении потребления электроэнергии во времени. Процедура расчета нагрузок по этому методу состоит из следующих шагов:</p><p>Шаг 1: Сбор данных\\nСоберите данные о потреблении электроэнергии для каждого потребителя или группы потребителей. Эти данные можно получить из счетчиков электроэнергии, мониторинговой системы или других источников.</p><p>Шаг 2: Построение диаграмм нагрузок\\nНа основе собранных данных постройте диаграммы нагрузок для каждого потребителя или группы потребителей. Для этого отложите время по горизонтальной оси, а мощность потребления по вертикальной оси. Полученные кривые нагрузок отражают изменение потребления электроэнергии во времени.</p><p>Шаг 3: Упорядочение диаграмм\\nРасположите построенные диаграммы нагрузок в порядке убывания их максимальных значений. То есть, начните с диаграммы, которая имеет наибольший пик нагрузки, и последовательно следуйте по убыванию максимальных значений мощности.</p><p>Шаг 4: Суммирование диаграмм\\nНачиная с наибольшей диаграммы нагрузки, последовательно суммируйте мощности всех диаграмм в порядке упорядочения. Продолжайте суммирование, пока не достигнете значения максимальной мощности для всей системы электроснабжения или нужного времени расчета.</p><p>Шаг 5: Учет коэффициента одновременности (при необходимости)\\nЕсли сумма мощностей нагрузок превышает максимальную мощность для всей системы, учтите коэффициент одновременности. Он позволяет учитывать тот факт, что все потребители редко работают на своей максимальной мощности одновременно. Применение коэффициента одновременности позволит определить реальную нагрузку системы.</p><p>Таким образом, метод упорядоченных диаграмм предоставляет графический и интуитивно понятный подход для определения общей нагрузки на систему электроснабжения и позволяет эффективно планировать и проектировать работу электроэнергетических систем.</p></div>"],["Режимы нейтрали систем электроснабжения напряжением выше 1 кВ. Достоинства и недостатки различных режимов нейтрали.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>В системах электроснабжения с напряжением выше 1 кВ нейтраль (заземленный провод) может находиться в различных режимах работы, в зависимости от конкретных требований, условий эксплуатации и характера нагрузки. Вот некоторые из режимов нейтрали, их достоинства и недостатки:</p><ol><li><p>Изолированный нейтральный режим:</p><ul><li>Достоинства: Отсутствие прямых токов наведения (нежелательных токов, возникающих при несимметричных нагрузках), что снижает риск повреждения оборудования и улучшает качество электроэнергии.</li><li>Недостатки: При возникновении однофазных замыканий на корпус оборудования нейтраль не обеспечивает защиту от опасного для людей касания.</li></ul></li><li><p>Заземленный нейтральный режим:</p><ul><li>Достоинства: Наличие заземления нейтрали позволяет обнаруживать однофазные замыкания на корпус оборудования через срабатывание защитных устройств (защита от КЗ на корпус).</li><li>Недостатки: Возможность возникновения прямых токов наведения при несимметричных нагрузках, что может привести к нежелательным эффектам, таким как появление высоких наведенных напряжений на металлических конструкциях.</li></ul></li><li><p>Заземленный нейтральный режим с нулевой последовательностью:</p><ul><li>Достоинства: Дополнительная фильтрация высших гармоник и снижение прямых токов наведения.</li><li>Недостатки: Увеличение сложности системы и оборудования из-за наличия специальных устройств для подавления нулевой последовательности.</li></ul></li><li><p>Изолированный заземленный нейтральный режим с нулевой последовательностью:</p><ul><li>Достоинства: Комбинирование преимуществ изолированного и заземленного режимов, что позволяет снизить прямые токи наведения и улучшить защиту от однофазных замыканий.</li><li>Недостатки: Более сложная и дорогостоящая система с увеличенными требованиями к оборудованию и обслуживанию.</li></ul></li></ol><p>Выбор определенного режима нейтрали зависит от требований к безопасности, надежности и качеству электроэнергии, а также особенностей конкретной системы электроснабжения и типа потребителей. Электрические инженеры и проектировщики должны учитывать эти факторы при выборе оптимального режима нейтрали для каждого конкретного случая.</p></div>"],["Режимы нейтрали систем электроснабжения напряжением до 1 кВ. Достоинства и недостатки различных режимов нейтрали.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Режимы нейтрали в системах электроснабжения с напряжением до 1 кВ также имеют свои особенности, и выбор конкретного режима зависит от требований к безопасности, надежности и экономической эффективности. Вот некоторые из режимов нейтрали, их достоинства и недостатки:</p><ol><li><p>Заземленный нейтральный режим:</p><ul><li>Достоинства: Наличие заземления нейтрали позволяет обнаруживать однофазные замыкания на корпус оборудования через срабатывание защитных устройств (защита от КЗ на корпус).</li><li>Недостатки: Возможность возникновения прямых токов наведения при несимметричных нагрузках, что может привести к нежелательным эффектам, таким как появление высоких наведенных напряжений на металлических конструкциях.</li></ul></li><li><p>Изолированный нейтральный режим:</p><ul><li>Достоинства: Отсутствие прямых токов наведения, что снижает риск повреждения оборудования и улучшает качество электроэнергии.</li><li>Недостатки: Отсутствие защиты от КЗ на корпус оборудования, что может представлять опасность для людей.</li></ul></li><li><p>Компенсированный нейтральный режим:</p><ul><li>Достоинства: Компенсация реактивной мощности на нейтрали позволяет уменьшить потери в системе и улучшить качество электроэнергии.</li><li>Недостатки: Более сложная система с использованием дополнительных компенсационных устройств.</li></ul></li><li><p>Режим с высокоомным заземлением:</p><ul><li>Достоинства: Снижение значения короткого замыкания на заземление, что позволяет уменьшить размеры защитных устройств и оборудования.</li><li>Недостатки: Ограничение тока короткого замыкания, что может повлиять на возможности совместной работы с другими системами или оборудованием.</li></ul></li><li><p>Резонансный нейтральный режим:</p><ul><li>Достоинства: Возможность использования резонансных эффектов для улучшения передачи электроэнергии и снижения реактивных потерь.</li><li>Недостатки: Резонансные эффекты могут быть нестабильными и привести к нежелательным переходным процессам в системе.</li></ul></li></ol><p>Каждый режим нейтрали имеет свои преимущества и ограничения, и выбор конкретного режима зависит от требований к надежности, безопасности, эффективности использования ресурсов и конкретных условий эксплуатации системы электроснабжения. Оптимальный выбор режима нейтрали позволяет обеспечить эффективное функционирование системы и удовлетворение потребностей потребителей.</p></div>"],["Понятия числа часов использования максимума нагрузки и времени максимальных потерь.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Число часов использования максимума нагрузки и время максимальных потерь – это два важных понятия, связанных с характеристиками нагрузки в системах электроснабжения.</p><ol><li>Число часов использования максимума нагрузки:\\nЧисло часов использования максимума нагрузки (или просто число часов максимума) представляет собой количество часов в определенном периоде времени (обычно за год), в течение которых система или потребитель работает на максимальной мощности или близко к ней. Это показатель, который позволяет оценить, насколько часто система или устройство испытывают нагрузку близкую к максимальной мощности.</li></ol><p>Например, если число часов использования максимума нагрузки равно 1000 часов за год, это означает, что система или устройство работали на максимальной или почти максимальной мощности в течение 1000 часов в течение года.</p><ol start=\\"2\\"><li>Время максимальных потерь:\\nВремя максимальных потерь – это период времени в течение суток (обычно часы или даже минуты), когда система электроснабжения или устройство испытывает максимальные электрические потери. Это время связано с пиковой нагрузкой в системе, когда потребление электроэнергии наибольшее.</li></ol><p>Время максимальных потерь может быть критическим для системы электроснабжения, так как в это время нагрузка близка к максимуму, и электрооборудование может испытывать большие нагрузки, что может повлиять на качество и надежность работы системы.</p><p>Оба понятия (число часов использования максимума нагрузки и время максимальных потерь) имеют важное значение при планировании и проектировании электроэнергетических систем, а также при определении оптимальных режимов работы и мер по управлению нагрузкой для обеспечения эффективного и надежного электроснабжения.</p></div>"],["Расчет годового потребления, потерь мощности и потерь электроэнергии в линиях электропередачи.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Расчет годового потребления, потерь мощности и потерь электроэнергии в линиях электропередачи является важным этапом проектирования и эксплуатации электроэнергетических систем. Вот как проводится этот расчет:</p><ol><li><p>Расчет годового потребления:\\nДля расчета годового потребления электроэнергии необходимо знать мощность нагрузки и время работы каждого потребителя или группы потребителей. Умножьте мощность каждого потребителя на время его работы в течение года и сложите все полученные значения. Таким образом, вы определите общее годовое потребление электроэнергии для всей системы или выбранной части.</p></li><li><p>Расчет потерь мощности:\\nПотери мощности в линиях электропередачи зависят от сопротивления проводников и величины тока, который протекает через линии. Чтобы рассчитать потери мощности, используйте формулу: Потери мощности = (Ток^2) x (Сопротивление проводника). Здесь ток измеряется в амперах, а сопротивление проводника - в омах.</p></li><li><p>Расчет потерь электроэнергии:\\nПотери электроэнергии рассчитываются на основе потерь мощности и времени длительности работы линий электропередачи. Умножьте потери мощности в линиях на время, в течение которого линии работают, чтобы получить потери электроэнергии. При этом следует учитывать, что часть потерь может быть компенсирована в результате регулировки напряжения в системе.</p></li></ol><p>Важно отметить, что потери электроэнергии в линиях электропередачи снижают эффективность системы и приводят к дополнительным затратам на производство и передачу электроэнергии. Поэтому при проектировании системы электроснабжения и выборе оптимальных параметров линий следует стремиться к минимизации потерь и повышению эффективности системы.</p></div>"],["Расчет годового потребления, потерь мощности и потерь электроэнергии в трансформаторах.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Расчет годового потребления, потерь мощности и потерь электроэнергии в трансформаторах является важным этапом в проектировании и эксплуатации электроэнергетических систем. Вот как проводится этот расчет:</p><ol><li><p>Расчет годового потребления:\\nДля расчета годового потребления электроэнергии в трансформаторах, необходимо знать номинальную мощность каждого трансформатора и время его работы в течение года. Умножьте номинальную мощность трансформатора на время его работы за год, чтобы определить годовое потребление электроэнергии для каждого трансформатора.</p></li><li><p>Расчет потерь мощности:\\nТрансформаторы имеют потери мощности, которые происходят из-за электрического сопротивления обмоток трансформатора и магнитного характера материалов. Потери мощности можно разделить на две части: потери в обмотках (потери меди) и потери в железе трансформатора (потери магнитного характера).</p></li><li><p>Расчет потерь электроэнергии:\\nДля расчета потерь электроэнергии в трансформаторах умножьте потери мощности каждого трансформатора на время его работы в течение года. Полученные значения будут представлять собой годовые потери электроэнергии для каждого трансформатора.</p></li></ol><p>Важно отметить, что потери электроэнергии в трансформаторах приводят к недополучению полной мощности на выходе трансформаторов и снижают эффективность системы. Поэтому при проектировании и выборе трансформаторов следует стремиться к минимизации потерь, чтобы обеспечить наиболее эффективное использование электроэнергии и оптимизацию работы системы электроснабжения.</p></div>"],["Технико-экономическое сравнение вариантов систем электроснабжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Технико-экономическое сравнение вариантов систем электроснабжения является важным этапом при принятии решений о выборе оптимального решения для создания или модернизации электроэнергетических систем. В этом сравнении учитываются технические характеристики системы и экономические аспекты, такие как стоимость инвестиций, операционные расходы, эффективность использования ресурсов и др. Вот ключевые шаги и факторы, которые учитываются при технико-экономическом сравнении вариантов систем электроснабжения:</p><ol><li><p>Анализ требований и характеристик системы:\\nОпределите требования и характеристики системы электроснабжения, такие как нагрузка, напряжение, частота, степень надежности, доступность энергии и другие технические параметры.</p></li><li><p>Определение вариантов систем электроснабжения:\\nРазработайте несколько альтернативных вариантов систем электроснабжения, которые могут удовлетворить требования и характеристики, установленные на предыдущем этапе.</p></li><li><p>Оценка технических характеристик вариантов:\\nПроанализируйте технические характеристики каждого варианта системы, такие как емкость, надежность, гибкость, эффективность и другие факторы, которые могут повлиять на функциональность системы.</p></li><li><p>Оценка экономических параметров:\\nРассмотрите экономические аспекты каждого варианта, включая стоимость инвестиций, затраты на эксплуатацию, обслуживание и ремонт, стоимость потребления ресурсов (например, топлива), сроки окупаемости инвестиций и т. д.</p></li><li><p>Сравнение преимуществ и недостатков:\\nСравните преимущества и недостатки каждого варианта системы, исходя из технических и экономических критериев. Оцените, какой вариант лучше соответствует требованиям и обладает наиболее выгодными экономическими показателями.</p></li><li><p>Принятие решения:\\nНа основе результатов сравнения выберите оптимальный вариант системы электроснабжения, который наилучшим образом сочетает в себе техническую эффективность и экономическую целесообразность.</p></li></ol><p>Технико-экономическое сравнение вариантов систем электроснабжения позволяет выбрать оптимальное решение, которое обеспечит надежную и эффективную работу системы при оптимальных затратах ресурсов. Этот подход является ключевым для успешного проектирования и управления электроэнергетическими системами.</p></div>"],["Требования, предъявляемые к схемам электроснабжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Требования, предъявляемые к схемам электроснабжения, направлены на обеспечение надежной и безопасной работы электроэнергетических систем, а также удовлетворение потребностей потребителей. Вот некоторые из основных требований, которые обычно предъявляются к схемам электроснабжения:</p><ol><li><p>Надежность:\\nСистема электроснабжения должна обеспечивать надежную и стабильную подачу электроэнергии, минимизируя возможность сбоев, перебоев или прерываний электропитания. Для этого важно предусматривать резервирование оборудования, аварийные и резервные источники питания, а также системы автоматической переключения на резервные линии.</p></li><li><p>Безопасность:\\nСхемы электроснабжения должны быть спроектированы с учетом требований безопасности, чтобы предотвратить возможные аварийные ситуации, устранить опасные зоны и обеспечить защиту персонала и оборудования от поражения электрическим током.</p></li><li><p>Эффективность:\\nСхемы электроснабжения должны быть оптимизированы с точки зрения эффективного использования ресурсов и энергии, чтобы минимизировать потери электроэнергии и обеспечить экономически эффективное функционирование системы.</p></li><li><p>Гибкость:\\nСистема электроснабжения должна быть спроектирована с учетом возможности расширения и модернизации в будущем, чтобы удовлетворять изменяющимся потребностям и требованиям.</p></li><li><p>Качество электроэнергии:\\nСхемы электроснабжения должны обеспечивать стабильное и качественное электрическое напряжение и частоту, чтобы предотвратить возникновение проблем с оборудованием и электроникой, которые могут быть чувствительны к некачественному питанию.</p></li><li><p>Экономическая целесообразность:\\nСистема электроснабжения должна быть спроектирована с учетом экономической эффективности, чтобы обеспечить оптимальное соотношение между стоимостью инвестиций и операционными расходами, а также с учетом принципов энергосбережения.</p></li></ol><p>Эти требования обеспечивают эффективное и надежное функционирование системы электроснабжения, а также безопасность персонала и оборудования. При проектировании и эксплуатации систем электроснабжения необходимо учитывать все эти аспекты для достижения наилучших результатов.</p></div>"],["Радиальные, магистральные и смешанные схемы; их разновидности. Достоинства и недостатки схем.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Радиальные, магистральные и смешанные схемы являются различными вариантами организации систем электроснабжения. Каждый из них имеет свои достоинства и недостатки, и выбор конкретной схемы зависит от особенностей конкретного объекта и требований к его электроснабжению. Рассмотрим каждую из схем подробнее:</p><ol><li>Радиальные схемы:\\nРадиальная схема представляет собой систему электроснабжения, в которой электроэнергия передается от источника питания по одной линии или цепи к потребителям. В этой схеме отсутствуют параллельные пути, и переключение на резервные линии осуществляется вручную.</li></ol><p>Достоинства:</p><ul><li>Простота конструкции и эксплуатации;</li><li>Низкая стоимость строительства и обслуживания;</li><li>Пригодность для небольших объектов с невысокой нагрузкой.</li></ul><p>Недостатки:</p><ul><li>Ограниченная надежность, так как отказ одной линии может привести к обесточиванию всех последующих потребителей;</li><li>Отсутствие резервирования в автоматическом режиме.</li></ul><ol start=\\"2\\"><li>Магистральные схемы:\\nМагистральная схема представляет собой систему электроснабжения, в которой существует несколько параллельных линий, называемых магистралями, которые связывают источники питания с потребителями. В этой схеме применяется автоматическое переключение на резервные линии при отказе одной из магистралей.</li></ol><p>Достоинства:</p><ul><li>Большая надежность, так как отказ одной магистрали не приводит к обесточиванию всей системы;</li><li>Возможность автоматического переключения на резервные линии;</li><li>Применяется для средних и крупных объектов с более высокими требованиями к надежности.</li></ul><p>Недостатки:</p><ul><li>Высокая стоимость строительства и обслуживания по сравнению с радиальными схемами.</li></ul><ol start=\\"3\\"><li>Смешанные схемы:\\nСмешанные схемы комбинируют элементы радиальных и магистральных схем. Например, на небольших расстояниях используются радиальные линии, а на больших расстояниях - магистральные.</li></ol><p>Достоинства и недостатки смешанных схем зависят от конкретной реализации и комбинации радиальных и магистральных элементов.</p><p>Выбор конкретной схемы электроснабжения зависит от множества факторов, таких как размер и сложность объекта, требования к надежности и эффективности системы, бюджет проекта и другие факторы. При проектировании следует учитывать все эти аспекты, чтобы обеспечить оптимальное решение для конкретного объекта электроснабжения.</p></div>"],["Источники и потребители реактивной мощности. Необходимость компенсации реактивной мощности.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Источники и потребители реактивной мощности являются важными элементами в системах электроснабжения, и управление реактивной мощностью имеет большое значение для эффективной работы электрических сетей. Рассмотрим основные аспекты источников и потребителей реактивной мощности, а также необходимость компенсации реактивной мощности:</p><p>Источники реактивной мощности:</p><ol><li>Конденсаторы: Конденсаторы являются активными источниками реактивной мощности. Они способны генерировать реактивную мощность и компенсировать реактивные потери в электрических сетях.</li></ol><p>Потребители реактивной мощности:</p><ol><li>Индуктивные нагрузки: Электрические устройства, такие как электродвигатели, трансформаторы и реакторы, являются потребителями реактивной мощности. Индуктивные нагрузки потребляют реактивную мощность, что приводит к потерям в электрической системе и снижению эффективности.</li></ol><p>Необходимость компенсации реактивной мощности:\\nКомпенсация реактивной мощности имеет несколько важных причин:</p><ol><li><p>Снижение потерь электроэнергии: Когда в системе присутствуют потребители реактивной мощности (например, индуктивные нагрузки), возникают потери в электрических линиях и оборудовании из-за тока реактивной мощности. Компенсация реактивной мощности позволяет снизить эти потери и повысить эффективность системы.</p></li><li><p>Улучшение напряжения: Реактивная мощность влияет на напряжение в электрической сети. Недостаточная реактивная мощность может привести к снижению напряжения, что негативно сказывается на работе оборудования и устройств. Компенсация реактивной мощности позволяет поддерживать стабильное напряжение.</p></li><li><p>Повышение пропускной способности линий передачи: Когда в системе наблюдается избыток реактивной мощности, это приводит к увеличению токов в электрических линиях, что снижает их пропускную способность. Компенсация реактивной мощности позволяет снизить токи и повысить пропускную способность линий передачи.</p></li><li><p>Соблюдение нормативных требований: В некоторых случаях, энергоснабжающие компании устанавливают нормативы по снижению потребления реактивной мощности, и компании и потребители должны выполнять эти требования для оптимизации использования электроэнергии.</p></li></ol><p>Таким образом, компенсация реактивной мощности позволяет повысить эффективность и надежность систем электроснабжения, снизить потери электроэнергии и поддерживать стабильное напряжение, что имеет важное значение для обеспечения качественной работы электрических сетей и снижения затрат на электроэнергию.</p></div>"],["Расчет мощности компенсирующих устройств.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Для расчета мощности компенсирующих устройств, таких как конденсаторы, необходимо определить необходимое значение реактивной мощности, которое нужно компенсировать. Этот расчет проводится с учетом требуемого уровня компенсации, токов потребителей реактивной мощности и других параметров системы. Вот общий алгоритм расчета мощности компенсирующих устройств:</p><ol><li><p>Определение реактивной мощности:\\nСначала определите суммарное значение реактивной мощности потребителей в системе, которую нужно компенсировать. Это можно сделать путем измерения или расчета реактивной мощности каждого потребителя и их суммирования.</p></li><li><p>Определение необходимой компенсации:\\nНа основе определенного значения реактивной мощности рассчитайте необходимую компенсацию. Необходимая компенсация может быть полной или частичной в зависимости от требований системы и нормативов.</p></li><li><p>Выбор типа компенсирующего устройства:\\nВыберите тип компенсирующего устройства, который будет использоваться для компенсации реактивной мощности. В большинстве случаев, для этой цели применяются конденсаторы.</p></li><li><p>Расчет мощности компенсирующих устройств:\\nНа основе необходимой компенсации и технических характеристик выбранного устройства (например, ёмкость конденсаторов), рассчитайте мощность компенсирующих устройств. Мощность компенсатора должна быть достаточной для компенсации реактивной мощности потребителей.</p></li><li><p>Учет факторов безопасности и резервирования:\\nПри расчете мощности компенсирующих устройств следует также учитывать факторы безопасности и резервирования. Добавьте некоторый запас к рассчитанной мощности, чтобы обеспечить надежную работу и возможность дополнительной компенсации при необходимости.</p></li><li><p>Установка и настройка компенсирующих устройств:\\nУстановите и настройте компенсирующие устройства согласно рассчитанным значениям мощности. После этого произведите проверку работоспособности и эффективности компенсации.</p></li></ol><p>Расчет мощности компенсирующих устройств является важным этапом при проектировании и эксплуатации систем электроснабжения. Правильная компенсация реактивной мощности позволяет повысить эффективность электрических сетей, улучшить напряжение и снизить потери энергии.</p></div>"],["Принципы расстановки конденсаторных батарей в системе электроснабжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Принципы расстановки конденсаторных батарей в системе электроснабжения можно сформулировать следующим образом:</p><ol><li><p>Компенсация реактивной мощности на ближайших участках: Конденсаторные батареи следует размещать на ближайших участках к потребителям реактивной мощности. Это позволит сократить длину линий передачи реактивной мощности и уменьшить потери в них, повысить эффективность компенсации.</p></li><li><p>Учет особенностей нагрузки: При проектировании компенсации реактивной мощности следует учитывать изменчивость нагрузки в системе. Для этого можно использовать автоматические компенсационные устройства, которые регулируют мощность компенсации в зависимости от текущей нагрузки.</p></li><li><p>Размещение рядом с индуктивными потребителями: Конденсаторные батареи следует располагать рядом с группами индуктивных потребителей реактивной мощности, такими как электродвигатели, трансформаторы и реакторы. Это поможет компенсировать реактивную мощность и уменьшить потери на этапе потребления.</p></li><li><p>Учет особенностей сети: При расстановке конденсаторных батарей следует учитывать особенности сети, такие как длина линий передачи, схема соединения, рабочее напряжение и текущая нагрузка. Это поможет определить оптимальное местоположение батарей и выбрать необходимую мощность компенсации.</p></li><li><p>Защита и безопасность: При установке конденсаторных батарей необходимо предусмотреть соответствующие системы защиты, контроля и безопасности. Это включает автоматическое отключение при перегрузках, коротких замыканиях или других аварийных ситуациях, а также предохранительные устройства.</p></li><li><p>Отделение компенсации: Для больших электрических сетей рекомендуется разделять компенсацию реактивной мощности на отдельные подсистемы или зоны, чтобы обеспечить более эффективную и гибкую работу.</p></li><li><p>Резервирование: Для повышения надежности системы электроснабжения следует предусмотреть резервирование конденсаторных батарей, чтобы обеспечить непрерывную компенсацию реактивной мощности в случае отказа одного из устройств.</p></li></ol><p>Правильная расстановка конденсаторных батарей с учетом указанных принципов позволяет повысить эффективность работы системы электроснабжения, уменьшить потери энергии и обеспечить стабильное напряжение в электрической сети.</p></div>"],["Выбор числа, конструкции, мощности и места установки силовых трансформаторов в системах электроснабжения","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Выбор числа, конструкции, мощности и места установки силовых трансформаторов в системах электроснабжения зависит от ряда факторов, таких как нагрузка, напряжение, тип сети, условия окружающей среды и требования к надежности и эффективности работы системы. Вот основные принципы, которые следует учитывать при выборе силовых трансформаторов:</p><ol><li><p>Определение мощности трансформатора: Определение мощности трансформатора основывается на расчете или измерении суммарной активной мощности потребителей в сети. Трансформатор должен иметь достаточную мощность для обеспечения надежной работы системы даже в периоды пиковой нагрузки.</p></li><li><p>Номинальное напряжение: Выбор номинального напряжения трансформатора зависит от уровня напряжения в системе электроснабжения. Он должен соответствовать рабочему напряжению линий передачи и потребителей, с учетом возможных отклонений и допустимого предела перенапряжений.</p></li><li><p>Конструкция трансформатора: В зависимости от конкретных требований и условий эксплуатации, выбирается конструкция трансформатора, такая как сухой тип, масляный тип или герметично запечатанный тип.</p></li><li><p>Место установки: Трансформаторы могут быть установлены внутри помещений или на открытых площадках. При выборе места установки следует учитывать доступность для обслуживания, защиту от воздействия окружающей среды, требования пожарной безопасности и прочие факторы.</p></li><li><p>Число трансформаторов: Число трансформаторов зависит от величины нагрузки и резервирования системы. В некоторых случаях, для обеспечения надежности, применяются несколько параллельно работающих трансформаторов.</p></li><li><p>Эффективность: При выборе трансформатора также следует учитывать его эффективность и КПД. Более эффективные трансформаторы обеспечивают меньшие потери энергии и экономичнее в эксплуатации.</p></li><li><p>Защита и контроль: Трансформаторы должны быть оборудованы системами защиты, контроля и диагностики для обеспечения безопасной и надежной работы.</p></li><li><p>Стандарты и нормативы: При выборе трансформаторов следует руководствоваться соответствующими стандартами и нормативами, установленными в отрасли.</p></li></ol><p>В целом, выбор числа, конструкции, мощности и места установки силовых трансформаторов должен осуществляться с учетом требований к надежности, эффективности и безопасности работы системы электроснабжения. Это позволит обеспечить стабильное и надежное электропитание потребителей при оптимальных экономических затратах.</p></div>"]],"ЭЛЕКТРОМАГНИТНЫЕ ПЕРЕХОДНЫЕ ПРОЦЕССЫ":[["Синхронный генератор, его сопротивления, формулы для расчета индуктивного и активного сопротивлений в именованных и относительных единицах для определения токов КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Для расчета токов короткого замыкания в синхронном генераторе необходимо знать его активное и реактивное сопротивления. Активное сопротивление представляет собой суммарное сопротивление элементов, которые обладают активным сопротивлением, таких как обмотки статора и ротора. Реактивное сопротивление (реактивное сопротивление статора и ротора) представляет собой импедансные элементы, которые обусловлены индуктивностью обмоток.</p><p>Формулы для расчета активного и реактивного сопротивлений в синхронном генераторе можно представить следующим образом:</p><ol><li>Активное сопротивление в именованных единицах:\\nРассчитывается как сумма активного сопротивления статора (R_stator) и активного сопротивления ротора (R_rotor).</li></ol><p>Активное сопротивление (R_total) = R_stator + R_rotor</p><ol start=\\"2\\"><li>Реактивное сопротивление в именованных единицах:\\nРеактивное сопротивление статора (X_stator) и реактивное сопротивление ротора (X_rotor) также суммируются.</li></ol><p>Реактивное сопротивление (X_total) = X_stator + X_rotor</p><ol start=\\"3\\"><li>Активное сопротивление в относительных единицах:\\nАктивное сопротивление в относительных единицах (X_d) рассчитывается на основе реактивной мощности (Q_d) и активной мощности (P_d) генератора.</li></ol><p>X_d = Q_d / (3 * I^2)</p><p>где I - фазный ток генератора.</p><ol start=\\"4\\"><li>Реактивное сопротивление в относительных единицах:\\nРеактивное сопротивление в относительных единицах (R_d) рассчитывается на основе активной мощности (P_d) и полного напряжения (U_d) генератора.</li></ol><p>R_d = P_d / (3 * U_d^2)</p><p>После определения активного и реактивного сопротивлений, можно использовать эти значения для расчета токов короткого замыкания в синхронном генераторе при заданных условиях короткого замыкания.</p></div>"],["Силовой трансформатор, его сопротивления, расчетные формулы для определения индуктивных и активных сопротивлений в именованных и относительных единицах для определения токов КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Для расчета токов короткого замыкания в силовом трансформаторе необходимо знать его активное и реактивное сопротивления. Активное сопротивление представляет собой сопротивление проводников и других элементов трансформатора, которые обладают активным сопротивлением. Реактивное сопротивление (реактивное сопротивление обмоток) обусловлено индуктивностью обмоток трансформатора.</p><p>Для определения активных и реактивных сопротивлений силового трансформатора используются следующие расчетные формулы:</p><ol><li>Активное сопротивление в именованных единицах:\\nАктивное сопротивление (R_t) в именованных единицах рассчитывается, как сумма активных сопротивлений обмоток статора и ротора (если это трансформатор с вращающимся ротором).</li></ol><p>R_t = R_stator + R_rotor</p><ol start=\\"2\\"><li>Реактивное сопротивление в именованных единицах:\\nРеактивное сопротивление (X_t) в именованных единицах также рассчитывается как сумма реактивных сопротивлений обмоток статора и ротора (если применимо).</li></ol><p>X_t = X_stator + X_rotor</p><ol start=\\"3\\"><li>Активное сопротивление в относительных единицах:\\nАктивное сопротивление в относительных единицах (R\') рассчитывается, исходя из активной мощности (P_t) и короткозамкнутого тока (I_sc) трансформатора.</li></ol><p>R\' = P_t / (3 * I_sc^2)</p><p>где I_sc - короткозамкнутый ток трансформатора.</p><ol start=\\"4\\"><li>Реактивное сопротивление в относительных единицах:\\nРеактивное сопротивление в относительных единицах (X\') рассчитывается, исходя из реактивной мощности (Q_t) и короткозамкнутого тока (I_sc) трансформатора.</li></ol><p>X\' = Q_t / (3 * I_sc^2)</p><p>После определения активных и реактивных сопротивлений силового трансформатора, можно использовать эти значения для расчета токов короткого замыкания при заданных условиях короткого замыкания в электрической системе.</p></div>"],["Сопротивления ЛЭП. Физическое объяснение. Формулы для расчета индуктивных и активных сопротивлений для определения токов КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Сопротивления линий электропередачи (ЛЭП) обусловлены физическими характеристиками проводников и структуры сети. Основными компонентами сопротивления ЛЭП являются активное сопротивление (R) и реактивное сопротивление (X).</p><ol><li><p>Активное сопротивление (R): Активное сопротивление определяется сопротивлением проводников ЛЭП, а также потерями энергии в материале проводников и соединениях. Сопротивление обусловлено внутренними потерями и является причиной тепловых потерь в системе.</p></li><li><p>Реактивное сопротивление (X): Реактивное сопротивление обусловлено индуктивностью ЛЭП. Это явление возникает из-за магнитного поля, которое окружает проводники и приводит к переносу энергии между фазами и землей. Реактивное сопротивление не вызывает потерь активной мощности, но влияет на переток реактивной мощности.</p></li></ol><p>Формулы для расчета активных и реактивных сопротивлений ЛЭП:</p><ol><li>Активное сопротивление (R) для трехфазной ЛЭП:\\nR = (ρ * L) / S</li></ol><p>где:\\nρ - удельное сопротивление материала проводника,\\nL - длина ЛЭП, и\\nS - площадь поперечного сечения проводника.</p><ol start=\\"2\\"><li>Реактивное сопротивление (X) для трехфазной ЛЭП:\\nX = 2 * π * f * L * μ</li></ol><p>где:\\nf - частота системы (герц),\\nL - длина ЛЭП, и\\nμ - магнитная проницаемость окружающей среды.</p><p>При расчете токов короткого замыкания (КЗ) в ЛЭП используются значения активных и реактивных сопротивлений для определения силы тока и потерь мощности в случае КЗ в сети. Это позволяет эффективно проектировать и защищать систему электроснабжения от аварийных ситуаций.</p></div>"],["Расчет сопротивлений токоограничивающего реактора (одинарного и сдвоенного) в именованных и относительных единицах для определения токов КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Токоограничивающий реактор (или реактор ограничения тока) используется для ограничения тока короткого замыкания в системе электроснабжения. Он представляет собой индуктивное устройство, которое ограничивает ток при коротком замыкании, что помогает защитить оборудование от повреждений и обеспечивает стабильную работу системы.</p><ol><li>Одинарный токоограничивающий реактор:\\nДля одинарного токоограничивающего реактора можно использовать следующие формулы для расчета сопротивлений в именованных и относительных единицах:</li></ol><p>а) Активное сопротивление (R) в именованных единицах:\\nR = U_nom^2 / (I_sc_nom * R_sc)</p><p>б) Реактивное сопротивление (X) в именованных единицах:\\nX = U_nom^2 / (I_sc_nom * X_sc)</p><p>в) Относительное активное сопротивление (R\') в относительных единицах:\\nR\' = 1 / (I_sc_nom * X_d)</p><p>г) Относительное реактивное сопротивление (X\') в относительных единицах:\\nX\' = 1 / (I_sc_nom * R_d)</p><ol start=\\"2\\"><li>Сдвоенный токоограничивающий реактор:\\nДля сдвоенного токоограничивающего реактора можно использовать следующие формулы для расчета сопротивлений в именованных и относительных единицах:</li></ol><p>а) Активное сопротивление (R) в именованных единицах:\\nR = U_nom^2 / (2 * I_sc_nom * R_sc)</p><p>б) Реактивное сопротивление (X) в именованных единицах:\\nX = U_nom^2 / (2 * I_sc_nom * X_sc)</p><p>в) Относительное активное сопротивление (R\') в относительных единицах:\\nR\' = 1 / (2 * I_sc_nom * X_d)</p><p>г) Относительное реактивное сопротивление (X\') в относительных единицах:\\nX\' = 1 / (2 * I_sc_nom * R_d)</p><p>где:\\nU_nom - номинальное напряжение системы,\\nI_sc_nom - номинальный ток короткого замыкания,\\nR_sc - активное сопротивление короткого замыкания,\\nX_sc - реактивное сопротивление короткого замыкания,\\nX_d - относительное реактивное сопротивление генератора,\\nR_d - относительное активное сопротивление генератора.</p><p>Эти формулы позволяют определить значения сопротивлений для токоограничивающего реактора, которые обеспечат эффективное ограничение тока короткого замыкания в системе электроснабжения.</p></div>"],["Принципы составления расчетной схемы и схемы замещения электрической сети.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Принципы составления расчетной схемы и схемы замещения электрической сети включают в себя следующие этапы:</p><ol><li>Расчетная схема (графическая схема):</li></ol><ul><li>На первом этапе проводится анализ фактической схемы электрической сети, включая все подключенные элементы, такие как генераторы, трансформаторы, линии передачи, распределительные устройства и нагрузки. При этом учитываются все соединения и параметры каждого элемента.</li><li>На втором этапе создается расчетная схема, которая представляет собой упрощенное графическое представление реальной электрической сети. В расчетной схеме используются стандартные символы для обозначения каждого элемента, что делает схему более компактной и понятной.</li><li>Расчетная схема помогает визуализировать структуру электрической сети и определить порядок подключения элементов, что упрощает процесс расчетов и анализа.</li></ul><ol start=\\"2\\"><li>Схема замещения (эквивалентная схема):</li></ol><ul><li>Для удобства анализа и расчетов, реальная сложная сеть заменяется более простой схемой замещения, которая состоит из эквивалентных элементов с определенными параметрами. Эти параметры определяются таким образом, чтобы эквивалентная схема вела себя аналогично реальной сети при заданных условиях.</li><li>Схема замещения может быть линейной (состоять из резисторов, индуктивностей и емкостей) или нелинейной (с использованием более сложных моделей элементов).</li><li>Для составления схемы замещения проводится анализ каждой части реальной сети, выделяются наиболее значимые параметры и создается эквивалентная модель для каждого элемента.</li></ul><p>Это позволяет упростить расчеты и анализ электрической сети, сократить время и ресурсы, необходимые для проведения различных исследований, а также облегчает понимание поведения системы при различных условиях и возмущениях.</p></div>"],["Преобразование схем замещения для определения токов КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Для определения токов короткого замыкания (КЗ) в системе электроснабжения применяют метод преобразования схемы замещения. Этот метод позволяет перевести исходную эквивалентную схему замещения в специальную схему КЗ, которая учитывает короткие замыкания в различных точках сети.</p><p>Процесс преобразования схемы замещения для определения токов КЗ включает следующие шаги:</p><ol><li><p>Изначальная эквивалентная схема: На первом шаге имеется эквивалентная схема замещения, которая является упрощенной моделью реальной электрической сети.</p></li><li><p>Идентификация точек короткого замыкания: Далее определяются точки короткого замыкания в сети. Это могут быть точки соединения различных элементов сети, такие как трансформаторы, линии передачи или распределительные устройства, в которых возможно возникновение КЗ.</p></li><li><p>Включение короткого замыкания: В каждой точке КЗ вносятся изменения в эквивалентную схему, чтобы учесть короткое замыкание. Обычно вводятся дополнительные элементы, представляющие собой низкое сопротивление или нулевое сопротивление, чтобы моделировать КЗ в этой точке.</p></li><li><p>Построение схемы КЗ: После внесения изменений получается специальная схема КЗ, которая представляет собой модель системы с учетом коротких замыканий в заданных точках.</p></li><li><p>Расчет токов КЗ: После построения схемы КЗ можно проводить расчет токов короткого замыкания в различных участках сети. Эти токи КЗ могут быть использованы для проектирования защитных устройств, определения нагрузок на оборудование и оценки надежности системы.</p></li></ol><p>Примечание: Процесс преобразования схемы замещения может быть более сложным для сложных систем электроснабжения с большим количеством точек КЗ и разветвлений. В таких случаях могут применяться специальные программы для автоматизации расчетов и анализа токов КЗ.</p></div>"],["Что такое сверхпереходной, переходной и установившийся ток короткого замыкания.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Сверхпереходной, переходной и установившийся токи короткого замыкания относятся к различным этапам электромагнитных переходных процессов, которые происходят при возникновении короткого замыкания в электрической системе. Каждый из этих токов характеризуется своим временем действия и амплитудой.</p><ol><li><p>Сверхпереходный ток короткого замыкания:\\nСверхпереходный ток является самым коротким по времени действия и имеет самую большую амплитуду. Он возникает практически мгновенно в момент возникновения короткого замыкания, когда контакты или провода замыкаются. Сверхпереходный ток характеризуется очень высокими значениями, которые могут быть десятки и даже сотни раз выше номинального тока системы.</p></li><li><p>Переходный ток короткого замыкания:\\nПереходный ток продолжается после сверхпереходного тока и обычно длится несколько периодов сетевой частоты (обычно несколько миллисекунд для сетей с частотой 50 Гц). Он быстро уменьшается до установившегося значения. Переходный ток вызывается индуктивными эффектами и сопротивлениями в системе. Его амплитуда и время действия зависят от параметров системы и величины короткого замыкания.</p></li><li><p>Установившийся ток короткого замыкания:\\nУстановившийся ток является последним этапом переходных процессов и характеризуется стабильным значением тока, которое достигается после исчезновения переходных процессов. Он определяется резистивными и индуктивными компонентами системы и зависит от свойств генераторов, трансформаторов, линий передачи и других элементов. Установившийся ток определяет величину нагрузки на оборудование и используется для выбора и настройки защитных устройств.</p></li></ol><p>Важно отметить, что все эти токи являются временными, и их значения и характеристики могут существенно различаться в зависимости от параметров системы и условий короткого замыкания. Правильное определение этих токов и их учет при проектировании и эксплуатации системы электроснабжения существенно влияет на безопасность и надежность работы системы.</p></div>"],["Что такое ударный ток короткого замыкания и как его вычислить.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Ударный ток короткого замыкания (также известный как ток первого удара) - это сверхпереходный ток, который возникает в момент возникновения короткого замыкания в электрической системе. Этот ток характеризуется очень высокими значениями, которые могут быть десятки и даже сотни раз выше номинального тока системы. Ударный ток имеет кратковременный характер и длится всего несколько миллисекунд.</p><p>Вычисление ударного тока короткого замыкания включает в себя следующие шаги:</p><ol><li><p>Определение параметров системы: Первым шагом необходимо определить параметры системы, включая номинальное напряжение системы (U) и номинальный ток (I). Также необходимо знать параметры генераторов, трансформаторов, линий передачи и других элементов системы.</p></li><li><p>Определение коэффициента короткого замыкания: Коэффициент короткого замыкания (обычно обозначается как k) представляет собой отношение ударного тока к номинальному току и характеризует мощность короткого замыкания. Коэффициент короткого замыкания зависит от параметров системы и места возникновения короткого замыкания.</p></li><li><p>Вычисление ударного тока: Ударный ток короткого замыкания (Iк) вычисляется по формуле:\\nIк = k * I</p><p>Где:\\nIк - ударный ток короткого замыкания (Ампер),\\nk - коэффициент короткого замыкания,\\nI - номинальный ток системы (Ампер).</p></li><li><p>Учет времени действия: Ударный ток является кратковременным, и его длительность обычно не превышает нескольких миллисекунд. При расчетах ударного тока для защитных устройств и оборудования необходимо учитывать время действия этих устройств, чтобы выбрать подходящие параметры защиты.</p></li></ol><p>Вычисление ударного тока короткого замыкания является важной задачей при проектировании и эксплуатации систем электроснабжения, так как он позволяет определить нагрузки на оборудование и выбрать соответствующие параметры защиты для обеспечения безопасности и надежности работы системы.</p></div>"],["Как определить ток трехфазного короткого замыкания на зажимах НН силового понижающего трансформатора при питании его от системы бесконечной мощности (сопротивление системы равно нулю).","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Для определения тока трехфазного короткого замыкания на зажимах НН (низкого напряжения) силового понижающего трансформатора при его питании от системы бесконечной мощности (сопротивление системы равно нулю) можно воспользоваться простой формулой, основанной на отношении напряжения к току в трехфазной системе.</p><p>Допустим, у нас есть трехфазный силовой трансформатор с номинальным напряжением на зажимах НН и номинальным током. При коротком замыкании на зажимах НН, ток будет максимальным.</p><p>Формула для расчета максимального тока короткого замыкания (Iкз) на зажимах НН силового трансформатора при питании от системы бесконечной мощности:\\n<span class=\\"math math-inline\\"><span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><mi>I</mi><mtext>кз</mtext><mo>=</mo><mfrac><msub><mi>U</mi><mrow><mtext>ном</mtext><mi mathvariant=\\"normal\\">.</mi></mrow></msub><msub><mi>Z</mi><mtext>тр</mtext></msub></mfrac></mrow><annotation encoding=\\"application/x-tex\\">Iкз = \\\\frac{{U_{ном.}}}{{Z_{тр}}}</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height: 0.6833em;\\"></span><span class=\\"mord mathnormal\\" style=\\"margin-right: 0.07847em;\\">I</span><span class=\\"mord cyrillic_fallback\\">кз</span><span class=\\"mspace\\" style=\\"margin-right: 0.2778em;\\"></span><span class=\\"mrel\\">=</span><span class=\\"mspace\\" style=\\"margin-right: 0.2778em;\\"></span></span><span class=\\"base\\"><span class=\\"strut\\" style=\\"height: 1.4308em; vertical-align: -0.5423em;\\"></span><span class=\\"mord\\"><span class=\\"mopen nulldelimiter\\"></span><span class=\\"mfrac\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.8884em;\\"><span style=\\"top: -2.655em;\\"><span class=\\"pstrut\\" style=\\"height: 3em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mathnormal mtight\\" style=\\"margin-right: 0.07153em;\\">Z</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.1645em;\\"><span style=\\"top: -2.357em; margin-left: -0.0715em; margin-right: 0.0714em;\\"><span class=\\"pstrut\\" style=\\"height: 2.5em;\\"></span><span class=\\"sizing reset-size3 size1 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord cyrillic_fallback mtight\\">тр</span></span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.2819em;\\"><span></span></span></span></span></span></span></span></span></span></span><span style=\\"top: -3.23em;\\"><span class=\\"pstrut\\" style=\\"height: 3em;\\"></span><span class=\\"frac-line\\" style=\\"border-bottom-width: 0.04em;\\"></span></span><span style=\\"top: -3.4101em;\\"><span class=\\"pstrut\\" style=\\"height: 3em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord mathnormal mtight\\" style=\\"margin-right: 0.10903em;\\">U</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.1645em;\\"><span style=\\"top: -2.357em; margin-left: -0.109em; margin-right: 0.0714em;\\"><span class=\\"pstrut\\" style=\\"height: 2.5em;\\"></span><span class=\\"sizing reset-size3 size1 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord cyrillic_fallback mtight\\">ном</span><span class=\\"mord mtight\\">.</span></span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.143em;\\"><span></span></span></span></span></span></span></span></span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.5423em;\\"><span></span></span></span></span></span><span class=\\"mclose nulldelimiter\\"></span></span></span></span></span></span></p><p>Где:</p><ul><li>Iкз - максимальный ток короткого замыкания на зажимах НН (Ампер),</li><li>U_{ном.} - номинальное напряжение на зажимах НН силового трансформатора (Вольт),</li><li>Z_{тр} - полное комплексное сопротивление силового трансформатора вторичной обмотки, представленное в относительных единицах.</li></ul><p>Значение <span class=\\"math math-inline\\"><span class=\\"katex\\"><span class=\\"katex-mathml\\"><math xmlns=\\"http://www.w3.org/1998/Math/MathML\\"><semantics><mrow><msub><mi>Z</mi><mtext>тр</mtext></msub></mrow><annotation encoding=\\"application/x-tex\\">Z_{тр}</annotation></semantics></math></span><span class=\\"katex-html\\" aria-hidden=\\"true\\"><span class=\\"base\\"><span class=\\"strut\\" style=\\"height: 0.9694em; vertical-align: -0.2861em;\\"></span><span class=\\"mord\\"><span class=\\"mord mathnormal\\" style=\\"margin-right: 0.07153em;\\">Z</span><span class=\\"msupsub\\"><span class=\\"vlist-t vlist-t2\\"><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.1514em;\\"><span style=\\"top: -2.55em; margin-left: -0.0715em; margin-right: 0.05em;\\"><span class=\\"pstrut\\" style=\\"height: 2.7em;\\"></span><span class=\\"sizing reset-size6 size3 mtight\\"><span class=\\"mord mtight\\"><span class=\\"mord cyrillic_fallback mtight\\">тр</span></span></span></span></span><span class=\\"vlist-s\\">​</span></span><span class=\\"vlist-r\\"><span class=\\"vlist\\" style=\\"height: 0.2861em;\\"><span></span></span></span></span></span></span></span></span></span></span> можно получить из данных трансформатора или его эквивалентной схемы. Обычно оно выражается в относительных единицах на одну вторичную обмотку трансформатора.</p><p>Для расчета максимального тока короткого замыкания необходимо знать номинальное напряжение и сопротивление трансформатора на зажимах НН. Эти значения указываются в паспорте трансформатора или его технической документации.</p></div>"],["Порядок расчета тока трехфазного КЗ для выбора электрических аппаратов и токоведущих частей.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Для выбора электрических аппаратов и токоведущих частей при возникновении трехфазного короткого замыкания (КЗ) необходимо провести расчет тока короткого замыкания. Этот расчет включает следующие этапы:</p><ol><li><p>Определение параметров системы:</p><ul><li>Номинальное напряжение системы (U_nom) - напряжение, на котором работает система.</li><li>Коэффициент короткого замыкания (k) - отношение тока короткого замыкания к номинальному току системы. Этот коэффициент зависит от параметров системы и места возникновения короткого замыкания.</li><li>Точка короткого замыкания - место в системе, где происходит КЗ.</li></ul></li><li><p>Вычисление тока короткого замыкания:\\nТок короткого замыкания (I_kz) рассчитывается по следующей формуле:\\nI_kz = k * I_nom</p><p>Где:\\nI_kz - ток короткого замыкания (Ампер),\\nI_nom - номинальный ток системы (Ампер),\\nk - коэффициент короткого замыкания.</p></li><li><p>Определение времени действия защиты:\\nПри выборе электрических аппаратов и токоведущих частей, необходимо учитывать время действия защитных устройств. Величина тока короткого замыкания определяет необходимость выбора аппаратов и частей с определенным классом прерывания тока (например, ультрабыстродействующие или быстродействующие аппараты).</p></li><li><p>Выбор соответствующих аппаратов и токоведущих частей:\\nНа основе рассчитанного значения тока короткого замыкания и учитывая время действия защитных устройств, производится выбор электрических аппаратов (автоматических выключателей, контакторов, предохранителей и т.д.) и токоведущих частей (кабелей, шинопроводов и т.д.) с необходимыми техническими характеристиками для обеспечения безопасности и надежности работы системы.</p></li></ol><p>Расчет тока короткого замыкания является важным шагом при проектировании и эксплуатации электрических систем, так как позволяет правильно подобрать оборудование и токоведущие части для обеспечения безопасности и стабильности работы системы при возникновении короткого замыкания.</p></div>"],["Порядок расчета тока трехфазного КЗ для выбора уставок релейной защиты.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Для выбора уставок релейной защиты при трехфазном коротком замыкании (КЗ) необходимо провести расчет тока короткого замыкания. Этот расчет включает следующие этапы:</p><ol><li><p>Определение параметров системы:</p><ul><li>Номинальное напряжение системы (U_nom) - напряжение, на котором работает система.</li><li>Коэффициент короткого замыкания (k) - отношение тока короткого замыкания к номинальному току системы. Этот коэффициент зависит от параметров системы и места возникновения короткого замыкания.</li><li>Точка короткого замыкания - место в системе, где происходит КЗ.</li></ul></li><li><p>Вычисление тока короткого замыкания:\\nТок короткого замыкания (I_kz) рассчитывается по следующей формуле:\\nI_kz = k * I_nom</p><p>Где:\\nI_kz - ток короткого замыкания (Ампер),\\nI_nom - номинальный ток системы (Ампер),\\nk - коэффициент короткого замыкания.</p></li><li><p>Определение времени действия защиты:\\nПосле расчета тока короткого замыкания, необходимо определить время действия релейной защиты для различных уровней тока. Время действия защиты должно быть достаточным для срабатывания и отключения электрических аппаратов и токоведущих частей в случае КЗ.</p></li><li><p>Выбор уставок релейной защиты:\\nНа основе рассчитанного значения тока короткого замыкания и учитывая время действия защиты, производится выбор уставок релейной защиты. Уставки релейной защиты устанавливаются таким образом, чтобы реле срабатывало в заданных временных рамках и обеспечивало надежную защиту электрической системы от повреждений, вызванных КЗ.</p></li></ol><p>Расчет тока короткого замыкания и выбор уставок релейной защиты важны для обеспечения безопасности и стабильной работы электрической системы, так как позволяют своевременно обнаруживать и устранять аварийные ситуации, такие как короткие замыкания. Это особенно важно для поддержания надежности работы системы и предотвращения повреждений оборудования.</p></div>"],["Правило эквивалентности прямой последовательности. Комплексные схемы замещения для несимметричных КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Правило эквивалентности прямой последовательности - это правило, которое позволяет заменить несимметричное трехфазное короткое замыкание (КЗ) в электрической системе эквивалентной симметричной системой. Это упрощает анализ и расчет переходных процессов в системе при КЗ.</p><p>Когда происходит несимметричное трехфазное КЗ, то токи короткого замыкания в каждой из фаз будут различными. Чтобы заменить такую несимметричную систему эквивалентной симметричной системой, используется правило эквивалентности прямой последовательности.</p><p>Суть правила эквивалентности прямой последовательности заключается в следующем:</p><ol><li><p>Найдите амплитуды симметричных составляющих токов КЗ:</p><ul><li>I₀ - амплитуда нулевой последовательности.</li><li>I₁ - амплитуда прямой (положительной) последовательности.</li><li>I₂ - амплитуда обратной (отрицательной) последовательности.</li></ul></li><li><p>Постройте эквивалентную симметричную схему:\\nЗамените несимметричное трехфазное КЗ эквивалентной симметричной системой, которая будет состоять из трех параллельных ветвей - для нулевой, прямой и обратной последовательности. В каждой ветви сопротивление будет равно нулю (поскольку сопротивление считается симметричным), а амплитуды токов будут равны найденным значениям I₀, I₁ и I₂.</p></li><li><p>Вычислите эквивалентное сопротивление нагрузки:\\nЭквивалентное сопротивление нагрузки в эквивалентной симметричной системе будет равно номинальному сопротивлению нагрузки в исходной системе. Это предполагает, что расчет проводится на момент короткого замыкания, когда токи и напряжения имеют относительно небольшие отклонения.</p></li></ol><p>После применения правила эквивалентности прямой последовательности, можно анализировать и рассчитывать переходные процессы в системе с помощью стандартных методов и формул для симметричных систем. Это облегчает понимание поведения системы при несимметричных КЗ и позволяет принимать соответствующие меры по защите и предотвращению повреждений оборудования.</p></div>"],["Влияние синхронных и асинхронных двигателей на токи КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Синхронные и асинхронные двигатели оказывают различное влияние на токи короткого замыкания (КЗ) в электрической системе.</p><ol><li><p>Влияние синхронных двигателей на токи КЗ:\\nСинхронные двигатели являются индуктивными нагрузками, что означает, что они создают индуктивное сопротивление в электрической системе. При коротком замыкании в системе с синхронными двигателями, эти двигатели могут привести к увеличению тока КЗ. Это происходит из-за индуктивной реакции синхронных двигателей, которая приводит к повышению тока короткого замыкания.</p></li><li><p>Влияние асинхронных двигателей на токи КЗ:\\nАсинхронные двигатели, в отличие от синхронных, являются самоиндуктивными нагрузками. Вследствие этого, они создают некоторое индуктивное сопротивление, но также обладают и активным сопротивлением. При коротком замыкании асинхронные двигатели также вносят свой вклад в токи КЗ. В этом случае, как активное сопротивление, так и индуктивность двигателей могут влиять на характер тока КЗ в системе.</p></li></ol><p>Итак, как синхронные, так и асинхронные двигатели влияют на токи КЗ в электрической системе, и это важно учитывать при проектировании и расчетах электрических систем, чтобы обеспечить безопасную и стабильную работу системы. Релейная защита и другие меры контроля и защиты должны быть настроены соответствующим образом, чтобы обеспечить надежную защиту от КЗ при наличии различных типов двигателей в системе.</p></div>"],["Практический порядок расчета несимметричных КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Практический порядок расчета несимметричных коротких замыканий (КЗ) включает следующие шаги:</p><ol><li><p>Сбор и анализ данных:</p><ul><li>Соберите информацию о структуре электрической системы, включая параметры трансформаторов, генераторов, линий электропередачи, распределительных устройств и нагрузок.</li><li>Определите номинальные значения напряжения и тока для каждого элемента системы.</li></ul></li><li><p>Определение типов КЗ:</p><ul><li>Определите типы коротких замыканий, которые могут произойти в системе (трехфазное КЗ, двухфазное КЗ, однофазное КЗ, замыкание на землю и т. д.).</li></ul></li><li><p>Расчет асимметричных составляющих:</p><ul><li>Используя данные о системе и типе КЗ, определите асимметричные составляющие токов и напряжений для каждого элемента системы.</li><li>Расчеты асимметричных составляющих можно выполнять с помощью методов симметричных компонентов или методов симуляции переходных процессов.</li></ul></li><li><p>Расчет токов КЗ:</p><ul><li>Используя значения асимметричных составляющих токов и напряжений, определите токи КЗ для каждого типа короткого замыкания.</li><li>Рассчитайте амплитуды токов КЗ и их фазные углы относительно номинальных фазных углов.</li></ul></li><li><p>Оценка влияния:</p><ul><li>Оцените влияние токов КЗ на систему, включая определение величины и длительности токов, а также их воздействие на оборудование и устройства защиты.</li></ul></li><li><p>Принятие мер по защите и предотвращению КЗ:</p><ul><li>Основываясь на результаты расчетов и оценок, разработайте и настройте соответствующие системы релейной защиты, автоматики и других мер для предотвращения и быстрого устранения коротких замыканий.</li></ul></li><li><p>Проверка результатов:</p><ul><li>Проведите проверку результатов расчетов и защитных мер на специальных программных комплексах и в лабораторных условиях.</li></ul></li></ol><p>Расчет несимметричных коротких замыканий - это сложная задача, и в реальной практике она выполняется с использованием специализированных программных средств и методов, чтобы учесть все особенности электрической системы и обеспечить её безопасную и надежную работу.</p></div>"],["Влияние АРВ на переходной процесс синхронной машины.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>АРВ (автоматические регуляторы напряжения) оказывают значительное влияние на переходные процессы синхронных машин в электрических системах. Эти устройства используются для поддержания стабильности напряжения на выходе генератора в условиях различных изменений нагрузки или других факторов, которые могут повлиять на работу синхронной машины.</p><p>Вот как АРВ влияют на переходные процессы синхронной машины:</p><ol><li><p>Подавление переходных процессов: АРВ способен реагировать на резкие изменения нагрузки или внешние возмущения и быстро подстраивать уровень возбуждения синхронной машины, чтобы минимизировать переходные процессы и поддерживать стабильное напряжение на выходе.</p></li><li><p>Устранение перерегулирования: АРВ позволяет предотвратить перерегулирование генератора, что может произойти в ответ на резкое уменьшение нагрузки. Благодаря быстрой реакции АРВ, генератор может поддерживать напряжение на стабильном уровне и избежать излишнего возрастания напряжения.</p></li><li><p>Подавление колебаний: В некоторых случаях, возникающие колебания напряжения могут вызывать резонансные эффекты и нестабильную работу системы. АРВ способен подавить эти колебания и предотвратить возможные аварийные ситуации.</p></li><li><p>Управление реактивной мощностью: АРВ также может регулировать уровень реактивной мощности генератора. Это важно для поддержания баланса между активной и реактивной мощностью в электрической сети и для обеспечения оптимальной эффективности работы генератора.</p></li><li><p>Повышение стабильности системы: Благодаря АРВ, стабильность работы синхронной машины и всей электрической системы значительно повышается. Это важно для обеспечения надежной и безаварийной работы электроэнергетической системы.</p></li></ol><p>В целом, АРВ играют важную роль в обеспечении надежности, стабильности и эффективности работы синхронных машин и электрических систем в целом. Они помогают снизить влияние переходных процессов и обеспечивают нормальную работу генераторов и оборудования энергосистемы при различных условиях эксплуатации.</p></div>"],["Метод типовых кривых при расчете токов КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Метод типовых кривых - это один из методов расчета токов короткого замыкания (токов КЗ), который широко применяется в электроэнергетике и электротехнике для оценки переходных процессов в электрических сетях при коротких замыканиях.</p><p>Основные этапы расчета токов КЗ методом типовых кривых:</p><ol><li><p>Исходные данные: На первом этапе определяются характеристики электрической сети, включая сопротивления, реактивности и емкости различных элементов системы (генераторы, трансформаторы, линии передачи, нагрузки и т.д.). Также учитываются параметры релейной защиты, включая характеристики расцепителей и реле короткого замыкания.</p></li><li><p>Построение типовых кривых: Далее строятся типовые кривые тока КЗ для различных участков системы. Типовые кривые представляют собой графики зависимости тока КЗ от времени. Эти кривые строятся на основе предположений о характере изменения тока КЗ в зависимости от параметров сети и защитных устройств.</p></li><li><p>Определение параметров КЗ: На основе характеристик сети и типовых кривых производится определение параметров короткого замыкания, таких как амплитуда тока, время продолжительности, угол фазы и др.</p></li><li><p>Определение тока КЗ: Для конкретных условий короткого замыкания (например, при заданных параметрах сети и расцепителя) производится определение тока КЗ с помощью интерполяции или экстраполяции на основе типовых кривых.</p></li><li><p>Проверка надежности защиты: Последний этап - проверка надежности работы релейной защиты на основе рассчитанных значений токов КЗ. Если защита сработает в требуемых пределах времени и тока, то система считается защищенной от коротких замыканий.</p></li></ol><p>Метод типовых кривых позволяет быстро и относительно точно рассчитывать токи КЗ в различных точках электрической сети. Однако следует помнить, что результаты расчетов должны быть проверены и скорректированы на основе реальных данных и практических испытаний системы защиты. Это позволяет обеспечить надежную защиту электрической сети и оборудования от коротких замыканий.</p></div>"]],"ЭЛЕКТРОМЕХАНИЧЕСКИЕ ПЕРЕХОДНЫЕ ПРОЦЕССЫ":[["Понятие статической устойчивости электрической системы.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Статическая устойчивость электрической системы - это свойство системы сохранять равновесие и стабильность после возникновения внешних возмущений или изменений в работе элементов системы. В контексте электроэнергетики, статическая устойчивость означает способность электрической системы поддерживать устойчивые значения напряжения и частоты при возникновении различных возмущений, таких как изменение нагрузки, короткие замыкания, включение или отключение генераторов и других элементов системы.</p><p>Для обеспечения статической устойчивости электрической системы необходимо управлять работой генераторов, регулировать мощность и реактивность нагрузки, а также применять автоматические регуляторы напряжения и частоты. Если система обладает статической устойчивостью, то она способна восстанавливать установившееся равновесие и стабильно функционировать даже при возникновении некоторых возмущений.</p><p>Статическая устойчивость является важным свойством электрических систем, так как она обеспечивает надежную и стабильную работу всей системы, предотвращает возникновение аварийных ситуаций, а также обеспечивает возможность эффективной регулировки нагрузки и генерации для удовлетворения потребностей пользователей в электроэнергии.</p></div>"],["Критерии статической устойчивости нагрузки.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Критерии статической устойчивости нагрузки - это условия, которые определяют, насколько надежно и стабильно электрическая система справляется с изменениями в нагрузке и обеспечивает равновесие при различных режимах работы. Важно, чтобы система оставалась устойчивой и не теряла установившееся равновесие даже при изменениях в нагрузке, чтобы предотвращать возникновение аварийных ситуаций и обеспечивать нормальное функционирование энергосистемы.</p><p>Основными критериями статической устойчивости нагрузки являются:</p><ol><li><p>Уровень напряжения: При увеличении нагрузки напряжение в системе может уменьшиться. Если напряжение станет ниже допустимых значений, это может привести к некорректной работе электрооборудования и даже к его выходу из строя.</p></li><li><p>Угол сдвига фаз: Увеличение нагрузки может вызвать изменение угла сдвига фаз между током и напряжением в системе. При слишком большом сдвиге фаз система может потерять устойчивость и стать нестабильной.</p></li><li><p>Мощность нагрузки: При увеличении мощности нагрузки возрастает риск перегрузки системы и возникновения токов короткого замыкания, что может привести к аварийным ситуациям.</p></li><li><p>Коэффициент мощности: Если коэффициент мощности нагрузки слишком низкий (присутствует большое количество реактивной мощности), это может привести к неправильной работе системы и ухудшению ее устойчивости.</p></li></ol><p>Для обеспечения статической устойчивости нагрузки необходимо проводить соответствующий анализ и расчеты, а также использовать автоматические регуляторы напряжения и другие устройства управления для поддержания нормальных значений напряжения и угла сдвига фаз в системе.</p></div>"],["Нагрузочно-угловая характеристика синхронного генератора, работающего на мощную энергосистему.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Нагрузочно-угловая характеристика синхронного генератора - это график, который показывает зависимость угла сдвига фаз между напряжением генератора и током нагрузки от величины нагрузки на генераторе при постоянной частоте вращения ротора. Эта характеристика используется для анализа работы синхронного генератора в мощной энергосистеме, когда генератор работает в синхронном режиме и поддерживает стабильную частоту в энергосистеме.</p><p>На нагрузочно-угловой характеристике синхронного генератора присутствуют два основных режима работы:</p><ol><li><p>Режим возбуждения: В этом режиме генератор еще не подключен к энергосистеме и не генерирует электрическую мощность. Ток возбуждения подается на обмотки возбуждения генератора, и на характеристике это обозначается точкой начала координат (0,0). При увеличении тока возбуждения угол сдвига фаз также увеличивается, но генератор еще не готов к передаче активной мощности.</p></li><li><p>Режим работы на нагрузке: Когда генератор подключается к мощной энергосистеме и начинает генерировать активную мощность, точка на графике движется от начала координат вправо. При увеличении нагрузки, ток генератора увеличивается, и его угол сдвига фаз также увеличивается. Основной целью в этом режиме является установление устойчивого значения угла сдвига фаз, чтобы обеспечить стабильную работу генератора и поддерживать частоту энергосистемы на нужном уровне.</p></li></ol><p>Нагрузочно-угловая характеристика позволяет оценить работу синхронного генератора при различных условиях нагрузки и определить его устойчивость в мощной энергосистеме. Это важный инструмент для проектирования, эксплуатации и защиты электростанций и энергосистем.</p></div>"],["Понятие динамической устойчивости синхронного, генератора и ее анализ с помощью правила площадей.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Динамическая устойчивость синхронного генератора - это способность генератора справляться с переходными процессами и восстанавливать установившийся режим работы после возникновения возмущений или изменений в системе электроснабжения. Она характеризует степень устойчивости генератора к изменениям нагрузки или внешним возмущениям, таким как короткие замыкания или отключения других генераторов.</p><p>Анализ динамической устойчивости синхронного генератора часто выполняется с помощью правила площадей. Это графический метод, который позволяет оценить стабильность и устойчивость генератора, а также определить его способность к справлению с переходными процессами.</p><p>Принцип работы правила площадей заключается в сравнении площадей графиков токов и напряжений в различных точках переходных процессов. Основные шаги для анализа динамической устойчивости с помощью правила площадей:</p><ol><li><p>Построение графиков: Сначала строятся графики токов и напряжений генератора в различных точках переходных процессов, таких как при возникновении КЗ или отключении нагрузки.</p></li><li><p>Определение площадей: Вычисляются площади под графиками токов и напряжений в каждой точке переходного процесса.</p></li><li><p>Сравнение площадей: Площади сравниваются между собой. Если площадь графика тока меньше площади графика напряжения, то генератор является динамически устойчивым. В противном случае, если площадь графика тока больше площади графика напряжения, возможны проблемы с динамической устойчивостью генератора.</p></li><li><p>Принятие решения: На основе сравнения площадей делается вывод о динамической устойчивости генератора. Если генератор не удовлетворяет требованиям динамической устойчивости, может потребоваться коррекция параметров системы или защитных мероприятий.</p></li></ol><p>Анализ динамической устойчивости с помощью правила площадей является важной частью проектирования и эксплуатации электроэнергетических систем, так как он позволяет обнаружить потенциальные проблемы и предотвратить возможные аварийные ситуации.</p></div>"],["Асинхронный режим синхронного генератора, его опасность.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Асинхронный режим синхронного генератора возникает, когда его скорость вращения не совпадает со скоростью вращения сети, к которой он подключен. Это может происходить, например, когда генератор запускается или останавливается, или когда на него возникают дополнительные механические нагрузки.</p><p>Опасность асинхронного режима для синхронного генератора заключается в следующем:</p><ol><li><p>Повышенные механические нагрузки: При работе в асинхронном режиме на генератор возникают дополнительные механические нагрузки, которые могут привести к износу или повреждению его механических частей.</p></li><li><p>Электрические перегрузки: Асинхронный режим может привести к увеличению тока статора, что может привести к перегрузке обмоток статора и повышенным тепловыделениям.</p></li><li><p>Раскачка системы: Асинхронный режим может привести к небольшим изменениям в частоте сети, что может вызвать нестабильность в работе других синхронных генераторов и потребителей в сети.</p></li><li><p>Вероятность аварийного отключения: Если асинхронный режим слишком продолжительный или происходит при повышенных нагрузках, это может привести к аварийному отключению генератора из-за защитных триггеров или перегрева оборудования.</p></li><li><p>Ухудшение качества электроэнергии: В асинхронном режиме синхронный генератор не может обеспечивать стабильную и точную синхронизацию с частотой сети, что может привести к ухудшению качества электроэнергии.</p></li></ol><p>Поэтому важно избегать продолжительного нахождения генератора в асинхронном режиме и предпринимать соответствующие меры для минимизации переходных процессов при запуске и остановке синхронных генераторов.</p></div>"]],"АВТОМАТИКА ЭНЕРГОСИСТЕМ":[["Автоматическое регулирование режимов электроэнергетических объектов.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Автоматическое регулирование режимов электроэнергетических объектов является важной составляющей для обеспечения стабильной и надежной работы электроэнергетических систем. Оно осуществляется с помощью автоматических регуляторов и систем управления, которые контролируют различные параметры и процессы в системах электроснабжения.</p><p>Основные задачи автоматического регулирования в электроэнергетике:</p><ol><li><p>Регулирование напряжения: Автоматические регуляторы напряжения контролируют уровень напряжения в электрической сети. Они обеспечивают поддержание напряжения на заданном уровне, предотвращая его колебания и снижая вероятность возникновения перенапряжений или недонапряжений.</p></li><li><p>Регулирование частоты: Автоматические регуляторы частоты управляют скоростью вращения генераторов в электростанциях. Они обеспечивают поддержание частоты сети на стабильном уровне, что позволяет сбалансировать производство и потребление электроэнергии.</p></li><li><p>Регулирование мощности: Автоматические регуляторы мощности контролируют вырабатываемую или потребляемую мощность в системе. Они реагируют на изменения нагрузки и подстраивают работу генераторов и других устройств для обеспечения стабильности системы.</p></li><li><p>Контроль процессов: Автоматические системы управления контролируют различные процессы в электроэнергетических объектах, такие как распределение энергии, координация работы различных генераторов, переключение на резервные источники, и другие действия для обеспечения эффективной и надежной работы системы.</p></li><li><p>Обеспечение безопасности: Автоматические системы обеспечивают контроль и защиту электрооборудования. Они способны быстро реагировать на аварийные ситуации, выключая опасные участки сети и предотвращая распространение аварийных состояний.</p></li></ol><p>В целом, автоматическое регулирование режимов электроэнергетических объектов позволяет обеспечивать стабильность, эффективность и безопасность работы электроэнергетических систем, а также повышает их надежность и устойчивость к изменяющимся условиям и нагрузкам.</p></div>"],["Основные принципы построения противоаварийной автоматики.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Основные принципы построения противоаварийной автоматики в электроэнергетике направлены на предотвращение или минимизацию последствий аварийных ситуаций в энергосистемах. Противоаварийная автоматика (или защита) представляет собой систему автоматических устройств, которая быстро и точно реагирует на определенные нежелательные или аварийные события, включая перегрузки, короткие замыкания, потерю напряжения и другие нештатные ситуации. Ниже приведены основные принципы ее построения:</p><ol><li><p>Скорость реакции: Противоаварийная автоматика должна реагировать на аварийные ситуации максимально быстро. Чем быстрее система реагирует, тем меньше вероятность серьезных повреждений оборудования или возникновения каскадных аварийных состояний в энергосистеме.</p></li><li><p>Надежность: Автоматические устройства защиты должны быть надежными и работоспособными в течение длительного времени. Они должны проходить регулярную проверку, испытания и обслуживание для обеспечения своей эффективности.</p></li><li><p>Селективность: Принцип селективности гарантирует, что защита активируется только на том участке энергосистемы, где возникла авария, минимизируя влияние на другие части системы. Это помогает ограничить отключение электрооборудования только на минимально необходимый участок.</p></li><li><p>Дифференцированность: Защитные схемы должны быть способны отличать различные типы аварийных событий и активироваться только при соответствующих условиях. Например, схемы защиты от перегрузки и короткого замыкания будут иметь разные пороговые значения тока для своего срабатывания.</p></li><li><p>Автоматическая сбросимость: После устранения аварийной ситуации противоаварийная автоматика должна автоматически сбрасываться и возвращаться в рабочее состояние для обеспечения нормальной работы энергосистемы.</p></li><li><p>Централизованное управление и координация: В больших энергосистемах несколько защитных схем могут быть связаны в единую систему управления, чтобы обеспечить более эффективное и согласованное реагирование на различные аварийные ситуации.</p></li><li><p>Система сигнализации и информирования: Помимо автоматического отключения или переключения, противоаварийная автоматика может предоставлять сигналы и информацию операторам или инженерам о возникших аварийных ситуациях, чтобы принять дополнительные меры и оперативно устранить неполадки.</p></li></ol><p>Применение этих принципов в построении противоаварийной автоматики обеспечивает стабильную и безопасную работу электроэнергетических систем, минимизирует риски аварийных ситуаций и повышает надежность электроснабжения.</p></div>"],["Современные автоматические устройства управления режимами энергосистем.","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Современные автоматические устройства управления режимами энергосистем представляют собой комплексные и высокотехнологичные системы, которые обеспечивают надежное и эффективное функционирование электроэнергетических систем. Они используются для автоматического контроля, регулирования и защиты энергосистем от различных нештатных ситуаций. Ниже приведены некоторые современные автоматические устройства управления режимами энергосистем:</p><ol><li><p>Цифровые релейные защиты: Это компактные и многофункциональные устройства, которые обеспечивают защиту от перегрузок, коротких замыканий, заземлений и других аварийных событий в электроэнергетических объектах. Они способны быстро и точно определить тип аварии и активировать соответствующие защитные схемы.</p></li><li><p>Автоматические регуляторы напряжения и частоты: Эти устройства контролируют и регулируют напряжение и частоту в электрических сетях, чтобы обеспечить стабильность и надежность работы системы. Они могут автоматически реагировать на изменения нагрузки и подстраивать работу генераторов для поддержания стабильных параметров электроэнергетической сети.</p></li><li><p>Автоматические устройства управления распределением энергии: Эти системы контролируют распределение энергии в электроэнергетической сети, чтобы обеспечить оптимальное использование ресурсов и минимизировать потери электроэнергии.</p></li><li><p>Системы управления нагрузками: Эти устройства мониторят и управляют нагрузками в энергосистемах, оптимизируя распределение нагрузок и предотвращая перегрузки.</p></li><li><p>Системы автоматического переключения: Эти устройства автоматически переключают энергосистему на резервные источники питания в случае отключения основного источника, обеспечивая непрерывное электроснабжение критически важных объектов.</p></li><li><p>Системы автоматического диагностирования и прогнозирования: Эти системы используют алгоритмы и искусственный интеллект для диагностирования состояния энергосистемы, выявления потенциальных проблем и прогнозирования возможных аварийных ситуаций.</p></li><li><p>Дистанционное управление и мониторинг: Современные автоматические устройства часто обладают возможностью дистанционного управления и мониторинга. Операторы и инженеры могут контролировать и настраивать работу системы удаленно, что повышает оперативность реакции на изменяющиеся условия.</p></li></ol><p>Современные автоматические устройства управления режимами энергосистем значительно повышают стабильность, надежность и эффективность работы электроэнергетических систем, а также обеспечивают повышенный уровень автоматизации и безопасности.</p></div>"],["Требования к устройствам автоматического повторного включения (АПВ).","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Устройства автоматического повторного включения (АПВ) применяются в электроэнергетических системах для автоматического восстановления питания после временного отключения. Они обеспечивают автоматическое повторное включение оборудования или линий передачи электроэнергии после устранения причины временного отключения. Однако, для обеспечения безопасности работы системы и предотвращения возможных аварий, устройства АПВ должны соответствовать определенным требованиям. Вот некоторые из них:</p><ol><li><p>Защита от множественных повторных включений: Устройства АПВ должны иметь механизмы или алгоритмы, которые предотвращают множественные повторные включения в случае, если после отключения проблема не была устранена. Например, они могут задерживать повторное включение на определенный период времени или активировать аварийное отключение в случае последовательных отказов.</p></li><li><p>Ограничение числа повторных включений: Устройства АПВ могут быть настроены на ограничение числа повторных включений. Если количество повторных включений превышает установленный предел, устройство может перейти в режим блокировки или требовать вмешательства оператора.</p></li><li><p>Мониторинг качества электроэнергии: Устройства АПВ должны контролировать качество электроэнергии перед повторным включением. Если параметры электроэнергии находятся за пределами допустимых значений, устройство может задержать повторное включение до улучшения ситуации.</p></li><li><p>Последовательное включение: Устройства АПВ должны обеспечивать последовательное и постепенное включение нагрузки, чтобы избежать вспышек тока и перенапряжений при восстановлении электропитания.</p></li><li><p>Защита оборудования: Устройства АПВ не должны автоматически повторно включать оборудование в случае его повреждения или неисправности. Они должны срабатывать только после устранения проблемы и убедиться, что оборудование находится в рабочем состоянии.</p></li><li><p>Соответствие нормативам и стандартам: Устройства АПВ должны соответствовать применимым нормативам и стандартам безопасности и качества электроэнергии.</p></li><li><p>Система сигнализации: Устройства АПВ могут быть оборудованы системой сигнализации или коммуникации, чтобы предупреждать операторов или инженеров о срабатывании и состоянии устройства.</p></li></ol><p>Эти требования помогают обеспечить безопасную и надежную работу устройств автоматического повторного включения в электроэнергетических системах, минимизируя риски возникновения аварийных ситуаций и повышая уровень автоматизации и эффективности системы.</p></div>"],["Назначение, принцип действия и классификация устройств автоматического повторного включения (АПВ).","<div class=\\"markdown prose w-full break-words dark:prose-invert dark\\"><p>Назначение устройств автоматического повторного включения (АПВ):\\nУстройства АПВ предназначены для автоматического восстановления электроснабжения после временного отключения электроэнергии. Они используются для обеспечения автоматического повторного включения оборудования или линий передачи электроэнергии после устранения причины временного отключения, например, после срабатывания защитных устройств.</p><p>Принцип действия устройств автоматического повторного включения (АПВ):\\nПринцип действия устройств АПВ заключается в следующем:</p><ol><li>Отслеживание временного отключения: Устройства АПВ контролируют состояние электроэнергии и оборудования. Если происходит временное отключение электроснабжения, устройство регистрирует этот факт.</li><li>Задержка повторного включения: После временного отключения устройство может установить задержку перед повторным включением. Это необходимо для обеспечения стабильности сети и предотвращения сразу же множественных повторных включений при непостоянных условиях.</li><li>Повторное включение после восстановления: По истечении задержки или после устранения причины временного отключения, устройство АПВ автоматически инициирует повторное включение оборудования или линий передачи электроэнергии.</li></ol><p>Классификация устройств автоматического повторного включения (АПВ):\\nУстройства АПВ могут быть классифицированы по различным критериям. Вот некоторые из них:</p><ol><li><p>По типу оборудования:</p><ul><li>Устройства АПВ для генераторов: Обеспечивают автоматическое повторное включение генераторов после временного отключения или снижения нагрузки.</li><li>Устройства АПВ для трансформаторов: Повторно включают трансформаторы после временного отключения, например, из-за срабатывания защиты от короткого замыкания.</li><li>Устройства АПВ для линий передачи: Автоматически восстанавливают электроснабжение по линиям передачи после временного прерывания.</li></ul></li><li><p>По уровню автоматизации:</p><ul><li>Простые устройства АПВ: Могут иметь базовые функции задержки и повторного включения.</li><li>Сложные устройства АПВ: Оборудованы дополнительными функциями, такими как мониторинг параметров электроэнергии и систем коммуникации.</li></ul></li><li><p>По характеру применения:</p><ul><li>Устройства АПВ для коммерческих объектов: Применяются для автоматического включения осветительных устройств, систем вентиляции, лифтов и другого оборудования в коммерческих зданиях и объектах.</li><li>Устройства АПВ для промышленных объектов: Используются для повторного включения промышленных производственных линий, пневмооборудования и других промышленных устройств.</li></ul></li></ol><p>Общим для всех устройств АПВ является их цель - автоматическое восстановление электроснабжения после временного отключения для обеспечения непрерывности работы электроэнергетических систем.</p></div>"],["Автоматическое повторного включение (АПВ) линий электропередачи. Особенности применения АПВ для линий с двусторонним питанием.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>​</p><ol><li><p>Обеспечение непрерывности электроснабжения: Линии электропередачи с двусторонним питанием имеют возможность получать электроэнергию из разных источников. АПВ в таких системах позволяет быстро восстанавливать электроснабжение с другой стороны линии в случае возникновения сбоя с одной стороны.</p></li><li><p>Минимизация простоев: Автоматическое повторное включение уменьшает время простоя линии электропередачи, что способствует повышению надежности и эффективности электроэнергетической системы.</p></li><li><p>Реакция на кратковременные сбои: АПВ активируется в случае временных сбоев, таких как мгновенные скачки напряжения или кратковременные перебои в работе. Это позволяет предотвратить ненужное вмешательство операторов системы и обеспечивает автоматическую защиту линии.</p></li><li><p>Защита оборудования: Автоматическое повторное включение производится с учетом режимов работы оборудования, чтобы минимизировать риски повреждения и перегрузок.</p></li><li><p>Настройка параметров АПВ: Для линий с двусторонним питанием особенно важно правильно настроить параметры автоматического повторного включения, чтобы избежать нежелательных переключений между источниками электропитания при кратковременных колебаниях напряжения.</p></li><li><p>Ограничения АПВ: Следует помнить, что АПВ предназначено для обработки временных сбоев, и в случае серьезных и длительных проблем требуется вмешательство операторов и осмотр оборудования.</p></li></ol><p>Общим преимуществом АПВ для линий электропередачи с двусторонним питанием является повышение надежности системы и обеспечение непрерывности электроснабжения для потребителей.</p></div>"],["Автоматическое повторного включение (АПВ) силовых трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматическое повторное включение (АПВ) силовых трансформаторов представляет собой технологию, которая автоматически восстанавливает работу трансформатора после его отключения в результате временных сбоев или неполадок в системе электропередачи. Особенности применения АПВ для силовых трансформаторов включают:</p><ol><li><p>Обнаружение временных сбоев: Система АПВ непрерывно контролирует работу силового трансформатора и быстро реагирует на временные сбои, такие как кратковременные перегрузки или короткие замыкания.</p></li><li><p>Автоматическое восстановление: Когда система обнаруживает временный сбой, АПВ автоматически отключает трансформатор на короткий промежуток времени и затем автоматически возвращает его в работу, предотвращая необходимость вручную восстанавливать работу трансформатора.</p></li><li><p>Ограничение перегрузок: АПВ может быть настроено таким образом, чтобы предотвращать повторное включение трансформатора, если причина сбоя связана с серьезными перегрузками или другими критическими ситуациями.</p></li><li><p>Предотвращение длительных перерывов: Автоматическое повторное включение позволяет минимизировать время простоя трансформатора, что важно для обеспечения непрерывного электроснабжения.</p></li><li><p>Защита оборудования: Система АПВ спроектирована с учетом защиты силовых трансформаторов от повреждений и перегрузок, что увеличивает их срок службы и надежность.</p></li><li><p>Анализ причин сбоев: Некоторые системы АПВ могут регистрировать информацию о сбоях, что позволяет операторам проводить анализ причин возникновения проблем и внедрять меры по их предотвращению.</p></li></ol><p>Однако, следует отметить, что применение АПВ для силовых трансформаторов также имеет свои ограничения и требует грамотного подхода к настройке и эксплуатации системы, чтобы обеспечить безопасность и стабильность работы энергосистемы.</p></div>"],["Назначение, принцип действия и классификация устройств автоматического включение резерва (АВР).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Вопрос №8: Назначение, принцип действия и классификация устройств автоматического включения резерва (АВР).</p><p>Назначение устройств автоматического включения резерва (АВР):\\nУстройства автоматического включения резерва, как следует из названия, предназначены для автоматического переключения электрической нагрузки с основного источника питания на резервный источник в случае отказа основного или при возникновении других критических ситуаций. Они обеспечивают непрерывность электроснабжения и защищают электрооборудование от сбоев и перерывов в подаче электроэнергии.</p><p>Принцип действия устройств АВР:\\nУстройства АВР работают на основе автоматической логики и реле, которые следят за состоянием основного и резервного источников электропитания. Когда происходит отказ основного источника, или он не может обеспечить требуемое напряжение или частоту, устройство АВР автоматически переключает нагрузку на резервный источник. При восстановлении работы основного источника, АВР снова переключает нагрузку на него.</p><p>Классификация устройств АВР:\\nУстройства АВР можно классифицировать по различным параметрам:</p><ol><li><p>По типу резервного источника:</p><ul><li>АВР для дизель-генераторов: Переключение происходит на дизель-генератор при отказе основного источника.</li><li>АВР для аккумуляторных батарей: Переключение происходит на батареи при отказе основного источника.</li></ul></li><li><p>По типу нагрузки:</p><ul><li>АВР для общей нагрузки: Переключение происходит для общей нагрузки или целой системы.</li><li>АВР для критической нагрузки: Переключение происходит только для определенных критически важных нагрузок, например, медицинского оборудования или серверных комнат.</li></ul></li><li><p>По способу переключения:</p><ul><li>АВР на основе контакторов: Переключение осуществляется с помощью контакторов, которые физически переключают соединения между источниками питания.</li><li>АВР на основе полупроводниковых ключей: Переключение осуществляется с помощью полупроводниковых устройств, таких как тиристоры или транзисторы.</li></ul></li><li><p>По уровню автоматизации:</p><ul><li>АВР с простой автоматикой: Осуществляет базовое переключение между источниками, без сложных функций и дополнительных возможностей.</li><li>АВР с программным управлением: Имеет возможность программирования логики переключения и может выполнять дополнительные функции, такие как тестирование резервных источников.</li></ul></li></ol><p>Все эти типы устройств АВР выполняют общую задачу - обеспечение надежности и непрерывности электроснабжения в случае возникновения неполадок или отказа основного источника питания.</p></div>"],["Автоматическое включение резерва (АВР) силовых трансформаторов. Пусковые органы минимального напряжения в схемах АВР.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматическое включение резерва (АВР) силовых трансформаторов является важным элементом автоматической защиты и обеспечения непрерывности электроснабжения в электроэнергетических системах. Пусковые органы минимального напряжения (ПОМН) применяются в схемах АВР для защиты силовых трансформаторов от запуска на нагрузку при недостаточном напряжении на стороне резервного источника.</p><p>Принцип действия пусковых органов минимального напряжения:\\nПОМН представляют собой реле или устройства, которые мониторят напряжение на стороне резервного источника (например, резервного генератора или резервной подстанции). Если напряжение на резервном источнике ниже определенного установленного значения (обычно это минимальное допустимое напряжение), то ПОМН активируется и предотвращает автоматическое переключение силового трансформатора на резервный источник.</p><p>Работа схемы АВР с ПОМН:</p><ol><li><p>В нормальном режиме: Когда основной источник электропитания (например, основной генератор или основная подстанция) обеспечивает достаточное напряжение, устройство АВР не активируется, и силовой трансформатор подключен к основному источнику.</p></li><li><p>При отказе основного источника: Когда основной источник питания отказывает или его напряжение снижается ниже допустимого уровня, устройство АВР активируется и инициирует переключение силового трансформатора на резервный источник.</p></li><li><p>ПОМН в действии: Однако перед тем, как силовой трансформатор будет переключен на резервный источник, устройство АВР проверяет состояние ПОМН. Если ПОМН обнаруживает, что напряжение на стороне резервного источника недостаточно высоко (ниже минимально допустимого), оно не позволит переключить нагрузку на резервный источник. Таким образом, предотвращается запуск силового трансформатора на недостаточно надежный или стабильный источник питания.</p></li></ol><p>Пусковые органы минимального напряжения в схемах АВР являются важным элементом, который обеспечивает надежность и безопасность работы силовых трансформаторов и резервных источников в системах автоматического включения резерва.</p></div>"],["Автоматическое включение генераторов на параллельную работу. Способы включения генераторов, уравнительные токи и моменты.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматическое включение генераторов на параллельную работу является важным процессом в электроэнергетических системах, когда несколько генераторов объединяются для совместной подачи электроэнергии. Это позволяет обеспечить эффективное распределение нагрузки и повысить надежность энергосистемы. Включение генераторов на параллельную работу может осуществляться различными способами, а также требует уравнительных токов и моментов для успешной синхронизации.</p><p>Способы включения генераторов на параллельную работу:</p><ol><li><p>Временное увеличение частоты: Один из генераторов включается в сеть, а частота его вращения временно увеличивается, чтобы превысить частоту сети. Затем его связывают с сетью, и постепенно уменьшают частоту до номинальной. После этого генератор считается включенным в параллель.</p></li><li><p>Временное увеличение напряжения: Аналогично предыдущему способу, но в данном случае генератор временно подключается к сети с повышенным напряжением и постепенно его уменьшают до номинального значения.</p></li><li><p>Метод синхронного контроля фаз: Генераторы подключаются к общей шине через автоматические регуляторы напряжения и частоты. Регуляторы сравнивают фазу и частоту генератора с сетью и, при совпадении, генератор считается включенным в параллель.</p></li></ol><p>Уравнительные токи и моменты:\\nПри включении генераторов на параллельную работу, необходимо соблюдать условие синхронизации, чтобы избежать вредных электромеханических воздействий на генераторы и систему электроснабжения в целом. Для этого уравнительные токи и моменты используются для проверки согласования параметров между генераторами и сетью.</p><ol><li><p>Уравнительные токи: Это токи, которые протекают в момент синхронизации и позволяют установить равенство фаз между генератором и сетью. Если уравнительные токи нулевые или близки к нулю, это означает, что фазы генератора и сети уже согласованы, и генератор можно включить в параллель.</p></li><li><p>Уравнительные моменты: Это механические моменты, которые возникают при синхронизации генератора с сетью. Уравнительные моменты используются для контроля механического согласования вращения генератора с частотой сети. Если уравнительные моменты минимальны или равны нулю, это указывает на согласование механических параметров генератора и сети.</p></li></ol><p>Включение генераторов на параллельную работу с помощью правильного использования уравнительных токов и моментов обеспечивает безопасное и плавное объединение генераторов с сетью, что способствует стабильной работе энергосистемы.</p></div>"],["Автоматическое включение генераторов на параллельную работу. Автоматические устройства точной синхронизации.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматическое включение генераторов на параллельную работу включает процедуру точной синхронизации, которая является ключевым этапом для успешного объединения генераторов с сетью. Автоматические устройства точной синхронизации играют важную роль в обеспечении согласования параметров между генераторами и сетью перед их параллельной работой.</p><p>Автоматические устройства точной синхронизации выполняют следующие функции:</p><ol><li><p>Измерение параметров генератора и сети: Устройства точной синхронизации измеряют фазовые углы, частоты и напряжения на генераторе и в системе электроснабжения (сети).</p></li><li><p>Сравнение параметров: Затем устройства сравнивают измеренные параметры с заданными значениями, которые представляют желаемые условия синхронизации.</p></li><li><p>Управление устройствами регулирования: Если измеренные параметры генератора и сети отличаются от заданных значений, устройства точной синхронизации отправляют соответствующие команды устройствам регулирования генератора, таким как регуляторам напряжения и частоты, для коррекции этих параметров.</p></li><li><p>Мониторинг процесса синхронизации: Устройства точной синхронизации непрерывно мониторят процесс синхронизации и обеспечивают его контроль, чтобы предотвратить возможные проблемы и обеспечить безопасную работу генераторов на параллельной нагрузке.</p></li><li><p>Защита от нежелательных условий: Устройства точной синхронизации также выполняют функцию защиты и предотвращают включение генераторов в параллель, если параметры синхронизации не соответствуют заданным условиям. Это может произойти, например, при слишком больших различиях в частотах или фазах.</p></li></ol><p>Автоматические устройства точной синхронизации обеспечивают гармоничное и безопасное объединение генераторов с сетью, что позволяет эффективно распределять нагрузку и обеспечивать стабильное электроснабжение для потребителей. Это важный аспект автоматики энергосистем, который обеспечивает надежную и эффективную работу генерирующих установок.</p></div>"],["Автоматические и полуавтоматические устройства самосинхронизации генераторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматические и полуавтоматические устройства самосинхронизации генераторов представляют собой специальные устройства или системы, которые обеспечивают автоматическую или полуавтоматическую процедуру синхронизации генераторов перед их включением на параллельную работу с электрической сетью. Это важный процесс, который обеспечивает согласование параметров между генераторами и сетью, чтобы избежать возникновения вредных электромеханических воздействий и обеспечить безопасную и стабильную работу системы энергоснабжения.</p><ol><li><p>Автоматические устройства самосинхронизации:\\nАвтоматические устройства самосинхронизации выполняют весь процесс синхронизации генераторов полностью автоматически, без необходимости вмешательства оператора. Они обычно основаны на современных цифровых системах управления и обладают высокой точностью и надежностью. Эти устройства автоматически измеряют параметры генератора и сети, сравнивают их и, если условия синхронизации выполнены, автоматически осуществляют параллельное включение генератора в систему. Если параметры не соответствуют условиям синхронизации, устройство предотвращает автоматическое включение, чтобы предотвратить возможные проблемы.</p></li><li><p>Полуавтоматические устройства самосинхронизации:\\nПолуавтоматические устройства самосинхронизации также выполняют процедуру синхронизации генераторов, но требуют некоторого участия оператора. Они могут быть основаны на комбинации автоматических устройств и ручного контроля. В таких системах устройства автоматически измеряют и анализируют параметры генераторов и сети, но для осуществления процедуры синхронизации требуется подтверждение оператора. Обычно оператор наблюдает за процессом синхронизации и вводит команду о включении генератора на параллельную работу, когда все условия выполнены.</p></li></ol><p>Как автоматические, так и полуавтоматические устройства самосинхронизации обеспечивают точное и безопасное согласование параметров между генераторами и сетью, что позволяет эффективно и стабильно работать системе электроснабжения. Они являются важными компонентами автоматики энергосистем, обеспечивая надежное и безаварийное функционирование электроэнергетических систем.</p></div>"],["Системы возбуждения синхронных генераторов. Назначение и виды автоматического регулирования возбуждения (АРВ). Устройство быстродействующей форсировки возбуждения (УБФ).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Вопрос №13: Системы возбуждения синхронных генераторов. Назначение и виды автоматического регулирования возбуждения (АРВ). Устройство быстродействующей форсировки возбуждения (УБФ).</p><p>Системы возбуждения синхронных генераторов:\\nСистемы возбуждения синхронных генераторов отвечают за подачу возбуждающего тока на обмотки возбуждения генератора, что создает магнитное поле и позволяет генератору генерировать электрическую энергию. Основная цель системы возбуждения - обеспечить стабильное и точное регулирование напряжения на выходе генератора, чтобы поддерживать заданное значение напряжения и обеспечивать его устойчивость в условиях различных нагрузок и возмущений.</p><p>Назначение автоматического регулирования возбуждения (АРВ):\\nАвтоматическое регулирование возбуждения (АРВ) представляет собой систему автоматического контроля и регулирования возбуждения генератора, которая реагирует на изменения нагрузки и поддерживает стабильное напряжение на выходе генератора. АРВ позволяет генератору автоматически компенсировать изменения нагрузки и изменять уровень возбуждения в соответствии с требованиями, чтобы обеспечить надежное и устойчивое электроснабжение.</p><p>Виды автоматического регулирования возбуждения:</p><ol><li><p>Регулирование напряжения на постоянной магнитной цепи (напряжение на воздушной обмотке возбуждения): В этом виде АРВ используется регулятор напряжения на постоянной магнитной цепи, который контролирует ток возбуждения генератора, чтобы поддерживать заданное значение напряжения.</p></li><li><p>Регулирование напряжения на роторной обмотке (напряжение на вращающейся обмотке возбуждения): В данном случае используется регулятор напряжения на роторной обмотке генератора. Этот тип АРВ также управляет током возбуждения для поддержания заданного значения напряжения на выходе генератора.</p></li></ol><p>Устройство быстродействующей форсировки возбуждения (УБФ):\\nУстройство быстродействующей форсировки возбуждения (УБФ) используется для автоматической и быстрой стабилизации напряжения на выходе генератора в случае резких изменений нагрузки или возмущений в электрической сети. УБФ обеспечивает мгновенное увеличение тока возбуждения генератора в ответ на такие изменения, что позволяет предотвратить сильное отклонение напряжения и обеспечивает быструю стабилизацию.</p><p>Устройство быстродействующей форсировки возбуждения часто используется вместе с системами автоматического регулирования возбуждения (АРВ) для обеспечения высокой надежности и стабильности работы генераторов при различных условиях эксплуатации и нагрузках.</p></div>"],["Регулирование реактивной мощности и напряжения на шинах электростанции устройствами автоматического регулирования возбуждения (АРВ).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Вопрос №14: Регулирование реактивной мощности и напряжения на шинах электростанции устройствами автоматического регулирования возбуждения (АРВ).</p><p>Устройства автоматического регулирования возбуждения (АРВ) играют важную роль в регулировании реактивной мощности и напряжения на шинах электростанции. Они позволяют эффективно управлять уровнем возбуждения синхронных генераторов, что влияет на их реактивную мощность и напряжение, обеспечивая стабильное и надежное функционирование электроэнергетической системы.</p><p>Регулирование реактивной мощности:</p><ol><li><p>Поддержание заданного уровня реактивной мощности: АРВ контролирует ток возбуждения генератора в зависимости от изменения нагрузки на электростанции и требуемого уровня реактивной мощности. Если нагрузка требует увеличения производимой реактивной мощности, АРВ увеличивает ток возбуждения для увеличения производимой реактивной мощности. Если нагрузка уменьшается, АРВ уменьшает ток возбуждения для снижения реактивной мощности.</p></li><li><p>Управление мощностью регулятора напряжения (AVR): AVR является частью системы АРВ, который контролирует напряжение генератора. Регулирование реактивной мощности в значительной степени основано на управлении AVR, который регулирует магнитное поле возбуждения генератора и, следовательно, реактивную мощность.</p></li></ol><p>Регулирование напряжения на шинах электростанции:</p><ol><li><p>Поддержание стабильного напряжения: АРВ также управляет уровнем напряжения на выходе генераторов и шинах электростанции. Он непрерывно отслеживает значение выходного напряжения генераторов и, если оно отклоняется от заданного значения, АРВ корректирует уровень возбуждения для поддержания стабильного напряжения.</p></li><li><p>Компенсация изменений нагрузки: При изменении нагрузки на электростанции, напряжение может снижаться или повышаться. АРВ быстро реагирует на такие изменения и регулирует ток возбуждения, чтобы компенсировать влияние нагрузки и поддерживать номинальное напряжение на шинах электростанции.</p></li></ol><p>Регулирование реактивной мощности и напряжения на шинах электростанции с помощью устройств АРВ позволяет эффективно управлять производством электроэнергии и поддерживать стабильные и надежные условия работы электроэнергетической системы, что является важным аспектом в автоматике энергосистем.</p></div>"],["Принципы регулирования частоты вращения и активной мощности энергоагрегатов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Вопрос №15: Принципы регулирования частоты вращения и активной мощности энергоагрегатов.</p><p>Регулирование частоты вращения и активной мощности энергоагрегатов является важным аспектом в автоматике энергосистем, поскольку позволяет управлять производством активной мощности и частотой сети, чтобы обеспечивать стабильную и надежную работу электроэнергетической системы.</p><ol><li>Принцип регулирования частоты вращения энергоагрегатов:\\nЧастота вращения энергоагрегатов, таких как генераторы или двигатели, непосредственно связана с частотой электрической сети. При изменении нагрузки на энергоагрегаты, частота вращения может меняться, что приводит к изменению частоты сети. Цель регулирования частоты вращения заключается в поддержании номинальной частоты сети (например, 50 Гц или 60 Гц, в зависимости от региона) вне зависимости от изменений в нагрузке.</li></ol><p>Принцип регулирования частоты вращения основан на использовании системы автоматического регулирования (АР) или системы автоматической нагрузочной частотной регулировки (АНЧР). Эти системы контролируют величину мощности генератора и его частоту вращения и, в зависимости от разницы между фактической частотой и заданным значением частоты сети, корректируют топливоподачу (в случае турбинных установок) или возбуждение (в случае синхронных генераторов) для увеличения или уменьшения мощности генерации и, таким образом, поддержания номинальной частоты.</p><ol start=\\"2\\"><li>Принцип регулирования активной мощности энергоагрегатов:\\nРегулирование активной мощности связано с поддержанием баланса между производимой и потребляемой активной мощностью в энергосистеме. В электроэнергетических системах активная мощность должна постоянно поддерживаться на определенном уровне, чтобы удовлетворить потребности потребителей и поддерживать стабильность сети.</li></ol><p>Для регулирования активной мощности используются автоматические регуляторы мощности (AVR) или другие системы автоматического регулирования возбуждения (АРВ). Эти системы контролируют ток возбуждения генератора, что влияет на магнитное поле и, следовательно, на производимую активную мощность. При изменении нагрузки на электроэнергетическую систему, системы АРВ или AVR автоматически корректируют ток возбуждения, чтобы поддерживать необходимый уровень активной мощности.</p><p>Регулирование частоты вращения и активной мощности энергоагрегатов обеспечивает стабильное и надежное электроснабжение и позволяет эффективно управлять работой электроэнергетических систем при различных условиях и изменениях нагрузки. Это критически важные аспекты автоматики энергосистем, обеспечивающие надежную и эффективную работу электроэнергетики.</p></div>"],["Автоматическое регулирование напряжения в электрических сетях. Управление РПН силовых трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматическое регулирование напряжения в электрических сетях осуществляется с помощью систем управления напряжением (СУН) и регуляторов параллельных нагрузок (РПН) силовых трансформаторов. Эти системы позволяют поддерживать напряжение в сети на заданном уровне, что важно для надежной и эффективной работы электроэнергетических систем.</p><p>РПН силовых трансформаторов обеспечивают регулирование напряжения на выходе трансформаторов. Когда нагрузка в электрической сети изменяется, возникают отклонения в напряжении. РПН позволяют автоматически компенсировать эти отклонения и поддерживать стабильное напряжение на нагрузке.</p><p>Системы управления напряжением включают в себя различные датчики и регуляторы, которые непрерывно мониторят напряжение в различных точках электрической сети. Полученная информация передается в центральные системы управления, где принимаются решения о необходимых корректировках напряжения.</p><p>Ключевая задача автоматического регулирования напряжения — минимизировать отклонения напряжения от заданного значения и обеспечить стабильную работу электрооборудования. Это важно для предотвращения повреждений оборудования, улучшения качества электроэнергии и обеспечения надежной работы потребителей электроэнергии.</p></div>"],["Автоматическое регулирование напряжения в электрических сетях. Управление батареями конденсаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматическое регулирование напряжения в электрических сетях включает в себя также управление батареями конденсаторов. Батареи конденсаторов представляют собой устройства, используемые для компенсации реактивной мощности в электрических системах.</p><p>Реактивная мощность возникает из-за индуктивных и емкостных элементов в сети и приводит к отставанию или опережению фазы напряжения относительно фазы тока. Когда в сети присутствует большое количество нагрузок, требующих реактивной мощности, это может привести к снижению напряжения и неэффективному использованию электроэнергии.</p><p>Управление батареями конденсаторов позволяет компенсировать реактивную мощность, поддерживать надлежащее напряжение и улучшать эффективность системы. Когда нагрузка на сети изменяется, автоматические регуляторы определяют текущее значение реактивной мощности и на основе этой информации включают или выключают батареи конденсаторов.</p><p>При увеличении реактивной мощности (отставании фазы напряжения), батареи конденсаторов включаются, чтобы компенсировать этот дефицит и повысить напряжение. При уменьшении реактивной мощности (опережении фазы напряжения), батареи конденсаторов выключаются, чтобы предотвратить избыточное напряжение.</p><p>Таким образом, управление батареями конденсаторов способствует поддержанию стабильного напряжения, снижению потерь энергии и повышению эффективности работы электрических сетей. Это важный аспект автоматизации энергосистем и обеспечения качества электроэнергии для потребителей.</p></div>"]],"ЭЛЕКТРОЭНЕРГЕТИЧЕСКИЕ СИСТЕМЫ И СЕТИ":[["Структура и основные элементы энергосистем. Общая характеристика электрических систем и сетей. Основные понятия и определения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Структура и основные элементы энергосистемы:</p><p>Энергосистема – это комплекс взаимосвязанных производственных и технологических объектов, предназначенных для производства, передачи, распределения и потребления электрической энергии. Она состоит из следующих основных элементов:</p><ol><li><p>Электростанции: Генерируют электроэнергию из различных источников, таких как уголь, нефть, газ, ядерное топливо, вода, солнечная и ветровая энергия.</p></li><li><p>Трансформаторы: Используются для повышения или понижения напряжения электроэнергии для более эффективной передачи и распределения.</p></li><li><p>Линии электропередачи: Передают электроэнергию от электростанций к подстанциям и от подстанций к конечным потребителям.</p></li><li><p>Подстанции: Служат для сбора и распределения электроэнергии, а также для поддержания стабильного напряжения в сети.</p></li><li><p>Распределительные сети: Осуществляют передачу электроэнергии от подстанций к промышленным, коммерческим и жилым потребителям.</p></li><li><p>Потребители: Конечные пользователи электрической энергии, включая домашние хозяйства, предприятия, промышленные объекты и другие.</p></li></ol><p>Общая характеристика электрических систем и сетей:</p><p>Электрические системы и сети имеют ключевую роль в обеспечении энергетических потребностей общества. Они представляют собой сложные структуры, обеспечивающие передачу и распределение электроэнергии от производителей к потребителям. Одной из основных характеристик является потребительский характер нагрузки: потребители не могут сами производить электроэнергию, поэтому они зависят от системы для своих энергетических нужд.</p><p>Основные понятия и определения:</p><ol><li><p>Напряжение (напряжение электрическое): Это разность электрических потенциалов между двумя точками в электрической системе. Единицей измерения напряжения является вольт (В).</p></li><li><p>Ток (ток электрический): Это поток электрических зарядов через проводник. Единицей измерения тока является ампер (А).</p></li><li><p>Мощность (мощность электрическая): Представляет собой скорость энергопотребления или передачи в электрической системе. Измеряется в ваттах (Вт).</p></li><li><p>Частота: Это количество циклов переменного тока в секунду, измеряется в герцах (Гц).</p></li><li><p>Трансформация: Процесс изменения напряжения электроэнергии с помощью трансформаторов.</p></li><li><p>Реактивная мощность: Мощность, которую потребляют некоторые устройства в электрической системе без выполнения фактической работы.</p></li><li><p>Активная мощность: Мощность, которая фактически используется для выполнения работы.</p></li></ol><p>Эти понятия и элементы составляют основу электроэнергетических систем и сетей, обеспечивая эффективную и надежную передачу и распределение электрической энергии для удовлетворения потребностей потребителей.</p></div>"],["Электрические системы. Основные преимущества объединения энергосистем. Электрические сети и их классификация.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Электрические системы:</p><p>Электрическая система - это комплекс взаимосвязанных объектов и сетей, предназначенных для генерации, передачи, распределения и потребления электроэнергии. Она обеспечивает электроэнергией промышленные предприятия, коммерческие объекты, жилые дома и другие потребители.</p><p>Основные преимущества объединения энергосистем:</p><ol><li><p>Увеличение надежности: Объединение нескольких электрических систем в одну позволяет более равномерно распределить нагрузку, что снижает риск возникновения перегрузок и сбоев. Когда одна часть системы испытывает проблемы, другие могут временно компенсировать потери.</p></li><li><p>Экономия ресурсов: Объединение энергосистем может способствовать эффективному использованию различных источников энергии и повысить общую энергоэффективность. Это позволяет снизить затраты на производство и передачу электроэнергии.</p></li><li><p>Поддержка гибкости и управляемости: Крупные электрические системы обладают большей гибкостью в управлении нагрузками и распределением электроэнергии. Это позволяет эффективно реагировать на изменения в спросе на электроэнергию и обеспечивать стабильность в работе системы.</p></li><li><p>Использование разнообразных источников энергии: Объединение различных энергосистем может способствовать использованию разнообразных источников энергии, таких как возобновляемые источники (ветер, солнце, гидроэнергия) и традиционные источники (уголь, нефть, газ, ядерное топливо). Это повышает устойчивость энергосистемы и снижает зависимость от одного источника.</p></li><li><p>Развитие международного сотрудничества: Объединение энергосистем различных стран позволяет обмениваться электроэнергией и создавать глобальные энергетические сети. Это способствует повышению энергетической безопасности и стимулирует экономическое сотрудничество между государствами.</p></li></ol><p>Электрические сети и их классификация:</p><p>Электрические сети представляют собой системы, обеспечивающие передачу и распределение электроэнергии от источников к потребителям. Они классифицируются по масштабу и характеру использования:</p><ol><li><p>По масштабу:</p><ul><li>Распределительные сети: Отвечают за передачу электроэнергии от подстанций к конечным потребителям. Напряжение в распределительных сетях обычно ниже (например, 110-220 В).</li><li>Трансмиссионные сети: Служат для передачи высокого напряжения (чаще всего 110 кВ и выше) на большие расстояния от электростанций к подстанциям.</li></ul></li><li><p>По характеру использования:</p><ul><li>Однонаправленные сети: Энергия передается в одном направлении от источников к потребителям. Применяются в малых системах с небольшим количеством потребителей.</li><li>Многоуровневые сети: Включают несколько уровней напряжения, что позволяет эффективно распределять энергию и обеспечивать стабильность работы системы.</li></ul></li><li><p>По применению:</p><ul><li>Глобальные сети: Крупные электроэнергетические системы, которые охватывают большие территории и объединяют различные страны.</li><li>Региональные сети: Покрывают отдельные регионы или штаты и предназначены для обеспечения энергетических потребностей данной территории.</li><li>Локальные сети: Обслуживают ограниченные районы, города или населенные пункты.</li></ul></li></ol><p>Эти классификации позволяют организовать эффективную систему передачи и распределения электроэнергии для удовлетворения потребностей различных потребителей.</p></div>"],["Номинальные напряжения электрических сетей. Область применения номинальных напряжений.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Номинальные напряжения электрических сетей:</p><p>Номинальное напряжение - это предопределенное, стандартизированное значение напряжения, которое используется для обозначения и классификации электрических систем и оборудования. Оно указывает на номинальное значение электрического напряжения, при котором оборудование или система проектировались для оптимальной работы.</p><p>Область применения номинальных напряжений:</p><p>Номинальные напряжения применяются в различных типах электрических сетей в зависимости от их размера, масштаба и характера использования. Основные области применения номинальных напряжений включают:</p><ol><li><p>Низковольтные системы (LV - Low Voltage):</p><ul><li>Номинальное напряжение: обычно до 1000 Вольт (В).</li><li>Область применения: Низковольтные системы широко используются для подачи электроэнергии в жилых домах, коммерческих зданиях, малых предприятиях и других местах с небольшими энергопотребностями.</li></ul></li><li><p>Средневольтные системы (MV - Medium Voltage):</p><ul><li>Номинальное напряжение: обычно от 1000 В до 35 000 В.</li><li>Область применения: Средневольтные системы используются для передачи электроэнергии от подстанций к подзоновым и районным подстанциям, а также в некоторых промышленных установках.</li></ul></li><li><p>Высоковольтные системы (HV - High Voltage):</p><ul><li>Номинальное напряжение: обычно от 35 000 В до 230 000 В.</li><li>Область применения: Высоковольтные системы применяются для передачи электроэнергии на большие расстояния между различными регионами и для связи между крупными подстанциями.</li></ul></li><li><p>Высоковольтные постоянные системы (HVDC - High Voltage Direct Current):</p><ul><li>Номинальное напряжение: от 100 кВ до нескольких сотен кВ.</li><li>Область применения: HVDC-системы используются для передачи электроэнергии на дальние расстояния, где потери переменного тока становятся слишком значительными. Они также применяются для соединения неравномерных систем переменного тока.</li></ul></li></ol><p>Корректный выбор номинального напряжения важен для обеспечения безопасной и эффективной работы электрических систем и оборудования. Он определяет характеристики и параметры многих электрических компонентов и обеспечивает совместимость между различными устройствами в электроэнергетических системах.</p></div>"],["Схемы электрических сетей и систем. Общие принципы построения схем электрических сетей. Схемы районных электрических сетей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы электрических сетей и систем:</p><p>Схема электрической сети - это графическое представление структуры и элементов электрической системы, которое позволяет визуализировать и понять взаимосвязи между различными компонентами сети. Схемы помогают инженерам и операторам легче планировать, строить, обслуживать и управлять электрическими системами.</p><p>Общие принципы построения схем электрических сетей:</p><ol><li><p>Упрощение и стандартизация: Схемы строятся с учетом стандартов и правил обозначения символов для электрических компонентов. Они должны быть понятны и четки для всех специалистов, работающих с системой.</p></li><li><p>Иерархический подход: Большие электрические системы могут быть представлены в виде иерархических схем, где высшие уровни представляют общую структуру, а на более низких уровнях отображаются детали и элементы.</p></li><li><p>Использование стандартных символов: Каждый элемент схемы, такой как генератор, трансформатор, линия передачи, подстанция и т.д., имеет свой уникальный символ для удобства идентификации.</p></li><li><p>Обозначение направления потока энергии: Направление потока электрической энергии от источников к потребителям обычно отображается стрелками на схеме.</p></li></ol><p>Схемы районных электрических сетей:</p><p>Схемы районных электрических сетей отображают структуру и компоненты системы электроснабжения на определенной территории или районе. Они включают в себя различные уровни напряжения и подстанции, а также линии передачи и распределительные сети, обслуживающие промышленные предприятия, коммерческие объекты, жилые дома и другие потребителей в этом районе.</p><p>В районных электрических сетях можно выделить следующие основные элементы:</p><ol><li><p>Генерирующие источники: Электростанции различного типа, которые генерируют электроэнергию.</p></li><li><p>Трансформаторные подстанции: Используются для повышения или понижения напряжения для передачи и распределения электроэнергии.</p></li><li><p>Линии электропередачи и кабели: Передают электроэнергию от электростанций к подстанциям и далее к потребителям.</p></li><li><p>Распределительные сети: Обеспечивают передачу электроэнергии от подстанций к промышленным, коммерческим и жилым потребителям.</p></li><li><p>Потребители: Конечные пользователи электрической энергии, включая домашние хозяйства, предприятия и прочие объекты.</p></li></ol><p>Схемы районных электрических сетей помогают понять структуру и функционирование системы электроснабжения в конкретном районе, что облегчает планирование и управление электроэнергетической инфраструктурой.</p></div>"],["Схемы городских и сельских электрических сетей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы городских и сельских электрических сетей:</p><p>Схемы городских и сельских электрических сетей представляют собой графическое изображение структуры и компонентов системы электроснабжения для соответствующих территорий - городских населенных пунктов и сельских районов.</p><p>Схемы городских электрических сетей:</p><ol><li><p>Городские электрические сети обслуживают жилые районы, коммерческие зоны, промышленные районы и другие объекты внутри города.</p></li><li><p>В них могут присутствовать подстанции различных уровней, включая распределительные подстанции, обслуживающие близлежащие районы, и трансформаторные подстанции с повышающими или понижающими трансформаторами.</p></li><li><p>Городские электрические сети обычно имеют более высокое напряжение в сравнении с сельскими, так как они часто работают в условиях высокой плотности населения и больших нагрузок.</p></li><li><p>Они обеспечивают подачу электроэнергии на городские объекты, такие как дома, офисы, магазины, больницы, образовательные учреждения и прочие.</p></li></ol><p>Схемы сельских электрических сетей:</p><ol><li><p>Сельские электрические сети обслуживают малонаселенные районы, деревни, сельские поселения и фермерские хозяйства.</p></li><li><p>Они обычно имеют меньшее напряжение в сравнении с городскими сетями, так как сельские районы имеют более рассредоточенное население и меньшие энергопотребности.</p></li><li><p>В сельских сетях могут присутствовать подстанции небольшой мощности, а линии передачи и распределительные сети могут иметь большую протяженность для обслуживания удаленных зон.</p></li><li><p>Сельские электрические сети обеспечивают электроснабжение домов, ферм, сельскохозяйственных предприятий и других объектов в сельских районах.</p></li></ol><p>Обе схемы (городских и сельских электрических сетей) включают генерирующие источники, трансформаторы, линии передачи, подстанции и потребителей, но их характеристики и организация могут различаться в зависимости от территориальных и экономических условий, а также особенностей энергопотребления населения и промышленности в данных регионах.</p></div>"],["Схемы электрических сетей промышленных предприятий.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы электрических сетей промышленных предприятий:</p><p>Схемы электрических сетей промышленных предприятий представляют графическое изображение структуры и компонентов системы электроснабжения на промышленных объектах, таких как заводы, фабрики, шахты, нефтеперерабатывающие предприятия и другие промышленные комплексы.</p><p>Особенности схем электрических сетей промышленных предприятий:</p><ol><li><p>Внутрипредприятийская сеть: Схемы электрических сетей промышленных предприятий фокусируются на внутренних сетях объекта. Они включают в себя распределительные системы, обслуживающие различные зоны предприятия и обеспечивающие электроэнергией различные производственные и административные помещения.</p></li><li><p>Высокая мощность: Промышленные предприятия обычно имеют значительные энергопотребности, что требует применения более высоких напряжений и больших мощностей для передачи и распределения электроэнергии.</p></li><li><p>Разнообразные потребители: На промышленных предприятиях работают различные производственные установки и оборудование с разнообразными энергопотребностями, что требует грамотного планирования и организации схемы электрической сети.</p></li><li><p>Резервирование: Некоторые промышленные предприятия имеют резервные и автономные источники электропитания для обеспечения непрерывности работы в случае сбоев во внешних сетях.</p></li></ol><p>Схемы электрических сетей промышленных предприятий обычно включают:</p><ul><li>Подстанции и распределительные узлы, обеспечивающие преобразование и распределение электроэнергии на объекте.</li><li>Линии передачи и кабельные трассы, связывающие подстанции с производственными зонами и зданиями.</li><li>Распределительные щиты и панели управления, обслуживающие различные группы потребителей.</li><li>Оборудование управления и контроля, позволяющее следить и управлять электроэнергетическими процессами.</li></ul><p>Схемы электрических сетей промышленных предприятий имеют особое значение для эффективного и безопасного функционирования производственных процессов и обеспечения непрерывного электроснабжения на предприятиях различных отраслей промышленности.</p></div>"],["Схемы электрических сетей до 1000 В.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы электрических сетей до 1000 В:</p><p>Схемы электрических сетей до 1000 В представляют графическое изображение структуры и компонентов системы электроснабжения, где номинальное напряжение не превышает 1000 Вольт (В). Такие схемы включают в себя оборудование и сети с низким, средним и высоким напряжением, используемые для передачи и распределения электроэнергии в различных местах.</p><p>Особенности схем электрических сетей до 1000 В:</p><ol><li><p>Низковольтные сети: В схемах электрических сетей до 1000 В присутствуют низковольтные сети с напряжением обычно до 1000 В. Эти сети обслуживают жилые дома, мелкие предприятия, магазины и другие объекты сравнительно небольшого энергопотребления.</p></li><li><p>Средневольтные сети: В этих схемах могут присутствовать средневольтные сети с напряжением от 1000 В до нескольких десятков кВ. Средневольтные сети используются для передачи электроэнергии на значительные расстояния от подстанций к районным подстанциям или для обслуживания крупных потребителей.</p></li><li><p>Высоковольтные сети: В редких случаях в схемах до 1000 В могут быть представлены высоковольтные сети с напряжением выше 1000 В. Это связано с особыми условиями энергоснабжения и ограничениями территории.</p></li><li><p>Подстанции и трансформаторы: Схемы до 1000 В могут включать подстанции различных уровней, трансформаторы для изменения напряжения, а также распределительные устройства для подачи электроэнергии к потребителям.</p></li><li><p>Распределительные сети: От подстанций электроэнергия поступает в распределительные сети, которые обеспечивают передачу электроэнергии от подстанций к конечным потребителям.</p></li><li><p>Потребители: Конечные пользователи электрической энергии, такие как домашние хозяйства, малые и средние предприятия, офисы и другие объекты, подключенные к низковольтным сетям.</p></li></ol><p>Схемы электрических сетей до 1000 В позволяют визуализировать и понять организацию электроэнергетических систем, обеспечивающих электроснабжение различных потребителей на территории с низким, средним и высоким напряжением.</p></div>"],["Конструкция воздушных линий (ВЛ) электропередачи и кабельных линий (КЛ) электропередачи.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Конструкция воздушных линий (ВЛ) электропередачи и кабельных линий (КЛ) электропередачи:</p><p>Воздушные линии электропередачи (ВЛ) и кабельные линии электропередачи (КЛ) - это два основных типа линий, используемых для передачи и распределения электроэнергии от генерирующих источников к потребителям.</p><p>Конструкция воздушных линий электропередачи (ВЛ):</p><ol><li><p>Провода: Воздушные линии используют провода из алюминиевых или сталеалюминиевых проводов с различными сечениями. Толщина проводов зависит от уровня напряжения и нагрузки, которую необходимо передать.</p></li><li><p>Поддерживающие конструкции: ВЛ поддерживаются на высоких мачтах, башнях или столбах из различных материалов, таких как сталь, бетон или дерево. Эти конструкции обеспечивают необходимую высоту для прокладки проводов и сохраняют необходимый расстояние между проводами и землей или окружающими объектами.</p></li><li><p>Изоляторы: Изоляторы, обычно выполненные из керамики или композитных материалов, используются для изоляции проводов от опор и башен. Они предотвращают перенос электрического тока на опоры и обеспечивают безопасность работы линий.</p></li></ol><p>Конструкция кабельных линий электропередачи (КЛ):</p><ol><li><p>Электрические кабели: Кабельные линии используют кабели с проводниками, обычно из меди или алюминия, заключенными в изоляционные материалы, такие как пластик, резина или полиэтилен. Кабели могут быть одно-, двух-, трех- или многожильными, в зависимости от конкретного применения.</p></li><li><p>Защитные оболочки: Кабели могут иметь внешние защитные оболочки, обеспечивающие дополнительную защиту от воздействия окружающей среды, влаги, механических повреждений и т.д.</p></li><li><p>Укладка: Кабели укладываются под землей, в кабельных каналах или в кабельных траншеях. В отличие от воздушных линий, кабельные линии не требуют высоких опор и могут быть спрятаны под землей, что делает их более эстетичными и подходящими для городских сред.</p></li><li><p>Соединения: Кабельные линии имеют специальные соединения и герметичные муфты, которые обеспечивают надежную и безопасную работу кабельной системы.</p></li></ol><p>Обе конструкции (ВЛ и КЛ) имеют свои преимущества и применяются в различных условиях в зависимости от требований к электропередаче, местоположения линий и потребностей объектов электроснабжения.</p></div>"],["Требования к электрическим сетям.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Требования к электрическим сетям:</p><p>Электрические сети являются критической инфраструктурой для обеспечения надежного и безопасного электроснабжения. Для обеспечения эффективной работы и защиты электрических систем существуют различные требования, которые определяются нормативами, стандартами и правилами.</p><ol><li><p>Надежность: Электрические сети должны быть спроектированы и построены с учетом высокой надежности. Это включает применение надежного оборудования, выполнение регулярного технического обслуживания и быстрое восстановление работы системы в случае аварий.</p></li><li><p>Безопасность: Сети должны обеспечивать безопасную работу для персонала, работающего с оборудованием, и для общества в целом. Это включает соответствие электрических установок и оборудования соответствующим нормативам и правилам безопасности.</p></li><li><p>Эффективность: Сети должны быть спроектированы таким образом, чтобы обеспечивать эффективное использование электроэнергии и минимизировать потери энергии в процессе передачи и распределения.</p></li><li><p>Гибкость: Электрические сети должны быть гибкими и адаптивными, чтобы справляться с изменяющимися условиями нагрузки и потребностей в электроэнергии. С возрастанием числа возобновляемых источников энергии сети должны быть способны эффективно интегрировать различные источники.</p></li><li><p>Защита от перегрузок и коротких замыканий: Сети должны быть оборудованы системами защиты, которые автоматически отключают определенные участки сети в случае перегрузки или короткого замыкания. Это предотвращает повреждение оборудования и улучшает надежность системы.</p></li><li><p>Качество электроэнергии: Сети должны обеспечивать стабильное напряжение и частоту, а также минимизировать искажения сигнала, чтобы обеспечить качественное электропитание для всех потребителей.</p></li><li><p>Соответствие стандартам: Электрические сети должны соответствовать нормативам и стандартам, установленным соответствующими органами и регуляторами, чтобы обеспечить единый подход к проектированию, строительству и эксплуатации системы.</p></li><li><p>Экологическая устойчивость: Сети должны стремиться к экологической устойчивости, уменьшению выбросов и эффективному использованию ресурсов для минимизации воздействия на окружающую среду.</p></li></ol><p>Соблюдение этих требований позволяет обеспечить стабильное, надежное и безопасное электроснабжение для потребителей, а также способствует устойчивому развитию электроэнергетической отрасли.</p></div>"],["Схемы замещения и параметры ЛЭП.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы замещения и параметры ЛЭП:</p><p>Схемы замещения и параметры ЛЭП (линий электропередачи) являются важными концепциями в области электроэнергетики, связанными с анализом и моделированием электрических сетей.</p><ol><li>Схемы замещения:</li></ol><p>Схемы замещения используются для представления сложных электрических сетей в упрощенной форме, позволяя более легко анализировать их поведение и характеристики. В основе схем замещения лежит замена реальных элементов сети (таких как линии, трансформаторы и генераторы) их эквивалентными схемами с учетом основных параметров.</p><ul><li><p>Однофазная схема замещения: Эта схема представляет каждую трехфазную систему в виде одного эквивалентного элемента, учитывая параметры симметричной компоненты. Она используется для моделирования симметричных систем сбалансированных нагрузок.</p></li><li><p>Двухфазная схема замещения: Используется для небалансированных систем и включает два эквивалентных элемента, учитывая параметры двух фаз.</p></li><li><p>Трехфазная схема замещения: Используется для общего моделирования трехфазных систем с учетом всех трех фаз.</p></li></ul><ol start=\\"2\\"><li>Параметры ЛЭП:</li></ol><p>Параметры ЛЭП представляют собой характеристики, определяющие поведение линий электропередачи. Они включают следующие параметры:</p><ul><li><p>Сопротивление (R): Сопротивление линии обусловлено материалами, из которых она изготовлена, и определяет потери энергии в линии при прохождении тока.</p></li><li><p>Индуктивность (L): Индуктивность линии связана с ее геометрией и материалом и определяет индуктивное сопротивление линии.</p></li><li><p>Емкость (C): Ёмкость между проводами линии и землей вызывает эффект емкостного тока, который учитывается в расчетах электромагнитных параметров сети.</p></li><li><p>Проводимость (G): Характеризует потери энергии на силовых линиях в виде дополнительных потерь.</p></li><li><p>Заземление: Характеристики системы заземления также являются важными параметрами, определяющими безопасность и эффективность работы ЛЭП.</p></li></ul><p>Корректное определение параметров ЛЭП позволяет выполнять точные расчеты и анализ работы электрических сетей, что важно для планирования, проектирования и обслуживания электроэнергетических систем.</p></div>"],["Схемы замещения и параметры двухобмоточных трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы замещения и параметры двухобмоточных трансформаторов:</p><p>Двухобмоточные трансформаторы являются ключевыми компонентами электрических сетей, используемыми для преобразования напряжения и тока. Они широко применяются для передачи и распределения электроэнергии, а также в различных электротехнических устройствах.</p><p>Схемы замещения трансформаторов:</p><p>Схемы замещения трансформаторов представляют собой упрощенные модели трансформаторов, которые учитывают основные параметры и характеристики трансформаторов, позволяя анализировать их поведение в электрических схемах.</p><ol><li><p>Схема замещения трансформатора с одной обмоткой: Эта схема используется для представления трансформаторов с одной обмоткой, например, автотрансформаторов. В таких трансформаторах обмотка является и одной первичной и одной вторичной обмоткой, и они связаны между собой.</p></li><li><p>Схема замещения трансформатора с двумя обмотками: Эта схема используется для традиционных двухобмоточных трансформаторов с двумя обмотками - первичной и вторичной. Она представляет обмотки трансформатора как независимые элементы с учетом соответствующих параметров.</p></li></ol><p>Параметры двухобмоточных трансформаторов:</p><ol><li><p>Номинальное напряжение: Номинальное напряжение первичной и вторичной обмоток трансформатора - это напряжение, для которого трансформатор спроектирован и оценивается.</p></li><li><p>Отношение трансформации: Отношение трансформации определяет, какое отношение между напряжениями на первичной и вторичной обмотках трансформатора.</p></li><li><p>Полные мощности: Полные мощности трансформатора определяют, какую мощность он может передавать с первичной на вторичную сторону.</p></li><li><p>Потери: Потери трансформатора включают потери в обмотках (сопротивление проводов) и потери в магнитопроводе (истинные потери).</p></li><li><p>Индуктивность обмоток: Индуктивность обмоток трансформатора определяет его способность к преобразованию электрической энергии.</p></li></ol><p>Параметры и схемы замещения трансформаторов играют важную роль в планировании, проектировании и эксплуатации электрических сетей, а также в оценке их эффективности и надежности.</p></div>"],["Схемы замещения и параметры трехобмоточных трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы замещения и параметры трехобмоточных трансформаторов:</p><p>Трехобмоточные трансформаторы - это особый тип трансформаторов, которые имеют три обмотки: две низковольтных и одну высоковольтную. Они используются в различных приложениях, включая передачу и распределение электроэнергии, а также в сложных электротехнических системах.</p><p>Схемы замещения трехобмоточных трансформаторов:</p><p>Трехобмоточные трансформаторы представляются в виде схем замещения, которые учитывают основные характеристики трансформатора для его анализа в электрических сетях. Такие схемы включают три обмотки трансформатора и параметры, связанные с каждой обмоткой.</p><ol><li>Схема замещения трехобмоточного трансформатора:</li></ol><p>Трехобмоточный трансформатор может быть представлен в виде схемы замещения с тремя обмотками - первичной, вторичной и третьей обмотками. Эта схема позволяет учитывать эффекты взаимодействия между всеми тремя обмотками трансформатора и проводить анализ электромагнитных параметров с учетом всех трех обмоток.</p><p>Параметры трехобмоточных трансформаторов:</p><ol><li><p>Номинальное напряжение: Номинальное напряжение первичной, вторичной и третьей обмоток трансформатора определяет напряжения, на которых трансформатор спроектирован и рассчитывается.</p></li><li><p>Отношения трансформации: Отношения трансформации между первичной и вторичной обмотками, а также между первичной и третьей обмотками, и между вторичной и третьей обмотками определяют, какое отношение между напряжениями на различных обмотках трансформатора.</p></li><li><p>Полные мощности: Полные мощности трехобмоточного трансформатора указывают, какую мощность он может передавать на каждую обмотку.</p></li><li><p>Потери: Потери трансформатора включают потери в обмотках (сопротивление проводов) и потери в магнитопроводе (истинные потери).</p></li><li><p>Индуктивность обмоток: Индуктивность обмоток трехобмоточного трансформатора определяет его способность к преобразованию электрической энергии между различными обмотками.</p></li></ol><p>Трехобмоточные трансформаторы применяются в сложных электрических системах, где требуется множество различных напряжений, и где необходима возможность совместного использования одного трансформатора для разных целей. Анализ их характеристик и параметров является важным аспектом в планировании и эксплуатации электроэнергетических систем.</p></div>"],["Потери мощности в линиях и трансформаторах.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Потери мощности в линиях и трансформаторах:</p><p>Потери мощности являются неизбежной частью процесса передачи и распределения электроэнергии в электроэнергетических системах. Они возникают из-за различных физических процессов и электротехнических характеристик элементов системы и могут быть разделены на два основных типа: потери мощности в линиях электропередачи и потери мощности в трансформаторах.</p><p>Потери мощности в линиях электропередачи:</p><ol><li><p>Потери из-за сопротивления проводов: Когда ток протекает через проводники линии электропередачи, возникают потери мощности из-за сопротивления материала проводника. Эти потери пропорциональны квадрату тока и прямо пропорциональны сопротивлению провода.</p></li><li><p>Потери в земле: В некоторых случаях электрические линии могут иметь контур заземления или быть установлены на земле. В этом случае мощность также расходуется на преодоление сопротивления земли.</p></li><li><p>Потери из-за ёмкости и индуктивности линий: Воздушные линии электропередачи обладают емкостью между проводами и индуктивностью проводов. Эти эффекты могут вызывать пропорциональные току потери мощности.</p></li><li><p>Дополнительные потери: Другие факторы, такие как корона, механические потери и эффект скин-эффекта, также могут вызывать дополнительные потери мощности в линиях.</p></li></ol><p>Потери мощности в трансформаторах:</p><ol><li><p>Потери в обмотках: Трансформаторы имеют сопротивление проводов в своих обмотках, что вызывает потери мощности при прохождении тока через них.</p></li><li><p>Потери в магнитопроводе: Трансформаторы также имеют потери, связанные с намагничиванием и демагничиванием магнитопровода из-за переменного магнитного поля.</p></li><li><p>Дополнительные потери: Другие факторы, такие как эффекты зазоров, потери из-за нагрева и потери в конструкции трансформатора, также могут вызывать дополнительные потери мощности.</p></li></ol><p>Уменьшение потерь мощности в линиях и трансформаторах является важным аспектом эффективности и надежности электроэнергетических систем. Оптимизация параметров и выбор подходящих материалов позволяют снизить эти потери и повысить эффективность системы.</p></div>"],["Потери энергии в линиях и трансформаторах.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Потери энергии в линиях и трансформаторах:</p><p>Потери энергии в электроэнергетических системах возникают из-за различных физических процессов, которые происходят при передаче, распределении и преобразовании электроэнергии. Эти потери приводят к тому, что часть энергии, которая поступает в систему, не используется полностью для выполнения полезной работы, а расходуется на нагрев оборудования и сопутствующие процессы.</p><p>Потери энергии в линиях электропередачи:</p><ol><li><p>Потери из-за сопротивления проводов: Самые значительные потери энергии в линиях электропередачи связаны с сопротивлением материала проводов. Когда ток протекает через проводники, возникают потери энергии в виде тепла из-за сопротивления проводов.</p></li><li><p>Потери в земле: Если линия электропередачи имеет контур заземления или проходит через землю, то также возникают потери энергии в земле из-за сопротивления земли.</p></li><li><p>Потери из-за ёмкости и индуктивности линий: Воздушные линии электропередачи обладают ёмкостью между проводами и индуктивностью проводов. Эти эффекты также вызывают потери энергии.</p></li><li><p>Дополнительные потери: Другие факторы, такие как корона, механические потери и эффект скин-эффекта, также могут вызывать дополнительные потери энергии.</p></li></ol><p>Потери энергии в трансформаторах:</p><ol><li><p>Потери в обмотках: В трансформаторах возникают потери энергии из-за сопротивления проводов в обмотках, что вызывает нагрев обмоток и потери мощности.</p></li><li><p>Потери в магнитопроводе: Трансформаторы также имеют потери, связанные с намагничиванием и демагничиванием магнитопровода из-за переменного магнитного поля.</p></li><li><p>Дополнительные потери: Другие факторы, такие как эффекты зазоров, потери из-за нагрева и потери в конструкции трансформатора, также могут вызывать дополнительные потери энергии.</p></li></ol><p>Уменьшение потерь энергии в линиях и трансформаторах является важной задачей для повышения эффективности и надежности электроэнергетических систем. Использование более эффективных материалов, оптимизация параметров и применение передовых технологий позволяют снизить эти потери и повысить энергоэффективность системы.</p></div>"],["Мероприятия по снижению потерь мощности и энергии в электрических сетях.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Мероприятия по снижению потерь мощности и энергии в электрических сетях:</p><p>Снижение потерь мощности и энергии в электрических сетях является важной задачей для повышения эффективности и энергоэффективности электроэнергетических систем. Для достижения этой цели применяются различные мероприятия, которые направлены на оптимизацию работы системы и снижение потерь. Некоторые из таких мероприятий включают:</p><ol><li><p>Оптимизация режимов работы оборудования: Использование современных методов управления и автоматизации позволяет оптимизировать режимы работы оборудования, чтобы уменьшить потери мощности и энергии.</p></li><li><p>Повышение эффективности трансформаторов: Использование высокоэффективных трансформаторов с улучшенными характеристиками магнитопровода и материалов обмоток позволяет снизить потери мощности в трансформаторах.</p></li><li><p>Установка компенсирующих устройств: Применение компенсирующих устройств, таких как компенсаторы реактивной мощности и статические компенсаторы, позволяет снизить потери мощности, связанные с реактивной нагрузкой.</p></li><li><p>Модернизация линий электропередачи: Замена устаревших проводов на более эффективные и низкосопротивленческие материалы позволяет уменьшить потери мощности в линиях электропередачи.</p></li><li><p>Улучшение системы заземления: Применение эффективной системы заземления помогает уменьшить потери мощности и энергии из-за утечки тока в землю.</p></li><li><p>Автоматизация и удаленное управление: Внедрение систем автоматизации и удаленного управления позволяет эффективно контролировать и оптимизировать работу электрических сетей, что способствует снижению потерь.</p></li><li><p>Энергоаудит и анализ: Проведение энергоаудита и анализа позволяет выявить узкие места и определить приоритетные направления для снижения потерь мощности и энергии.</p></li><li><p>Обучение и повышение осведомленности: Повышение осведомленности и обучение персонала электроэнергетических систем по энергосбережению и эффективному управлению энергией способствует улучшению работы системы.</p></li></ol><p>Комбинация этих мероприятий позволяет добиться снижения потерь мощности и энергии в электрических сетях, что приводит к повышению эффективности и устойчивости работы системы.</p></div>"],["Векторная диаграмма линии электропередачи. Зависимости между напряжениями и мощностями начала и конца звена электрической сети.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Векторная диаграмма линии электропередачи и зависимости между напряжениями и мощностями начала и конца звена электрической сети:</p><p>Векторная диаграмма - это инструмент для визуального представления фазных величин в трехфазных системах электроэнергии. В случае линии электропередачи векторные диаграммы используются для анализа состояния и поведения электрических величин на разных участках линии.</p><p>Когда электроэнергия передается по линии электропередачи, возникают потери мощности из-за сопротивления проводов и других физических процессов. В результате возникают различия между напряжениями и мощностями на начале (источнике) и конце (нагрузке) линии.</p><p>Векторные диаграммы позволяют понять эти различия и анализировать следующие зависимости:</p><ol><li><p>Зависимость напряжений: На векторной диаграмме можно увидеть, что напряжение на начале линии (источнике) отличается от напряжения на конце линии (нагрузке). Это различие в напряжениях связано с потерями мощности в линии и сопротивлением проводов.</p></li><li><p>Зависимость мощностей: Также на векторной диаграмме можно увидеть, что мощность на начале линии (источнике) отличается от мощности на конце линии (нагрузке). Это связано с потерями мощности и реактивной мощностью, которая обусловлена индуктивными и емкостными характеристиками линии.</p></li><li><p>Зависимость фазовых углов: Векторные диаграммы также позволяют анализировать различие в фазовых углах между напряжениями на начале и конце линии. Это может быть важно при определении фазового сдвига между источником и нагрузкой.</p></li></ol><p>Анализ векторных диаграмм линии электропередачи позволяет инженерам и операторам электрических сетей понимать поведение системы и принимать меры для снижения потерь мощности, улучшения эффективности и обеспечения стабильной передачи электроэнергии от источника к нагрузке.</p></div>"],["Потеря и падение напряжения. Векторная диаграмма линии электропередачи.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Потеря и падение напряжения. Векторная диаграмма линии электропередачи:</p><p>Потеря напряжения и падение напряжения - это два термина, связанных с электрической передачей энергии по линиям электропередачи. Они описывают разницу напряжения между началом и концом линии и являются важными параметрами для оценки эффективности передачи электроэнергии.</p><ol><li><p>Падение напряжения: Падение напряжения обозначает разницу напряжения между источником электроэнергии (например, подстанцией или генератором) и нагрузкой (потребителем) на конце линии. Падение напряжения возникает из-за потерь энергии на сопротивлении проводов и других компонентов линии. Когда ток протекает по проводам, возникают потери мощности из-за сопротивления материала проводов, что приводит к падению напряжения от начала линии к концу.</p></li><li><p>Потеря напряжения: Потеря напряжения - это суммарная разница напряжения во всей линии электропередачи. Она включает в себя падение напряжения на линии и потери напряжения во всех элементах системы, таких как трансформаторы, реакторы и другие устройства. Потеря напряжения может быть выражена как разница между напряжением на начале линии и напряжением на конце линии.</p></li></ol><p>Векторная диаграмма линии электропередачи - это инструмент для визуального представления фазных величин и фазовых углов в трехфазных системах электроэнергии. На векторной диаграмме можно представить напряжения и токи на начале и конце линии, а также углы сдвига фаз между ними.</p><p>Векторная диаграмма позволяет наглядно увидеть разницу напряжения и фазовый сдвиг между источником и нагрузкой. Она помогает в анализе потерь напряжения и определении оптимальных параметров для уменьшения потерь мощности и обеспечения стабильной передачи электроэнергии в электрических сетях.</p></div>"],["Расчеты режимов поданным конца передачи. Расчет напряжений в узлах. Расчет баланса мощности.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчеты режимов поданным конца передачи, расчет напряжений в узлах и расчет баланса мощности являются важными задачами в электроэнергетике и позволяют анализировать и оптимизировать работу электрических сетей.</p><ol><li><p>Расчеты режимов поданным конца передачи: Этот расчет направлен на определение параметров электрической системы на поданным конца линии электропередачи (например, на конце подстанции или генератора). В ходе расчетов определяются напряжение, токи, активная и реактивная мощности, фазовые углы и другие параметры. Эти данные важны для оценки надежности и эффективности работы системы, а также для выбора оптимальных настроек оборудования.</p></li><li><p>Расчет напряжений в узлах: Расчет напряжений в узлах электрической системы является ключевым для обеспечения нормального функционирования сети. В узлах происходит распределение электроэнергии к различным нагрузкам. Расчет напряжений позволяет проверить, соответствуют ли напряжения в узлах установленным нормативам и требованиям. Если напряжения ниже нормативных значений, это может привести к проблемам с нагрузками и качеством электроэнергии.</p></li><li><p>Расчет баланса мощности: Расчет баланса мощности - это процесс определения разницы между активной мощностью, производимой в электростанциях, и потребляемой активной мощностью нагрузками. Баланс мощности должен быть поддерживается на оптимальном уровне для стабильной работы системы. Если баланс нарушается, это может привести к сбоям в работе сети и возникновению перегрузок или нехватке электроэнергии.</p></li></ol><p>Все эти расчеты выполняются с использованием математических методов и программного обеспечения, специально разработанных для анализа электрических систем и сетей. Они помогают инженерам электроэнергетики принимать информированные решения по повышению эффективности, стабильности и надежности электрических систем.</p></div>"],["Расчет режима неразветвленных и разветвленных разомкнутых сетей одного номинального напряжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчет режима неразветвленных и разветвленных разомкнутых сетей одного номинального напряжения:</p><p>Режимы работы электрических сетей одного номинального напряжения могут быть разделены на две основные категории: неразветвленные и разветвленные разомкнутые сети. В обоих случаях рассматривается передача электроэнергии от источника к нагрузке, но в зависимости от структуры сети, методы расчета могут отличаться.</p><ol><li><p>Расчет режима неразветвленных сетей: Неразветвленные разомкнутые сети представляют собой простые линии передачи, в которых электроэнергия передается от источника к нагрузке без переключения на другие ветви. Для расчета режима неразветвленной сети используются методы, основанные на уравнениях Кирхгофа, законах сохранения энергии и законах Ома. На основе этих методов определяются токи, напряжения и мощности в различных узлах сети.</p></li><li><p>Расчет режима разветвленных сетей: Разветвленные разомкнутые сети имеют сложную структуру, включающую несколько параллельных линий передачи, разветвлений и переключений. Расчет таких сетей требует применения более сложных методов, таких как метод потенциалов или метод узловых токов. При расчете учитываются все ветви сети, и определяются токи, напряжения и мощности в каждой ветви и узле.</p></li></ol><p>В обоих случаях расчеты могут быть выполнены с использованием математических методов и программного обеспечения, разработанного специально для анализа электрических сетей. Эти расчеты помогают инженерам и операторам электрических сетей принимать информированные решения по управлению сетью, оптимизации ее работы и обеспечению надежности передачи электроэнергии к потребителям.</p></div>"],["Расчет разомкнутых сетей местного значения. Допустимые потери напряжения в местных электрических сетях.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчет разомкнутых сетей местного значения. Допустимые потери напряжения в местных электрических сетях:</p><p>Разомкнутые сети местного значения (РСМ) представляют собой маломасштабные сети, которые обычно используются для передачи электроэнергии на небольшие расстояния внутри населенных пунктов, промышленных объектов или других ограниченных территорий. Эти сети имеют свои особенности и параметры, которые учитываются при их расчете.</p><p>Расчет разомкнутых сетей местного значения включает следующие этапы:</p><ol><li><p>Подбор параметров элементов сети: Этот этап включает определение характеристик и параметров элементов сети, таких как провода, трансформаторы, реакторы и другие устройства. При подборе параметров учитываются требования к надежности, нагрузочной способности и эффективности сети.</p></li><li><p>Расчет токов и напряжений: На этом этапе выполняются расчеты токов и напряжений в различных участках сети. Это включает определение фазовых токов, фазовых напряжений и амплитудных значений переменных величин на различных участках сети.</p></li><li><p>Учет потерь напряжения: Допустимые потери напряжения в местных электрических сетях зависят от спецификаций и стандартов, регулирующих энергоснабжение в данной области. Обычно допустимые потери напряжения определяются в процентах от номинального напряжения сети и могут варьироваться в зависимости от конкретных условий.</p></li><li><p>Оценка надежности и эффективности сети: После выполнения расчетов осуществляется оценка надежности и эффективности сети. Это включает анализ потерь мощности, стабильности напряжения и способности сети справляться с предполагаемыми нагрузками.</p></li></ol><p>Важно отметить, что расчеты разомкнутых сетей местного значения должны выполняться с учетом специфических требований и регулирования в данной стране или регионе. Допустимые потери напряжения и другие параметры могут различаться в разных местах в соответствии с местными нормативами и стандартами.</p></div>"],["Расчет режима разомкнутых сетей нескольких номинальных напряжений. Учет трансформаторов при расчете режима электрической сети.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчет режима разомкнутых сетей нескольких номинальных напряжений. Учет трансформаторов при расчете режима электрической сети:</p><p>Разомкнутые сети с несколькими номинальными напряжениями представляют собой сложные электрические сети, включающие различные уровни напряжения. Это может быть типично для систем передачи электроэнергии, где существуют подстанции и трансформаторы, которые позволяют переводить напряжение на различные уровни для передачи на большие расстояния и обеспечения электроснабжения населенных пунктов.</p><p>Расчет режима разомкнутых сетей с несколькими номинальными напряжениями включает следующие этапы:</p><ol><li><p>Подбор параметров элементов сети: Этот этап включает определение характеристик и параметров элементов сети, таких как провода, трансформаторы, реакторы и другие устройства. Для учета трансформаторов, важно знать их параметры, такие как номинальное напряжение, коэффициенты трансформации и потери мощности.</p></li><li><p>Расчет токов и напряжений: На этом этапе производится расчет токов и напряжений на различных участках сети с учетом трансформаторов. При этом учитываются коэффициенты трансформации, которые определяют соотношение напряжений между различными уровнями сети.</p></li><li><p>Учет потерь напряжения: Допустимые потери напряжения в разомкнутых сетях с несколькими номинальными напряжениями также определяются в соответствии с местными нормативами и стандартами. Учет потерь напряжения позволяет оценить эффективность передачи электроэнергии через различные уровни сети.</p></li><li><p>Оценка надежности и эффективности сети: После выполнения расчетов проводится оценка надежности и эффективности сети. Это включает анализ потерь мощности, стабильности напряжения, уровня перегрузок и других параметров, которые могут влиять на работу сети.</p></li></ol><p>Расчет режима разомкнутых сетей с несколькими номинальными напряжениями является сложной задачей, и для его выполнения используются специализированные программы и математические методы. Это позволяет инженерам электроэнергетики анализировать и оптимизировать работу сложных электрических сетей с различными уровнями напряжения для обеспечения стабильного и надежного электроснабжения потребителей.</p></div>"],["Основные уравнения, определяющие режим линии электропередачи. Линия без потерь. Режим натуральной мощности.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные уравнения, определяющие режим линии электропередачи. Линия без потерь. Режим натуральной мощности:</p><p>Основные уравнения, которые описывают режим линии электропередачи, основаны на законах Кирхгофа, законе Ома и уравнениях передачи мощности.</p><ol><li><p>Законы Кирхгофа: Законы Кирхгофа относятся к сохранению электрических токов и напряжений в узлах электрической сети. Для режима линии электропередачи применяется закон Кирхгофа для токов, согласно которому сумма токов, втекающих в узел, равна сумме токов, исходящих из узла.</p></li><li><p>Закон Ома: Закон Ома определяет связь между напряжением, током и сопротивлением элементов линии электропередачи. В режиме линии без потерь предполагается отсутствие активных (действительных) потерь, и, следовательно, сопротивление линии равно нулю. Таким образом, по закону Ома, напряжение на линии пропорционально току, а это является одним из основных уравнений для расчета режима линии без потерь.</p></li><li><p>Уравнения передачи мощности: Для линии без потерь режим натуральной мощности достигается при равенстве мощностей на входе и выходе линии. То есть, активная мощность, подаваемая на линию, равна активной мощности, потребляемой с линии. Это уравнение может быть записано как P_вход = P_выход, где P_вход - активная мощность на входе линии, P_выход - активная мощность на выходе линии.</p></li></ol><p>Режим натуральной мощности характеризует линию без потерь и подразумевает, что энергия передается от источника к потребителю без потерь активной мощности на линии. В этом режиме мощность передается без изменения и не возникает активных потерь мощности на проводах.</p><p>Эти уравнения являются основой для математического моделирования и расчета режима линии электропередачи, что позволяет инженерам электроэнергетики оптимизировать работу линий и обеспечивать стабильную и эффективную передачу электроэнергии от источника к потребителю.</p></div>"],["Расчет сети с двусторонним питанием. Определение точки потокораздела.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчет сети с двусторонним питанием. Определение точки потокораздела:</p><p>Сеть с двусторонним питанием - это электрическая сеть, в которой электроэнергия может передаваться в обоих направлениях, то есть как от источника к потребителю, так и от потребителя обратно к источнику. Такие сети часто используются для эффективной передачи энергии, обеспечения надежности и устойчивости энергосистем.</p><p>Определение точки потокораздела - это определение такой точки или участка в сети, где происходит разделение потока электроэнергии на две или более ветви с различными направлениями передачи. При этом мощность электроэнергии распределяется между различными направлениями передачи в зависимости от характеристик нагрузки и параметров сети.</p><p>Расчет сети с двусторонним питанием и определение точки потокораздела включает следующие шаги:</p><ol><li><p>Построение математической модели сети: Этот шаг включает построение математической модели сети с учетом всех элементов, таких как генераторы, нагрузки, трансформаторы, линии передачи и другие устройства. Модель может быть представлена в виде узлов и ветвей, а также уравнений, описывающих токи и напряжения в сети.</p></li><li><p>Решение системы уравнений: После построения математической модели, выполняется решение системы уравнений, описывающих режим работы сети. Решение системы уравнений позволяет определить распределение мощности и напряжений в сети.</p></li><li><p>Определение точки потокораздела: По результатам расчета определяется точка или участок в сети, где происходит разделение потока электроэнергии на две или более ветви с различными направлениями передачи. В этой точке или участке мощность электроэнергии распределяется между различными направлениями передачи.</p></li></ol><p>Определение точки потокораздела важно для обеспечения стабильной и эффективной работы сети с двусторонним питанием. Это позволяет учитывать различные возможности передачи электроэнергии и обеспечивать баланс мощности в разных направлениях, что способствует повышению надежности и устойчивости энергосистемы.</p></div>"],["Расчет сложнозамкнутой сети. Метод контурных токов. Метод узловых напряжений.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчет сложнозамкнутой сети. Метод контурных токов. Метод узловых напряжений:</p><p>Расчет сложнозамкнутой электрической сети представляет собой процесс определения токов и напряжений в различных участках сети при наличии различных источников, нагрузок и элементов сети, таких как трансформаторы, линии передачи и другие устройства.</p><ol><li><p>Метод контурных токов: Этот метод основан на применении закона Кирхгофа для контуров в сети. По закону Кирхгофа сумма алгебраических значений токов в любом замкнутом контуре равна нулю. Для сложнозамкнутой сети, представленной в виде контуров, уравнения закона Кирхгофа составляют систему уравнений, которую можно решить для определения токов в каждом контуре сети.</p></li><li><p>Метод узловых напряжений: В этом методе сеть представляется в виде узлов (точек соединения элементов сети). Применяется закон сохранения мощности, согласно которому сумма мощностей на входе в узел равна сумме мощностей на выходе из узла. При использовании метода узловых напряжений уравнения закона сохранения мощности формируют систему уравнений, которую можно решить для определения напряжений в каждом узле сети.</p></li></ol><p>Оба метода являются распространенными и широко используются для расчета сложнозамкнутых электрических сетей. Выбор метода зависит от структуры сети, ее характеристик и целей расчета. Эти методы позволяют инженерам электроэнергетики оптимизировать работу сетей, обеспечивать стабильную передачу и распределение электроэнергии, а также учитывать различные режимы работы сети, включая нормальные и аварийные ситуации.</p></div>"],["Расчет регулирования напряжения в центре питания. Встречное регулирование напряжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчет регулирования напряжения в центре питания. Встречное регулирование напряжения:</p><p>Регулирование напряжения в центре питания (ЦП) - это процесс поддержания напряжения в заданных пределах на выходе центра питания, который обеспечивает электроэнергией электрические сети и потребителей. Регулирование напряжения важно для обеспечения стабильности работы электрических устройств и оборудования, а также для соблюдения допустимых значений напряжения у потребителей.</p><p>Регулирование напряжения может осуществляться различными способами, и одним из распространенных методов является встречное регулирование напряжения. Встречное регулирование напряжения предполагает использование специальных устройств, называемых автотрансформаторами с регулируемым напряжением, которые позволяют увеличивать или уменьшать напряжение на выходе центра питания.</p><p>Процесс встречного регулирования напряжения включает следующие шаги:</p><ol><li><p>Измерение напряжения: Встроенные в систему измерительные устройства непрерывно мониторят уровень напряжения на выходе центра питания и передают информацию контроллеру.</p></li><li><p>Определение необходимого регулирования: Контроллер анализирует измеренные данные и определяет необходимость регулирования напряжения для удержания его в заданных пределах.</p></li><li><p>Регулирование напряжения: В случае необходимости, автотрансформатор с регулируемым напряжением изменяет коэффициент трансформации, что приводит к коррекции напряжения на выходе центра питания. Это позволяет управлять и стабилизировать напряжение в сети.</p></li><li><p>Обратная связь: Процесс регулирования напряжения осуществляется с использованием обратной связи, где измеренные значения напряжения сравниваются с желаемыми значениями, и на основе этого контроллер принимает решения о необходимых коррекциях.</p></li></ol><p>Встречное регулирование напряжения позволяет эффективно управлять напряжением на выходе центра питания и поддерживать его в заданных пределах, что способствует стабильной работе сети и предотвращает возможные проблемы с напряжением у потребителей.</p></div>"],["Основные экономические показатели электрических сетей. Критерии технико-экономического анализа электрических сетей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные экономические показатели электрических сетей:</p><ol><li><p>Инвестиции (капиталовложения): Это сумма средств, которую необходимо вложить для строительства, расширения или модернизации электрической сети. Инвестиции включают затраты на приобретение оборудования, строительство линий передачи, подстанций и других элементов сети.</p></li><li><p>Эксплуатационные расходы: Это расходы на текущее обслуживание и эксплуатацию электрической сети. Эти расходы включают затраты на оплату труда персонала, обслуживание оборудования, ремонт и замену компонентов сети, расходы на энергоносители и другие операционные расходы.</p></li><li><p>Прибыль и доходы: Это денежные поступления от продажи электроэнергии и предоставления услуг по передаче электроэнергии через сеть. Прибыль рассчитывается как разница между доходами и эксплуатационными расходами. Прибыль является основным показателем для оценки финансовой устойчивости и эффективности работы электрической сети.</p></li></ol><p>Критерии технико-экономического анализа электрических сетей:</p><ol><li><p>Эффективность инвестиций: Оценка, насколько инвестиции в строительство или модернизацию электрической сети будут эффективными с точки зрения ожидаемых доходов и сокращения эксплуатационных расходов.</p></li><li><p>Рентабельность: Оценка степени доходности и прибыльности работы электрической сети.</p></li><li><p>Устойчивость и надежность: Анализ надежности работы сети и способности сети противостоять возможным аварийным ситуациям.</p></li><li><p>Энергоэффективность: Оценка эффективности передачи и распределения электроэнергии с минимальными потерями.</p></li><li><p>Оптимизация затрат: Анализ возможности снижения эксплуатационных расходов без ущерба для надежности и качества электроснабжения.</p></li><li><p>Соответствие нормативам и стандартам: Учет соблюдения требований нормативных документов и стандартов в области электроснабжения.</p></li></ol><p>Технико-экономический анализ электрических сетей помогает принимать обоснованные решения в планировании, строительстве, эксплуатации и развитии сети, учитывая финансовые, технические и экономические аспекты. Это позволяет оптимизировать использование ресурсов, повысить эффективность работы сети и обеспечить стабильное и надежное электроснабжение потребителей.</p></div>"],["Технико-экономическое сравнение вариантов электроснабжения. Метод приведенных затрат.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Технико-экономическое сравнение вариантов электроснабжения. Метод приведенных затрат:</p><p>Технико-экономическое сравнение различных вариантов электроснабжения является важным этапом при принятии решений о выборе оптимальной системы электроснабжения для объектов или территорий. Этот процесс включает оценку различных технических и экономических параметров для каждого варианта с целью определения наиболее выгодного решения.</p><p>Метод приведенных затрат является одним из методов технико-экономического сравнения и предполагает приведение всех затрат к единому базису для удобного сравнения различных вариантов. Это позволяет рассматривать затраты на протяжении всего срока эксплуатации системы или проекта.</p><p>Шаги технико-экономического сравнения вариантов электроснабжения методом приведенных затрат:</p><ol><li><p>Определение альтернативных вариантов: Выбираются различные варианты системы электроснабжения, которые могут быть реализованы для объекта или территории.</p></li><li><p>Оценка технических параметров: Для каждого варианта определяются технические характеристики, такие как мощность генерации, стоимость оборудования, эффективность передачи энергии и другие технические показатели.</p></li><li><p>Оценка экономических параметров: Рассматриваются экономические аспекты каждого варианта, включая затраты на строительство, обслуживание, топливо и другие операционные расходы.</p></li><li><p>Приведение затрат: Затраты на каждый вариант приводятся к общему базису, например, к приведенной стоимости или нынешней стоимости. Это позволяет сравнивать затраты на различных вариантах, учитывая их временные и стоимостные аспекты.</p></li><li><p>Выбор оптимального варианта: После приведения затрат производится сравнение и анализ различных вариантов. Оптимальным считается вариант с наименьшими приведенными затратами, что обеспечивает наилучшее соотношение между техническими и экономическими характеристиками.</p></li></ol><p>Метод приведенных затрат позволяет учитывать долгосрочные и краткосрочные экономические эффекты, а также оценить стабильность и устойчивость системы электроснабжения в долгосрочной перспективе. Он помогает принимать обоснованные решения о выборе наилучшего варианта для оптимального электроснабжения объектов и территорий.</p></div>"],["Выбор сечений линий электропередачи по экономическим соображениям. Метод экономической плотности тока. Метод экономических интервалов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор сечений линий электропередачи по экономическим соображениям. Метод экономической плотности тока. Метод экономических интервалов:</p><p>При проектировании линий электропередачи важно выбрать оптимальные сечения проводов, которые обеспечивают требуемую электрическую нагрузку с минимальными экономическими затратами. Существуют два метода, которые помогают сделать выбор сечений линий по экономическим соображениям:</p><ol><li>Метод экономической плотности тока:\\nЭтот метод основан на определении оптимальной плотности тока, которая обеспечивает минимальные экономические затраты на строительство и эксплуатацию линии. Плотность тока (ток на единицу площади поперечного сечения провода) связана с сечением провода и определяет его нагрузочную способность и потери энергии. Чем выше плотность тока, тем больше потери энергии и тем толще должен быть провод.</li></ol><p>Метод заключается в поиске такого сечения провода, при котором стоимость потерь электроэнергии и стоимость материалов провода будут минимальными за период его эксплуатации. Оптимальное значение экономической плотности тока может быть найдено аналитически или численно.</p><ol start=\\"2\\"><li>Метод экономических интервалов:\\nЭтот метод представляет собой графический подход к выбору оптимальных сечений проводов. На графике строятся зависимости стоимости материалов провода и стоимости потерь электроэнергии от его сечения. При этом каждый провод представляется прямой линией, называемой \\"экономическим интервалом\\". Точка пересечения экономических интервалов определяет оптимальное сечение провода с минимальными экономическими затратами.</li></ol><p>Выбор оптимальных сечений проводов по экономическим соображениям позволяет достичь баланса между затратами на строительство и эксплуатацию линии, а также обеспечить надежное и эффективное электроснабжение. Эти методы учитывают технические и экономические факторы, что позволяет сократить инвестиции и обеспечить оптимальное использование ресурсов при строительстве и эксплуатации линий электропередачи.</p></div>"],["Выбор сечения линий и жил кабелей по условиям нагревания.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор сечения линий и жил кабелей по условиям нагревания является важной задачей при проектировании электрических сетей. Условия нагревания связаны с электрическими токами, проходящими через проводники, что приводит к их нагреву. Целью выбора правильного сечения проводников является обеспечение безопасной и стабильной работы системы, предотвращение перегрева и повреждения оборудования.</p><p>При выборе сечения линий и жил кабелей по условиям нагревания учитываются следующие факторы:</p><ol><li><p>Ток нагрузки: Определяется максимальный ток, который будет проходить через проводник. От этого зависит тепловая нагрузка на провод.</p></li><li><p>Допустимая температура: Каждый тип проводника имеет свою допустимую температуру нагрева. Обычно принимается, что провод должен работать в пределах нормативно допустимой температуры, чтобы предотвратить его повреждение.</p></li><li><p>Окружающая среда: Температурные условия окружающей среды могут повлиять на теплоотдачу от проводника. Если окружающая среда имеет повышенные температуры, это может ухудшить охлаждение проводника.</p></li><li><p>Тип изоляции: Материал изоляции проводника также может повлиять на его теплоотдачу и допустимую температуру нагрева.</p></li><li><p>Короткое замыкание: При коротком замыкании ток в проводнике может значительно увеличиться. Сечение проводника должно быть выбрано таким образом, чтобы выдержать короткое замыкание без перегрева.</p></li><li><p>Длина проводника: Длинные провода могут иметь большее сопротивление и, следовательно, большую тепловую нагрузку.</p></li></ol><p>При выборе сечения проводников, проектировщик учитывает указанные факторы и применяет технические расчеты, чтобы определить оптимальное сечение, обеспечивающее надежную и безопасную работу системы. Это позволяет предотвратить перегрев проводов и обеспечить стабильную работу электрических сетей и оборудования.</p></div>"],["Выбор сечения линий электропередачи по допустимой потере напряжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>При выборе сечения линий электропередачи по допустимой потере напряжения основным критерием является обеспечение установленного уровня напряжения на конечных точках системы. Потери напряжения происходят из-за сопротивления проводов, и они должны быть ограничены, чтобы обеспечить надлежащее электрическое питание потребителей.</p><p>Процедура выбора сечения линий по допустимой потере напряжения включает следующие шаги:</p><ol><li><p>Определение допустимого значения потери напряжения: Это значение зависит от требований к качеству электроснабжения и стандартов, установленных в стране или регионе. Обычно допустимая потеря напряжения составляет несколько процентов от начального напряжения.</p></li><li><p>Расчет потерь напряжения: Производится расчет потерь напряжения на всей длине линии электропередачи, учитывая длину линии, материал проводов, ток нагрузки, мощность потребителей и другие факторы.</p></li><li><p>Выбор сечения проводов: На основе расчетов определяется необходимое сечение проводов для обеспечения допустимой потери напряжения. Чем больше ток и длина линии, тем больше должно быть сечение проводов для снижения потерь напряжения.</p></li><li><p>Проверка технических параметров: После выбора сечения проводов проводятся дополнительные проверки, чтобы убедиться, что выбранное сечение удовлетворяет требованиям по нагрузке, допустимой температуре, прочности и другим техническим характеристикам.</p></li><li><p>Экономическая оценка: Также может проводиться экономическая оценка различных вариантов сечений проводов для выбора оптимального с экономической точки зрения.</p></li></ol><p>Выбор сечения линий по допустимой потере напряжения позволяет обеспечить надежное и эффективное электрическое питание, минимизируя потери энергии и поддерживая стабильный уровень напряжения в системе.</p></div>"],["Проверка сечения ЛЭП по условиям короны, механической прочности и термической устойчивости.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Проверка сечения линий электропередачи (ЛЭП) по условиям короны, механической прочности и термической устойчивости является важным этапом проектирования ЛЭП, который направлен на обеспечение надежной и безопасной работы системы электроснабжения. Ниже приведены основные аспекты проверки сечения ЛЭП по указанным условиям:</p><ol><li><p>Условия короны: Корона – это процесс образования ионизированных каналов воздуха вокруг проводов ЛЭП при высоких напряжениях. Коронное разрядное напряжение зависит от конструкции проводов, диаметра и формы проводников, атмосферных условий и других факторов. При превышении коронного напряжения могут возникать потери мощности и шум, что негативно сказывается на эффективности ЛЭП. Проверка сечения ЛЭП по условиям короны осуществляется путем расчета коронного напряжения и убеждения в том, что оно находится ниже предельно допустимого значения.</p></li><li><p>Механическая прочность: ЛЭП должна выдерживать механические нагрузки, такие как ветровые нагрузки, ледообразование, динамические нагрузки и прочие внешние воздействия. Проверка механической прочности проводится путем расчета и проверки, что сечение проводников и опор обеспечивает достаточную прочность и устойчивость ЛЭП при возможных механических нагрузках.</p></li><li><p>Термическая устойчивость: ЛЭП должна быть способной переносить тепловые нагрузки, возникающие при пропуске тока через провода. При превышении предельных температур провода могут деформироваться или даже перегреваться, что может привести к повреждению или обрыву ЛЭП. Проверка термической устойчивости проводится путем расчета и убеждения в том, что сечение проводов и их материалы способны выдержать тепловую нагрузку, которая может возникнуть в условиях работы ЛЭП.</p></li></ol><p>Все указанные проверки и расчеты проводятся с учетом стандартов и нормативов, установленных в стране или регионе, а также спецификаций производителей оборудования. Таким образом, проектирование ЛЭП и проверка сечения проводов включают множество технических аспектов, чтобы обеспечить эффективную и безопасную работу системы электроснабжения.</p></div>"],["Выбор мощности и места установки компенсирующих устройств.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор мощности и места установки компенсирующих устройств в электроэнергетических системах и сетях зависит от нескольких факторов, включая, но не ограничиваясь:</p><ol><li><p>Тип компенсации: Существуют различные типы компенсации, такие как реактивная компенсация, активно-реактивная компенсация (STATCOM) и другие. В зависимости от потребностей системы и сети, выбор типа компенсации может различаться.</p></li><li><p>Режим работы сети: Режимы нагрузки и изменения нагрузки с течением времени могут влиять на выбор мощности и места установки компенсирующих устройств.</p></li><li><p>Уровень напряжения: Устройства компенсации должны быть адаптированы к уровню напряжения в системе или сети, в которой они будут установлены.</p></li><li><p>Место установки: Выбор места установки компенсирующих устройств должен основываться на анализе мощности реактивной нагрузки и оценке наиболее эффективного местоположения для компенсации.</p></li><li><p>Затраты и экономические факторы: Оценка затрат на установку и эксплуатацию компенсирующих устройств также является важным аспектом при принятии решения.</p></li><li><p>Стабильность и надежность: Компенсирующие устройства должны способствовать стабильной работе системы и сети и не вызывать дополнительных проблем с надежностью энергоснабжения.</p></li><li><p>Нормативные требования: Соблюдение соответствующих нормативов и стандартов, регулирующих компенсацию реактивной мощности, также является важным фактором.</p></li></ol><p>В итоге, выбор мощности и места установки компенсирующих устройств требует тщательного анализа и проектирования для оптимизации работы электроэнергетической системы или сети.</p></div>"],["Выбор трансформаторов по экономическим соображениям и по нагрузочной способности. Экономические режимы работы трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор трансформаторов по экономическим соображениям и по нагрузочной способности:</p><p>При выборе трансформатора для электроэнергетических систем и сетей необходимо учитывать как экономические, так и технические аспекты.</p><ol><li><p>Экономические соображения:</p><ul><li>Стоимость трансформатора: Необходимо сравнивать стоимость различных трансформаторов и выбирать оптимальное соотношение цена/качество.</li><li>КПД трансформатора: Чем выше КПД (Коэффициент Полезного Действия) трансформатора, тем меньше потери энергии и, как следствие, меньшие эксплуатационные затраты.</li><li>Энергоэффективность: При выборе трансформатора следует ориентироваться на его энергоэффективность, которая позволяет экономить электроэнергию в процессе работы.</li><li>Обслуживание и техническое обслуживание: Следует учитывать расходы на обслуживание трансформатора в процессе его эксплуатации.</li></ul></li><li><p>Нагрузочная способность:</p><ul><li>Максимальная мощность: Трансформатор должен обеспечивать требуемую максимальную мощность для эффективной работы системы или сети.</li><li>Тепловая стабильность: Трансформатор должен иметь достаточную тепловую стабильность, чтобы выдерживать нагрузочные пиковые значения без перегрева.</li><li>Условия работы: При выборе трансформатора следует учитывать условия окружающей среды и эксплуатации, чтобы обеспечить его надежную работу и долгий срок службы.</li></ul></li></ol><p>Экономические режимы работы трансформаторов:</p><ul><li>Нагрузочный режим: Трансформатор работает в условиях, когда нагрузка подключена к его выходу и постоянно потребляет энергию. Это основной режим работы трансформатора в электроэнергетических системах.</li><li>Холостой ход: Трансформатор находится в режиме работы без нагрузки, но подключен к источнику электропитания. Это может происходить, например, при отключении нагрузки или при испытаниях оборудования.</li><li>Режим короткого замыкания: Трансформатор работает в условиях короткого замыкания, что приводит к высоким токам и напряжениям, вызывая большие нагрузки на обмотки трансформатора.</li></ul><p>Выбор режима работы трансформатора зависит от потребностей и условий работы в конкретной электроэнергетической системе или сети, а также требуемой эффективности и надежности эксплуатации.</p></div>"],["Матричные методы расчета сетей. Уравнения установившегося режима. Метод Ньютона.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Матричные методы расчета сетей, уравнения установившегося режима и метод Ньютона используются для анализа и расчета электрических сетей в установившемся режиме работы. Этот анализ позволяет определить напряжения, токи и другие параметры в каждой точке сети после того, как переходные процессы утихли и система находится в установившемся равновесии.</p><ol><li><p>Матричные методы расчета сетей:\\nМатричные методы представляют сеть в виде математических уравнений и используют матрицы для представления параметров сети (сопротивлений, проводимостей, напряжений и др.). Они позволяют решать сложные системы уравнений для определения неизвестных переменных в сети.</p></li><li><p>Уравнения установившегося режима:\\nУравнения установившегося режима описывают электрическую сеть в стационарном (установившемся) состоянии, когда все переходные процессы после включения или изменения нагрузки утихли, и сеть находится в равновесии. Основное уравнение установившегося режима для каждой узловой точки в сети - это уравнение баланса мощности. Оно утверждает, что сумма мощностей, втекающих и вытекающих из узла, равна нулю.</p></li><li><p>Метод Ньютона:\\nМетод Ньютона - это численный метод решения нелинейных систем уравнений, которые могут возникнуть при рассмотрении сложных электрических сетей. В контексте уравнений установившегося режима, метод Ньютона используется для нахождения решения системы уравнений в случае, когда они нелинейны. Он основан на последовательных линеаризациях уравнений и нахождении приближенных значений неизвестных переменных.</p></li></ol><p>При решении задач по матричным методам расчета сетей, уравнениям установившегося режима и методу Ньютона, инженеры и исследователи могут получать информацию о поведении сети, оптимизировать ее работу, а также предсказывать возможные режимы работы при различных нагрузках и условиях.</p></div>"],["Надежность электроснабжения потребителей. Показатели надежности работы электрических сетей. Количественная оценка надежности электроснабжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Надежность электроснабжения потребителей является одной из ключевых характеристик электрических сетей. Она определяет степень гарантированности и безотказности обеспечения электроэнергией конечных потребителей.</p><p>Показатели надежности работы электрических сетей включают в себя различные параметры, которые отражают уровень качества и надежности предоставляемой электроэнергии. Некоторые из основных показателей надежности включают:</p><ol><li><p>SAIDI (System Average Interruption Duration Index) - Индекс средней продолжительности перерывов системы:\\nОтражает среднее время простоя электроснабжения на одного потребителя в течение определенного периода времени, обычно выражается в минутах.</p></li><li><p>SAIFI (System Average Interruption Frequency Index) - Индекс средней частоты перерывов системы:\\nПоказывает среднее количество перерывов электроснабжения на одного потребителя в течение определенного периода времени.</p></li><li><p>CAIDI (Customer Average Interruption Duration Index) - Индекс средней продолжительности перерывов для клиента:\\nВычисляется как отношение общей длительности перерывов (SAIDI) к общему количеству перерывов (SAIFI). Отражает среднее время восстановления электроэнергии после перерыва.</p></li><li><p>МТВФ (Mean Time Between Failures) - Среднее время между отказами:\\nПоказывает средний интервал времени между отказами в работе сети. Чем выше этот показатель, тем более надежной считается сеть.</p></li><li><p>МТТР (Mean Time To Repair) - Среднее время восстановления:\\nОтражает среднее время, которое требуется для восстановления электроэнергии после возникновения отказа.</p></li></ol><p>Количественная оценка надежности электроснабжения позволяет эффективно управлять и планировать развитие электрических сетей, оптимизировать процессы восстановления после отказов, а также выявлять уязвимые места в сети и принимать меры по их устранению. Обеспечение высокой надежности работы сети является важным условием для удовлетворения потребностей потребителей и обеспечения стабильности функционирования электроэнергетической системы в целом.</p></div>"],["Способы повышения надежности электроснабжения потребителей. Возможности повышения надежности при проектировании электрических сетей. Мероприятия по повышению надежности при эксплуатации электрических сетей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Способы повышения надежности электроснабжения потребителей включают различные меры, как на этапе проектирования, так и на этапе эксплуатации электрических сетей. Вот некоторые из них:</p><p>При проектировании электрических сетей:</p><ol><li><p>Диверсификация и резервирование источников электропитания:\\nИспользование различных источников энергии (например, солнечной, ветровой, гидроэлектрической) и создание резервных источников может повысить надежность электроснабжения.</p></li><li><p>Разделение сетей на независимые петли и линии:\\nПри проектировании сетей следует предусматривать разделение сетей на независимые петли и линии, чтобы избежать обесточивания всей системы в случае отказа в одной из частей.</p></li><li><p>Установка автоматических систем переключения:\\nАвтоматические системы переключения позволяют быстро переключаться на резервные источники питания или обходить поврежденные участки сети, минимизируя простои в работе.</p></li></ol><p>При эксплуатации электрических сетей:</p><ol><li><p>Регулярное техническое обслуживание и инспекции:\\nПроведение регулярного технического обслуживания и инспекций позволяет выявлять и устранять потенциальные проблемы и дефекты до их приведения к поломке.</p></li><li><p>Аварийные планы и оперативные меры:\\nРазработка аварийных планов и оперативных мер позволяет эффективно реагировать на возможные аварийные ситуации и минимизировать их влияние на электроснабжение.</p></li><li><p>Обучение и квалификация персонала:\\nОбученный и квалифицированный персонал обеспечивает правильную и быструю реакцию на возможные аварийные ситуации, что способствует повышению надежности сети.</p></li><li><p>Установка защитных устройств:\\nИспользование современных защитных устройств позволяет быстро обнаруживать и изолировать неисправности и перегрузки в сети, предотвращая распространение сбоев.</p></li><li><p>Регулярное обновление оборудования:\\nОбновление устаревшего оборудования на более современное и надежное способствует повышению надежности работы сети.</p></li></ol><p>Комбинирование этих методов позволяет эффективно повышать надежность электроснабжения потребителей и обеспечивать стабильное и безотказное обслуживание электроэнергией.</p></div>"],["Регулирование частоты и активной мощности в электроэнергетической системе. Влияние частоты на работу элементов электрической системы. Показатели качества частоты. Физическая сущность баланса активных мощностей и его связь с регулированием частоты.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Регулирование частоты и активной мощности в электроэнергетической системе является критическим аспектом для обеспечения стабильной и надежной работы сети. Частота электрической системы является одним из ключевых параметров, который должен поддерживаться на определенном уровне.</p><ol><li><p>Регулирование частоты и его влияние на работу элементов электрической системы:</p><ul><li>Частота электрической системы является результатом баланса между производством и потреблением активной мощности. Изменения нагрузки на сеть приводят к изменениям в частоте. Если производство мощности не соответствует потреблению, частота может увеличиваться или уменьшаться.</li><li>При сильных отклонениях частоты от номинального значения могут возникать серьезные проблемы в работе элементов сети, таких как генераторы, турбины, двигатели, что в свою очередь может привести к аварийным ситуациям.</li><li>Электрические машины, оборудование и электронные устройства часто имеют пределы по частоте, за пределами которых они могут работать некорректно или даже выйти из строя.</li></ul></li><li><p>Показатели качества частоты:</p><ul><li>Допустимый диапазон частоты определяется стандартами и может различаться в разных странах, но обычно он составляет около ±0.5% от номинальной частоты (например, для системы с номинальной частотой 50 Гц, допустимый диапазон частоты составляет примерно от 49,75 Гц до 50,25 Гц).</li><li>Качество частоты влияет на стабильность и эффективность работы электрических устройств и систем, а также на энергосбережение.</li></ul></li><li><p>Физическая сущность баланса активных мощностей и его связь с регулированием частоты:</p><ul><li>Баланс активных мощностей представляет собой равенство суммарной производимой мощности и суммарной потребляемой мощности в системе. Если активная мощность производства и потребления не совпадают, происходит изменение частоты.</li><li>В электрической системе нагрузка постоянно меняется, и операторы энергосистем должны быстро реагировать на эти изменения, чтобы поддерживать баланс активных мощностей и частоты на установленных уровнях.</li><li>Регулирование частоты происходит за счет изменения мощности генераторов и использования автоматических систем регулирования, которые регулируют выработку мощности или подключают резервные источники, чтобы поддерживать баланс между производством и потреблением мощности и стабилизировать частоту системы.</li></ul></li></ol><p>Эффективное регулирование частоты и поддержание баланса активных мощностей являются важными задачами операторов электроэнергетических систем, чтобы обеспечить надежное и стабильное электроснабжение потребителей.</p></div>"],["Регулирование частоты и активной мощности в электроэнергетической системе. Первичное регулирование частоты. Вторичное регулирование частоты. Принципы автоматического регулирования частоты.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Регулирование частоты и активной мощности в электроэнергетической системе включает в себя несколько уровней, включая первичное и вторичное регулирование частоты. Принципы автоматического регулирования частоты помогают поддерживать стабильность и надежность работы системы.</p><ol><li><p>Первичное регулирование частоты:</p><ul><li>Первичное регулирование частоты выполняется очень быстро (обычно в пределах нескольких секунд) и его целью является незамедлительное восстановление баланса активных мощностей в системе.</li><li>Оно основано на автоматических системах регулирования, которые реагируют на изменения нагрузки в системе. Если нагрузка увеличивается, мощность генераторов должна быть увеличена для поддержания равновесия. Если нагрузка уменьшается, производство мощности должно быть уменьшено.</li></ul></li><li><p>Вторичное регулирование частоты:</p><ul><li>Вторичное регулирование частоты является более медленным процессом, и его целью является долгосрочное восстановление баланса активных мощностей и поддержание частоты в установленных пределах (например, 50 Гц или 60 Гц).</li><li>Этот уровень регулирования обычно выполняется операторами энергосистем и может включать изменение выработки генераторов с учетом прогноза нагрузки и плановой работы.</li></ul></li><li><p>Принципы автоматического регулирования частоты:</p><ul><li>Автоматическое регулирование частоты включает использование автоматических регуляторов частоты, которые мониторят отклонения частоты от номинального значения.</li><li>Если частота начинает увеличиваться из-за недостатка активной мощности, автоматические регуляторы сигнализируют генераторам о необходимости увеличить мощность, и наоборот, если частота начинает снижаться из-за избытка активной мощности, регуляторы сигнализируют о необходимости уменьшить мощность.</li><li>Этот процесс автоматически повышает или снижает выработку мощности для поддержания баланса активных мощностей и стабильности частоты в системе.</li></ul></li></ol><p>Автоматическое регулирование частоты является важным механизмом для обеспечения стабильности и надежности работы электроэнергетических систем и предотвращения серьезных нарушений в электроснабжении. Это позволяет эффективно справляться с изменениями нагрузки и поддерживать баланс мощности в системе.</p></div>"],["Регулирование частоты в послеаварийных режимах. АЧР. Особенности регулирования частоты в объединенных энергосистемах.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Регулирование частоты в послеаварийных режимах электроэнергетических систем является критически важным, чтобы обеспечить стабильную работу энергосистем и предотвратить серьезные последствия отказа электроснабжения. Для этого применяется АЧР (Автоматическое Частотное Регулирование).</p><p>Автоматическое Частотное Регулирование (АЧР) - это система, которая обеспечивает поддержание частоты в электроэнергетической системе на заданном уровне в режимах после аварийных ситуаций. Когда происходит авария или отключение большой генерирующей единицы, это приводит к резкому изменению баланса между производством и потреблением электроэнергии, что может привести к снижению или повышению частоты в сети.</p><p>АЧР работает на основе обратной связи и использует автоматические регуляторы генераторов и автоматические устройства управления нагрузкой, чтобы быстро реагировать на изменения частоты и восстанавливать нормальный уровень. Когда частота снижается, АЧР может автоматически увеличить мощность генераторов или уменьшить нагрузку в системе. Если частота повышается, АЧР, наоборот, может снизить мощность генераторов или увеличить нагрузку.</p><p>Особенности регулирования частоты в объединенных энергосистемах заключаются в том, что в таких системах может существовать сложный переплетенный сетевой баланс между различными регионами или странами. Когда возникают аварии или крупные изменения в одной части системы, это может повлиять на баланс в других частях. Поэтому в объединенных энергосистемах требуется более сложное и координированное управление АЧР между различными участками системы, чтобы предотвратить дальнейшие отказы и обеспечить стабильность во всей системе.</p><p>АЧР играет важную роль в поддержании электроэнергетической стабильности, и его правильная работа позволяет эффективно управлять изменениями в электрических сетях после аварийных ситуаций и обеспечивать непрерывное и надежное электроснабжение.</p></div>"],["Регулирование напряжения и реактивной мощности в электроэнергетической системе. Средства регулирования напряжения и принципы их использования для управления режимами.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Регулирование напряжения и реактивной мощности является важным аспектом управления электроэнергетическими системами и позволяет поддерживать стабильные условия работы электросетей. Для достижения этой цели используются различные средства регулирования напряжения:</p><ol><li><p><strong>Автоматические регуляторы напряжения генераторов (АРН)</strong>: Эти устройства устанавливаются на генерирующих установках и автоматически контролируют напряжение на выходе генератора. При изменениях в нагрузке они регулируют мощность генератора, чтобы поддерживать стабильное напряжение на выходе.</p></li><li><p><strong>Автоматические системы управления напряжением (АСУН)</strong>: АСУН объединяет различные АРН в систему, которая координирует их работу и обеспечивает централизованное управление напряжением в электрической сети. АСУН непрерывно мониторит напряжение в различных точках сети и принимает решения о необходимых корректировках.</p></li><li><p><strong>Батареи конденсаторов</strong>: Как уже упоминалось в предыдущем ответе, батареи конденсаторов компенсируют реактивную мощность в сети и помогают поддерживать стабильное напряжение путем увеличения емкостной реактивной мощности.</p></li><li><p><strong>Переключатели нагрузки</strong>: Это устройства, которые автоматически переключают нагрузку между различными источниками питания или линиями передачи для оптимального управления напряжением и реактивной мощностью.</p></li></ol><p>Принципы использования средств регулирования напряжения и реактивной мощности для управления режимами включают:</p><ul><li><p><strong>Регулярный мониторинг и обратная связь</strong>: Все устройства автоматического регулирования напряжения должны непрерывно мониторить состояние системы и получать информацию о текущем напряжении и нагрузке. Отклонения от заданных значений обнаруживаются, и устройства принимают меры для компенсации этих отклонений.</p></li><li><p><strong>Координация и централизация</strong>: В объединенных электроэнергетических системах используется централизованное управление, чтобы обеспечить согласованность и координацию работы различных устройств регулирования напряжения и реактивной мощности. Это позволяет предотвратить конфликты между устройствами и добиться более эффективного управления.</p></li><li><p><strong>Быстрая реакция</strong>: Системы регулирования напряжения должны обладать быстрой реакцией на изменения нагрузки и других параметров системы. Это важно для предотвращения больших колебаний напряжения и обеспечения стабильности работы системы.</p></li><li><p><strong>Учет плановых и аварийных ситуаций</strong>: Средства регулирования должны учитывать как плановые изменения в нагрузке и генерации, так и аварийные ситуации, чтобы гарантировать нормальное функционирование системы в различных режимах работы.</p></li></ul><p>Правильное применение и координация средств регулирования напряжения и реактивной мощности позволяет обеспечивать стабильное напряжение в электроэнергетической системе, минимизировать потери энергии и обеспечивать надежное электроснабжение для потребителей.</p></div>"],["Средства регулирования напряжения. Выбор ответвлений трансформаторов и автотрансформаторов. Понятие о регулировании.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Средства регулирования напряжения в электроэнергетических системах включают различные методы и устройства, которые позволяют управлять уровнем напряжения для обеспечения надлежащего функционирования сетей и электрооборудования. Одним из важных аспектов регулирования напряжения является выбор ответвлений трансформаторов и автотрансформаторов.</p><p><strong>Ответвления трансформаторов</strong> — это различные выводы на обмотках трансформаторов, которые позволяют получать различные уровни напряжения на их выходе. При помощи переключения отводов трансформатора можно изменять его трансформационное отношение, что влияет на выходное напряжение.</p><p><strong>Автотрансформаторы</strong> также являются средством регулирования напряжения. Они имеют общую обмотку для ввода и выхода напряжения. Путем изменения подключения на общей обмотке можно получать различные значения выходного напряжения.</p><p><strong>Регулирование напряжения</strong> — это процесс управления и поддержания определенного уровня напряжения в электрической сети или на определенных участках системы. Регулирование напряжения осуществляется для следующих целей:</p><ol><li><p><strong>Поддержание стабильности</strong>: Устойчивое напряжение важно для надежной работы электрооборудования и предотвращения возможных повреждений, вызванных скачками напряжения.</p></li><li><p><strong>Компенсация нагрузки</strong>: При изменении нагрузки в электрической сети возникают колебания напряжения. Регулирование напряжения позволяет компенсировать эти колебания и обеспечивать стабильное напряжение на выходе.</p></li><li><p><strong>Поддержание качества электроэнергии</strong>: Стабильное напряжение способствует поддержанию высокого качества электроэнергии и предотвращает появление искажений и шумов в электрической сети.</p></li><li><p><strong>Экономия энергии</strong>: Правильное регулирование напряжения позволяет оптимизировать энергопотребление и снизить потери электроэнергии.</p></li></ol><p>Выбор ответвлений трансформаторов и автотрансформаторов в системе регулирования напряжения зависит от требований к уровню напряжения, изменений нагрузки и характеристик оборудования. Такие решения принимаются на основе анализа технических параметров электроэнергетической системы и ее режимов работы. Эффективное регулирование напряжения способствует надежной и эффективной работе системы, а также обеспечивает необходимую электроэнергию для потребителей.</p></div>"],["Устройства ПБВ трансформаторов. Сезонное регулирование напряжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Устройства ПБВ (повышенной безопасности в эксплуатации) трансформаторов представляют собой дополнительные защитные механизмы, которые применяются для обеспечения безопасности и защиты персонала, оборудования и электроэнергетических систем от возможных аварийных ситуаций и повреждений.</p><p>Конкретные устройства ПБВ могут варьироваться в зависимости от типа трансформатора и его конструкции, однако некоторые распространенные устройства ПБВ трансформаторов включают:</p><ol><li><p><strong>Датчики температуры</strong>: Датчики температуры могут быть установлены в различных частях трансформатора для мониторинга его рабочей температуры. Они позволяют предотвратить перегрев и аварийные ситуации, срабатывая автоматически при превышении заданного предела температуры.</p></li><li><p><strong>Датчики уровня масла</strong>: Датчики уровня масла следят за уровнем масла в трансформаторе. При снижении уровня масла до определенного значения, устройство может отключить трансформатор, чтобы предотвратить его повреждение.</p></li><li><p><strong>Датчики давления</strong>: Датчики давления могут быть установлены для контроля за давлением внутри трансформатора. При нештатных изменениях давления они предупреждают о возможных утечках масла или других проблемах.</p></li><li><p><strong>Датчики газов</strong>: Датчики газов могут использоваться для мониторинга состояния изоляции трансформатора. Изменение состава газов внутри трансформатора может свидетельствовать о потенциальных проблемах и повреждениях.</p></li></ol><p>Сезонное регулирование напряжения относится к изменению уровня напряжения в электрической сети в зависимости от времени года или сезона. Это может быть актуально в регионах, где существенно меняется потребление электроэнергии в различные времена года.</p><p>Примерами сезонного регулирования напряжения могут быть:</p><ol><li><p><strong>Регулирование номинального напряжения</strong>: В некоторых случаях, в зимний период, напряжение может быть увеличено на некоторых участках электрической сети для компенсации снижения напряжения из-за холодных температур и увеличения сопротивления проводов.</p></li><li><p><strong>Управление схемой компенсации реактивной мощности</strong>: В зависимости от нагрузки, сезонных изменений и внешних условий, схема компенсации реактивной мощности может автоматически изменяться для оптимального управления реактивной мощностью и напряжением.</p></li></ol><p>Сезонное регулирование напряжения позволяет адаптировать работу электроэнергетической системы к меняющимся условиям в разные времена года и обеспечивать стабильное и эффективное электроснабжение для потребителей.</p></div>"],["Устройства РПН трансформаторов. Встречное регулирование напряжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Устройства РПН (регулирования параллельных нагрузок) трансформаторов используются для автоматической компенсации реактивной мощности и регулирования напряжения в электрических системах с несколькими параллельно работающими трансформаторами.</p><p>Встречное регулирование напряжения относится к методу регулирования, при котором реактивная мощность регулируется с помощью специальных устройств таким образом, чтобы нивелировать возникающие отклонения напряжения и поддерживать его на заданном уровне.</p><p>Принцип работы устройств РПН и встречного регулирования напряжения следующий:</p><ol><li><p><strong>Датчики напряжения и тока</strong>: Устройства РПН используют датчики напряжения и тока для непрерывного мониторинга состояния электрической сети. Датчики измеряют текущее значение напряжения и тока на выходе трансформатора.</p></li><li><p><strong>Сравнение с заданными значениями</strong>: Полученные измерения сравниваются с заданными значениями напряжения и реактивной мощности. Если возникают отклонения, то это указывает на необходимость корректировки.</p></li><li><p><strong>Автоматические регуляторы</strong>: Встроенные автоматические регуляторы в устройствах РПН анализируют информацию от датчиков и принимают решение об увеличении или уменьшении реактивной мощности, выдаваемой трансформатором, чтобы скомпенсировать отклонения напряжения.</p></li><li><p><strong>Использование компенсирующих устройств</strong>: Для коррекции реактивной мощности устройства РПН могут использовать различные компенсирующие устройства, такие как батареи конденсаторов или компенсирующие катушки, которые способны выдавать реактивную мощность с нужной фазой.</p></li></ol><p>Встречное регулирование напряжения позволяет поддерживать стабильное напряжение в электрической сети при изменениях нагрузки. Когда нагрузка возрастает, устройства РПН автоматически увеличивают реактивную мощность, что помогает поддерживать напряжение на заданном уровне. При уменьшении нагрузки, регуляторы снижают реактивную мощность, чтобы предотвратить повышение напряжения в сети.</p><p>Этот процесс автоматической компенсации реактивной мощности и регулирования напряжения с помощью устройств РПН и встречного регулирования является важным аспектом поддержания стабильности и эффективности работы электроэнергетических систем.</p></div>"],["Выбор мощности компенсирующих устройств по условию регулирования напряжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор мощности компенсирующих устройств для регулирования напряжения зависит от нескольких факторов, включая потребности системы, характеристики нагрузки и требования к стабильности напряжения. Для оптимального выбора мощности компенсирующих устройств следует учитывать следующие факторы:</p><ol><li><p><strong>Реактивная мощность нагрузки</strong>: Расчет мощности компенсирующих устройств должен основываться на анализе реактивной мощности нагрузки в системе. Реактивная мощность возникает из-за индуктивных и емкостных элементов в сети, и ее компенсация позволяет поддерживать стабильное напряжение. Чем больше реактивной мощности в системе, тем больше мощности должны иметь компенсирующие устройства.</p></li><li><p><strong>Тип компенсации</strong>: В зависимости от характеристик нагрузки и системы, может быть использована различная типа компенсации реактивной мощности, такие как статические батареи конденсаторов, автотрансформаторы с изменяемым коэффициентом трансформации (с автономными или автоматическими системами управления), статические компенсаторы реактивной мощности (STATCOM) и другие. Выбор типа компенсации также влияет на необходимую мощность устройств.</p></li><li><p><strong>Соответствие стандартам и нормативам</strong>: В различных странах и регионах могут действовать различные стандарты и нормативы, которые регулируют регулирование напряжения и компенсацию реактивной мощности. Мощность компенсирующих устройств должна соответствовать данным стандартам и обеспечивать выполнение требований по стабильности напряжения.</p></li><li><p><strong>Динамические характеристики</strong>: Компенсирующие устройства должны обладать достаточной динамической отзывчивостью, чтобы эффективно реагировать на быстрые изменения в нагрузке и поддерживать стабильное напряжение.</p></li><li><p><strong>Использование прогнозных данных</strong>: В системах с большими изменениями нагрузки или сезонными вариациями необходимо использовать прогнозные данные о реактивной мощности, чтобы определить оптимальную мощность компенсирующих устройств.</p></li><li><p><strong>Экономические соображения</strong>: При выборе мощности компенсирующих устройств также следует учитывать экономические аспекты, такие как затраты на устройства и эксплуатацию.</p></li></ol><p>Важно отметить, что выбор мощности компенсирующих устройств для регулирования напряжения является комплексной задачей, и он должен выполняться специалистами с соответствующими знаниями и опытом в области электроэнергетики и управления электрическими системами.</p></div>"],["Задачи и цели механического расчета конструктивных элементов линий электропередачи. Области применения и условия работы воздушных и кабельных линий электропередачи.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Задачи и цели механического расчета конструктивных элементов линий электропередачи:</strong></p><p>Механический расчет конструктивных элементов линий электропередачи выполняется для обеспечения надежности, прочности и безопасности работы электрических линий. Основные задачи и цели механического расчета включают:</p><ol><li><p><strong>Надежность и прочность</strong>: Расчет выполняется для обеспечения прочности и надежности всех конструктивных элементов линий электропередачи. Это позволяет предотвратить исчерпание прочностных характеристик материалов и избежать возможных аварийных ситуаций.</p></li><li><p><strong>Учет динамических нагрузок</strong>: Линии электропередачи испытывают воздействие динамических нагрузок, таких как ветровые нагрузки, изменения нагрузки и другие динамические факторы. Механический расчет учитывает эти факторы и гарантирует, что линии способны выдерживать переменные нагрузки.</p></li><li><p><strong>Безопасность</strong>: Расчет направлен на обеспечение безопасности как персонала, работающего на линиях, так и окружающих людей. Это включает учет возможных искривлений, прогибов и прочих нежелательных деформаций, которые могут повлечь за собой опасные ситуации.</p></li><li><p><strong>Оптимизация конструкции</strong>: Целью расчета является также оптимизация конструкции линий электропередачи, чтобы минимизировать затраты на строительство и обеспечить эффективное использование материалов.</p></li></ol><p><strong>Области применения и условия работы воздушных и кабельных линий электропередачи:</strong></p><ol><li><p><strong>Воздушные линии электропередачи</strong>: Воздушные линии являются наиболее распространенным типом линий электропередачи. Они состоят из опор (мачт, башен) и проводов, которые поддерживаются на опорах. Воздушные линии часто применяются для передачи электроэнергии на большие расстояния и используются в открытых районах.</p></li><li><p><strong>Кабельные линии электропередачи</strong>: Кабельные линии представляют собой подземные или подводные кабели, которые используются для передачи электроэнергии в населенных районах, в городских средах и в случаях, когда использование воздушных линий нежелательно или невозможно. Кабельные линии обладают некоторыми преимуществами, такими как уменьшение воздействия на окружающую среду и улучшенная защита от погодных условий.</p></li><li><p><strong>Условия работы</strong>: Воздушные линии электропередачи могут работать в различных климатических условиях, подверженных воздействию ветра, снега, льда и других погодных факторов. Кабельные линии, наоборот, более устойчивы к погодным условиям, так как они находятся под землей или в воде.</p></li><li><p><strong>Применение в различных мощностях</strong>: Как воздушные, так и кабельные линии могут применяться в различных мощностях передачи электроэнергии: от небольших локальных сетей до крупных межрегиональных систем передачи. Выбор между воздушными и кабельными линиями зависит от множества факторов, таких как география района, требования к надежности, экологические и экономические аспекты.</p></li></ol></div>"],["Расчетные климатические условия. Расчетные сочетания климатических условий. Допустимые напряжения в проводах и тросах.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Расчетные климатические условия и расчетные сочетания климатических условий:</strong></p><p>Расчетные климатические условия используются для определения нагрузок и надежности оборудования в электроэнергетических системах и сетях. Они учитывают характеристики климата в конкретном регионе, чтобы обеспечить надежное функционирование электрооборудования при различных климатических условиях. Некоторые из ключевых параметров в расчетных климатических условиях включают:</p><ol><li><p><strong>Температурные условия</strong>: В расчетных климатических условиях учитываются максимальные и минимальные температуры, которые могут возникнуть в течение года. Это важно для определения тепловых нагрузок и эксплуатационных характеристик оборудования.</p></li><li><p><strong>Влажность</strong>: Уровень влажности также имеет значение для определения коррозии и возможности образования льда на оборудовании.</p></li><li><p><strong>Скорость ветра</strong>: Расчетные климатические условия включают средние и максимальные скорости ветра, которые влияют на механические нагрузки на линии электропередачи и другие конструктивные элементы.</p></li><li><p><strong>Осадки</strong>: Осадки в виде дождя, снега или льда также учитываются в расчетных климатических условиях, так как они могут повлиять на нагрузки на оборудование и прочность конструкций.</p></li></ol><p><strong>Расчетные сочетания климатических условий</strong> представляют собой комбинации различных климатических параметров, которые могут наиболее значимо повлиять на работу систем электропередачи. Например, расчетные сочетания могут включать максимально возможные значения температуры и скорости ветра, что позволяет определить наиболее строгие условия нагрузки на линии и оборудование.</p><p><strong>Допустимые напряжения в проводах и тросах:</strong></p><p>Допустимые напряжения в проводах и тросах зависят от их типа, материалов изготовления, диаметра, конструкции и технических характеристик. Они определяются стандартами и нормативами в каждой стране или регионе и рассчитываются таким образом, чтобы обеспечить безопасную и надежную работу электрооборудования и линий электропередачи.</p><p>Допустимые напряжения указывают предельные значения напряжения, которые могут быть применены к проводам и тросам при их проектировании и эксплуатации. Они учитывают электрические характеристики материалов и механическую прочность компонентов.</p><p>Для каждого типа проводов и тросов определяются соответствующие допустимые напряжения, которые обеспечивают оптимальное соотношение между эффективностью передачи электроэнергии и безопасностью работы линий. Важно соблюдать данные допустимые значения, чтобы предотвратить повреждения оборудования и обеспечить долгий срок службы линий электропередачи.</p></div>"],["Механические нагрузки на провода и тросы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Механические нагрузки на провода и тросы линий электропередачи возникают под воздействием различных факторов, которые могут повлиять на их прочность и надежность. Некоторые из основных механических нагрузок включают:</p><ol><li><p><strong>Ветровая нагрузка</strong>: Скорость ветра оказывает силовое давление на провода и тросы. Сильные ветры могут вызывать колебания проводов и приводить к их деформации или обрывам. При расчете линий электропередачи учитываются характеристики климата и местоположения для определения максимальных ветровых нагрузок.</p></li><li><p><strong>Ледяные и снежные нагрузки</strong>: Накопление льда и снега на проводах приводит к увеличению их веса и поверхностного сопротивления. Это может вызывать дополнительные нагрузки на опоры и провода, особенно при резком изменении погодных условий. Расчеты учитывают климатические особенности региона и вероятность образования льда и снега.</p></li><li><p><strong>Нагрузки от собственного веса</strong>: Собственный вес проводов и тросов также является фактором, который должен быть учтен при расчетах. Вес проводов и тросов зависит от их материала и конструкции.</p></li><li><p><strong>Механические нагрузки от температурных изменений</strong>: При изменении температуры, провода и тросы могут сжиматься или расширяться, что может привести к механическим напряжениям и деформациям. Это особенно важно при проектировании подводных и кабельных линий электропередачи.</p></li><li><p><strong>Механические нагрузки от механизмов крепления</strong>: Провода и тросы должны быть надежно закреплены на опорах и других конструкциях. Механические нагрузки также возникают от механизмов крепления, которые обеспечивают устойчивость и надежность линий электропередачи.</p></li></ol><p>Все эти механические нагрузки учитываются при проектировании и расчете линий электропередачи, чтобы обеспечить их безопасную и надежную работу в различных климатических условиях и при различных нагрузках. Важно, чтобы провода и тросы имели достаточную прочность и устойчивость, чтобы выдерживать указанные механические нагрузки и предотвращать возможные аварийные ситуации.</p></div>"],["Определение исходных условий для механического расчета проводов. Понятие условной монтажной температуры.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Определение исходных условий для механического расчета проводов:</strong></p><p>Перед проведением механического расчета проводов линий электропередачи необходимо определить исходные условия, которые будут использоваться в расчетах. Эти условия включают следующие параметры:</p><ol><li><p><strong>Тип провода</strong>: Различные типы проводов (например, сталеалюминиевые, алюминиевые или стеклопластиковые провода) имеют разные механические характеристики, что влияет на их способность выдерживать нагрузки.</p></li><li><p><strong>Геометрические параметры провода</strong>: Это включает диаметр провода, количество проволок, длину и другие геометрические характеристики, которые используются для определения его механических свойств.</p></li><li><p><strong>Материал провода</strong>: Материал провода (алюминий, сталь, стеклопластик и т.д.) определяет его прочность, устойчивость к коррозии и другие механические свойства.</p></li><li><p><strong>Температурные условия</strong>: Важно определить диапазон рабочих температур, которые могут возникнуть в месте установки провода, так как это влияет на его свойства и способность выдерживать нагрузки при различных температурах.</p></li><li><p><strong>Климатические условия</strong>: Климатические факторы, такие как скорость ветра, нагрузки от снега и льда, также учитываются при определении механических нагрузок.</p></li></ol><p><strong>Понятие условной монтажной температуры:</strong></p><p>Условная монтажная температура (УМТ) провода представляет собой максимальную температуру, при которой он может быть установлен без риска повреждения его структуры или электрических свойств. УМТ определяется на основе химических и технологических характеристик материала провода.</p><p>Условная монтажная температура имеет важное значение при проектировании и установке линий электропередачи. При превышении УМТ провода, возможны различные негативные последствия, такие как деформация, ухудшение электрических свойств, уменьшение прочности и надежности провода. Поэтому необходимо тщательно контролировать температуру при монтаже проводов и соблюдать указанные ограничения для обеспечения долгого срока службы и безопасной работы линий электропередачи.</p></div>"],["Уравнение состояния провода. Расчет проводов в нормальных режимах. Выявление расчетных исходных условий.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Уравнение состояния провода:</strong></p><p>Уравнение состояния провода включает ряд параметров, которые используются для определения его тепловых, механических и электрических характеристик при работе в электроэнергетических системах. Оно состоит из следующих основных факторов:</p><ol><li><p><strong>Тепловые характеристики</strong>: Это включает теплопроводность материала провода и его способность к равномерному распределению тепла при протекании тока. Тепловые характеристики провода важны для определения его нагрева и оценки его теплового состояния.</p></li><li><p><strong>Механические характеристики</strong>: Механические характеристики провода определяют его прочность, устойчивость к деформациям и способность выдерживать механические нагрузки, такие как ветровые нагрузки и вес снега.</p></li><li><p><strong>Электрические характеристики</strong>: Электрические характеристики провода включают его активное сопротивление, индуктивность и емкость. Они важны для определения электрических потерь и оценки поведения провода в электрических цепях.</p></li></ol><p><strong>Расчет проводов в нормальных режимах:</strong></p><p>Расчет проводов в нормальных режимах предполагает анализ их работы при номинальных условиях нагрузки и рабочих параметрах. Это включает определение теплового состояния проводов, их прочности и электрических характеристик при стандартных рабочих условиях.</p><p>При расчете проводов в нормальных режимах учитываются следующие факторы:</p><ol><li><p><strong>Ток нагрузки</strong>: Определяется номинальный ток, проходящий через провод, при его номинальной нагрузке.</p></li><li><p><strong>Условия окружающей среды</strong>: Важно учитывать температурные условия, скорость ветра и другие климатические факторы, которые могут повлиять на работу провода.</p></li><li><p><strong>Геометрия и конструкция провода</strong>: Включает диаметр провода, количество проволок, тип провода и его конструктивные особенности.</p></li></ol><p><strong>Выявление расчетных исходных условий:</strong></p><p>Для успешного расчета проводов в нормальных режимах необходимо выявить следующие расчетные исходные условия:</p><ol><li><p><strong>Номинальная нагрузка</strong>: Определение номинального тока, который будет проходить через провод при его номинальной нагрузке.</p></li><li><p><strong>Тепловые условия</strong>: Установление температуры окружающей среды и тепловых потерь, которые могут возникать при протекании тока через провод.</p></li><li><p><strong>Механические нагрузки</strong>: Учитываются ветровые нагрузки, вес снега и другие механические факторы, которые могут повлиять на механическую прочность провода.</p></li><li><p><strong>Электрические характеристики</strong>: Определение активного сопротивления, индуктивности и емкости провода.</p></li></ol><p>После выявления всех этих расчетных исходных условий проводятся соответствующие расчеты для определения теплового состояния, механических нагрузок и электрических характеристик провода в нормальных режимах работы. Это позволяет гарантировать безопасную и надежную работу линий электропередачи при номинальных условиях нагрузки.</p></div>"],["Стрела провеса, габарит ВЛ. Монтажные кривые.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Стрела провеса и габарит ВЛ:</strong></p><p>Стрела провеса относится к вертикальному отклонению проложенного провода от прямой горизонтальной линии между опорами. Она возникает под воздействием гравитационных сил и нагрузок, которым подвергается провод в электроэнергетической системе. Стрела провеса может варьироваться в зависимости от нагрузок, температуры и других факторов.</p><p>Габарит ВЛ (воздушной линии) представляет собой пространственное положение провода относительно поверхности земли. Он определяет минимальное расстояние между нижней точкой провеса и землей, что позволяет обеспечить безопасный пролет для высоковольтных линий.</p><p>Определение стрелы провеса и габарита ВЛ важно для проектирования и строительства линий электропередачи с учетом безопасности, минимизации рисков перекрытия с землей, строений и других объектов.</p><p><strong>Монтажные кривые:</strong></p><p>Монтажные кривые представляют собой профили, которые показывают распределение высоты провода над поверхностью земли или другими объектами на всем протяжении линии электропередачи. Они строятся на основе результатов инженерных расчетов и учитывают максимальные нагрузки, допустимые строительные высоты и габарит ВЛ.</p><p>Монтажные кривые позволяют определить оптимальное положение опор и высоту их установки, чтобы обеспечить безопасное пролетание проводов над землей и другими препятствиями. Они также учитывают возможность уклонения проводов под воздействием нагрузок и температурных изменений.</p><p>При проектировании линий электропередачи монтажные кривые должны соответствовать нормативным требованиям и учитывать конкретные особенности местности и климатических условий. Это позволяет обеспечить безопасное функционирование линии и предотвратить возможные аварийные ситуации.</p></div>"]],"ЭНЕРГОПИТАЮЩИЕ СИСТЕМЫ И ЭЛЕКТРИЧЕСКИЕ СЕТИ":[["Особенности технологического процесса на ТЭЦ.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Особенности технологического процесса на теплоэлектростанции (ТЭЦ):</strong></p><p>Теплоэлектростанции (ТЭЦ) представляют собой комплексы технических систем, предназначенные для производства электроэнергии и тепла путем преобразования тепловой энергии, обычно получаемой сжиганием топлива. Технологический процесс на ТЭЦ включает ряд особенностей, которые являются ключевыми для эффективного и надежного функционирования станции. Некоторые из особенностей технологического процесса на ТЭЦ включают:</p><ol><li><p><strong>Тепловой процесс с использованием котлов</strong>: Одной из основных особенностей ТЭЦ является применение котлов для производства пара. Топливо (например, уголь, нефть, газ) сжигается в котлах для нагрева воды и превращения ее в пар, который затем применяется для привода турбин и генерации электроэнергии.</p></li><li><p><strong>Турбины и генераторы</strong>: Тепловая энергия, полученная в результате сжигания топлива и преобразования в пар, используется для привода турбин. Турбины приводят генераторы, которые преобразуют механическую энергию в электрическую.</p></li><li><p><strong>Комбинированный процесс</strong>: Некоторые ТЭЦ применяют комбинированный процесс, где тепловая энергия используется не только для привода турбин, но также для обогрева воды или пара для муниципальных нужд.</p></li><li><p><strong>Регулирование мощности</strong>: ТЭЦ должны обеспечивать регулирование мощности генерации электроэнергии в зависимости от потребности рынка или электросети. Это достигается изменением нагрузки на турбины или использованием различных генераторов.</p></li><li><p><strong>Контроль и автоматизация</strong>: ТЭЦ оборудованы сложными системами контроля и автоматизации для надежной и безопасной работы всего процесса. Эти системы мониторят параметры, регулируют работу оборудования и предотвращают возможные аварии.</p></li><li><p><strong>Теплоснабжение</strong>: Важной особенностью некоторых ТЭЦ является предоставление тепла для обогрева жилых и промышленных зданий, что делает их полезными для теплоснабжения городов.</p></li><li><p><strong>Экологические аспекты</strong>: Из-за сжигания топлива на ТЭЦ возникают выбросы парниковых газов и других загрязняющих веществ. Поэтому экологические аспекты и уменьшение вредных выбросов являются важной составляющей технологического процесса на ТЭЦ.</p></li></ol><p>Технологический процесс на ТЭЦ является сложным и многогранным, и его оптимизация требует учета различных факторов, таких как экономическая эффективность, надежность работы, соблюдение экологических норм и обеспечение энергетической безопасности.</p></div>"],["Типовые схемы ТЭЦ.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>На теплоэлектростанциях (ТЭЦ) применяются различные типовые схемы, которые определяют структуру и конфигурацию оборудования для производства электроэнергии и тепла. Ниже приведены некоторые из типовых схем ТЭЦ:</p><ol><li><p><strong>Схема с открытым нагревом пара (прямоточная схема)</strong>:</p><ul><li>В этой схеме топливо (обычно уголь или газ) сжигается в котле, чтобы нагреть воду и превратить ее в пар.</li><li>Пар направляется в прямоточную турбину, которая приводит генератор для производства электроэнергии.</li><li>После выхода из турбины пар отводится в конденсатор, где он конденсируется обратно в воду.</li><li>Тепловая энергия, выделяемая в конденсаторе, может использоваться для теплоснабжения.</li></ul></li><li><p><strong>Схема с закрытым нагревом пара (косвенного нагрева)</strong>:</p><ul><li>В этой схеме тепловая энергия из котлов передается через теплоноситель (обычно тепловое масло или термическую соль) к нагревателям пара.</li><li>Теплоноситель, нагреваясь, передает свою энергию пару, который затем приводит турбину для производства электроэнергии.</li><li>Охлажденный теплоноситель возвращается к котлам для повторного нагрева.</li></ul></li><li><p><strong>Комбинированная схема (КТГУ - комбинированная тепловая и газовая установка)</strong>:</p><ul><li>В этой схеме комбинируются газовая турбина и паровая турбина.</li><li>Газовая турбина работает непосредственно на сжатом газе, производя электроэнергию.</li><li>Отходящие газы после газовой турбины используются для нагрева пара, который приводит дополнительную паровую турбину и генератор.</li></ul></li><li><p><strong>Схема с силовой установкой</strong>:</p><ul><li>В данной схеме электрогенератор приводится в движение непосредственно турбиной или двигателем внутреннего сгорания (например, газовым двигателем или дизелем).</li><li>Тепловая энергия, полученная сжиганием топлива или другими методами, используется для привода турбины или двигателя.</li></ul></li></ol><p>Это лишь несколько примеров типовых схем ТЭЦ, и существует разнообразие комбинаций и вариантов в зависимости от размера, целей использования и доступности топлива. Каждая из этих схем имеет свои преимущества и недостатки, и выбор определенной схемы зависит от конкретных условий и требований.</p></div>"],["Дать определение распределительного устройства. Достоинства и недостатки схем РУ с одинарной системой шин.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Распределительное устройство (РУ)</strong>:</p><p>Распределительное устройство (РУ) – это элемент электрической сети, который служит для распределения электрической энергии на конечных потребителей. РУ может иметь различные конфигурации и включать в себя коммутационное оборудование, защитные устройства и средства измерения, необходимые для обеспечения надежной и безопасной работы электрической сети.</p><p><strong>Достоинства и недостатки схем РУ с одинарной системой шин:</strong></p><p>Схемы распределительных устройств с одинарной системой шин (ОСШ) – это одна из конфигураций, применяемых в электроэнергетических системах. Давайте рассмотрим их достоинства и недостатки:</p><p><strong>Достоинства схем РУ с ОСШ:</strong></p><ol><li><p><strong>Простота конструкции</strong>: Схемы с ОСШ имеют более простую конструкцию по сравнению с двойными или множественными системами шин, что облегчает их проектирование, монтаж и эксплуатацию.</p></li><li><p><strong>Меньшие затраты на оборудование</strong>: ОСШ требует меньшее количество коммутационного оборудования и, следовательно, может быть менее затратным в установке и обслуживании.</p></li><li><p><strong>Меньшая площадь</strong>: Из-за простоты конструкции, схемы РУ с ОСШ обычно занимают меньшую площадь, что особенно важно в ограниченных пространствах.</p></li></ol><p><strong>Недостатки схем РУ с ОСШ:</strong></p><ol><li><p><strong>Меньшая надежность</strong>: Одинарная система шин имеет меньшую надежность, чем двойная или множественная, так как отказ одной шины может привести к отключению большего количества потребителей.</p></li><li><p><strong>Ограниченные возможности по расширению</strong>: Схемы РУ с ОСШ могут быть ограничены в возможности расширения и увеличения мощности, особенно в случае увеличения числа подключаемых потребителей.</p></li><li><p><strong>Простой отказ оборудования</strong>: В случае отказа какого-либо элемента коммутационного оборудования на шине, весь сегмент сети, подключенный к этой шине, может быть отключен.</p></li><li><p><strong>Ограниченные возможности для проведения работ</strong>: Проведение ремонтных или обслуживающих работ на одинарной шине может потребовать временного отключения большего количества потребителей.</p></li></ol><p>Важно отметить, что выбор схемы РУ зависит от множества факторов, включая требования надежности, мощности, гибкости расширения, доступных ресурсов и конкретных условий конкретной электроэнергетической системы. Каждая схема имеет свои преимущества и ограничения, и инженеры должны учитывать все эти аспекты при разработке оптимальной схемы распределительного устройства.</p></div>"],["Схема РУ с одинарной секционированной системой шин. Достоинства и недостатки схемы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Схема РУ с одинарной секционированной системой шин:</strong></p><p>Схема распределительного устройства (РУ) с одинарной секционированной системой шин (ОССШ) представляет собой конфигурацию электроустановки, в которой каждая фаза электрической энергии имеет свою отдельную секционированную шину.</p><p><strong>Достоинства схемы РУ с ОССШ:</strong></p><ol><li><p><strong>Повышенная надежность</strong>: Каждая фаза имеет свою отдельную шину, что обеспечивает повышенную надежность системы. Если происходит отказ на одной из секций, остальные секции продолжают функционировать, и происходит минимальное влияние на общее электропитание.</p></li><li><p><strong>Более гибкая эксплуатация</strong>: Схема ОССШ позволяет более гибко управлять процессом отключения и включения секций. Это упрощает ремонтные работы, обслуживание и диагностику, так как можно ограничить отключение только касающихся этого участка секций.</p></li><li><p><strong>Улучшенная безопасность</strong>: При соблюдении правил эксплуатации и безопасности, схема ОССШ уменьшает вероятность аварийных ситуаций и повышает защиту персонала и оборудования.</p></li></ol><p><strong>Недостатки схемы РУ с ОССШ:</strong></p><ol><li><p><strong>Увеличение объема оборудования</strong>: Схема ОССШ требует большего количества коммутационного оборудования и секционированных шин, что может привести к увеличению занимаемого пространства и стоимости системы.</p></li><li><p><strong>Более сложное проектирование и обслуживание</strong>: По сравнению с одинарной системой шин, схема ОССШ требует более тщательного проектирования и обслуживания, особенно при размещении секционирующего оборудования и контроля за работой каждой секции.</p></li><li><p><strong>Повышенное электромагнитное влияние</strong>: Большее количество секционированных шин может привести к увеличению электромагнитных интерференций и возможному влиянию на соседние секции.</p></li></ol><p>Важно отметить, что выбор схемы РУ зависит от требований к надежности, гибкости, эффективности использования ресурсов, условий эксплуатации и других факторов. Каждая схема имеет свои преимущества и недостатки, и инженеры должны балансировать эти аспекты для разработки наиболее оптимальной схемы распределительного устройства.</p></div>"],["Схема РУ с двойной системой шин. Достоинства и недостатки схемы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Схема РУ с двойной системой шин:</strong></p><p>Схема распределительного устройства (РУ) с двойной системой шин (ДСШ) представляет собой конфигурацию электроустановки, в которой используются две параллельные шины – основная (рабочая) и резервная (запасная).</p><p><strong>Достоинства схемы РУ с ДСШ:</strong></p><ol><li><p><strong>Высокая надежность</strong>: Использование двух независимых параллельных шин повышает надежность системы. В случае отказа одной из шин, электроэнергия автоматически переключается на резервную шину, обеспечивая непрерывное электроснабжение.</p></li><li><p><strong>Улучшенная безопасность</strong>: Двойная система шин обеспечивает дополнительную защиту от аварийных ситуаций и повреждений. Это уменьшает вероятность повреждения оборудования и повышает безопасность персонала.</p></li><li><p><strong>Гибкость при проведении работ</strong>: Работы по обслуживанию, ремонту или модернизации могут выполняться на одной шине, пока другая остается активной, что обеспечивает гибкость и удобство при проведении плановых и аварийных работ.</p></li></ol><p><strong>Недостатки схемы РУ с ДСШ:</strong></p><ol><li><p><strong>Больший объем оборудования</strong>: Двойная система шин требует большего количества коммутационного оборудования, резервных устройств и других компонентов, что может повлечь увеличение занимаемого пространства и стоимости системы.</p></li><li><p><strong>Более сложное управление</strong>: Управление и контроль работы двойной системы шин требует более сложных автоматических устройств и систем, чтобы обеспечить автоматическое переключение между основной и резервной шинами при необходимости.</p></li><li><p><strong>Увеличенные потери</strong>: Из-за использования дополнительного оборудования и устройств, схема с ДСШ может иметь немного большие потери электроэнергии по сравнению с одинарной системой шин.</p></li></ol><p>Важно отметить, что выбор схемы РУ зависит от требований к надежности, гибкости, экономической эффективности и других факторов. Каждая схема имеет свои преимущества и ограничения, и инженеры должны учитывать эти аспекты при разработке оптимальной схемы распределительного устройства в зависимости от конкретных условий и требований системы электропитания.</p></div>"],["Какие схемы РУ применяются в основном для районной подстанции?","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Для районных подстанций в электроэнергетике применяются следующие основные схемы распределительных устройств (РУ):</p><ol><li><p><strong>Схема с одинарной системой шин (ОСШ)</strong>:\\nВ данной схеме используется одна основная шина, на которой подключаются все потребители и источники электроэнергии. Это простая и компактная конфигурация, хорошо подходящая для небольших районных подстанций с небольшим количеством потребителей.</p></li><li><p><strong>Схема с двойной системой шин (ДСШ)</strong>:\\nВ схеме с ДСШ используются две параллельные шины – основная и резервная. Это позволяет обеспечить повышенную надежность и гибкость в управлении подстанцией. В случае отказа одной шины, электроэнергия автоматически переключается на другую, что обеспечивает непрерывное электроснабжение.</p></li><li><p><strong>Схема с одинарной секционированной системой шин (ОССШ)</strong>:\\nВ данной схеме каждая фаза имеет свою отдельную секционированную шину. Это обеспечивает повышенную надежность и уменьшает возможное влияние отказов на другие секции. Схема ОССШ может использоваться в подстанциях с повышенными требованиями к надежности.</p></li><li><p><strong>Схема с двойной секционированной системой шин (ДССШ)</strong>:\\nВ данной схеме применяются две параллельные секционированные шины – основная и резервная. Это позволяет создать высоконадежную систему с двойными резервами, что особенно важно для критически важных районных подстанций.</p></li></ol><p>Выбор конкретной схемы РУ для районной подстанции зависит от множества факторов, таких как требования к надежности, мощности, гибкости управления, доступным ресурсам, экономической эффективности и особенностям района обслуживания.</p></div>"],["Какие схемы РУ применяются в основном для ГПП?","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Для генерирующих подстанций (ГПП) в электроэнергетике применяются следующие основные схемы распределительных устройств (РУ):</p><ol><li><p><strong>Схема с одинарной системой шин (ОСШ)</strong>:\\nСхема ОСШ на ГПП представляет собой простую конфигурацию с одной основной шиной, на которой подключаются генераторы и выходные линии. Эта схема удобна для небольших и средних генерирующих подстанций с одним или несколькими генераторами.</p></li><li><p><strong>Схема с двойной системой шин (ДСШ)</strong>:\\nСхема ДСШ на ГПП использует две параллельные шины – основную и резервную. Это позволяет обеспечить повышенную надежность системы электроснабжения, так как при отказе одной шины электроэнергия автоматически переключается на другую.</p></li><li><p><strong>Схема с одинарной секционированной системой шин (ОССШ)</strong>:\\nСхема ОССШ на ГПП предполагает наличие отдельной секционированной шины для каждого генератора. Это обеспечивает повышенную надежность и уменьшает влияние отказов одного генератора на другие.</p></li><li><p><strong>Схема с двойной секционированной системой шин (ДССШ)</strong>:\\nСхема ДССШ на ГПП использует две параллельные секционированные шины – основную и резервную. Это обеспечивает высокую надежность и гибкость управления генерирующей станцией.</p></li></ol><p>Выбор конкретной схемы РУ для генерирующей подстанции зависит от требований к надежности, гибкости управления генераторами, мощности, экономической эффективности и других факторов, которые характерны для конкретной генерирующей станции и её потребностей.</p></div>"],["Последовательность работы схемы с ОД и КЗ при отключении поврежденного силового трансформатора.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>При отключении поврежденного силового трансформатора в схеме с одинарной системой шин (ОД) возможны следующие шаги:</p><ol><li><p><strong>Обнаружение повреждения</strong>: Сначала необходимо обнаружить повреждение трансформатора. Это может быть обнаружено автоматическими защитными устройствами, которые реагируют на перегрузки, короткие замыкания и другие неисправности.</p></li><li><p><strong>Отключение трансформатора</strong>: После обнаружения повреждения трансформатор должен быть отключен от сети. Это делается путем открытия соответствующих выключателей или разъединителей, чтобы изолировать трансформатор от электрической системы.</p></li><li><p><strong>Переключение на резервный трансформатор (если есть)</strong>: В случае, если на подстанции имеется резервный силовой трансформатор, его можно включить в сеть для продолжения нормального электроснабжения.</p></li><li><p><strong>Работа на одном трансформаторе</strong>: В некоторых случаях, когда резервного трансформатора нет или его работа невозможна, другие трансформаторы на подстанции должны принять дополнительную нагрузку для обеспечения электроснабжения.</p></li><li><p><strong>Планирование ремонта или замены</strong>: После отключения поврежденного трансформатора необходимо провести его осмотр и оценить степень повреждений. В зависимости от обстановки может потребоваться его ремонт или замена. Планирование ремонтных работ или подбор нового трансформатора следует выполнять с учетом требований надежности и времени восстановления электроснабжения.</p></li></ol><p>Важно отметить, что последовательность работы может варьироваться в зависимости от конкретных условий и характера повреждения силового трансформатора. Безопасность персонала и оборудования всегда является приоритетом при выполнении таких операций. Ремонтные работы и замена трансформаторов должны выполняться квалифицированными специалистами в соответствии с установленными правилами и нормативами.</p></div>"],["Конструкция, область применения, достоинство и недостатки вакуумных выключателей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Вакуумные выключатели</strong> являются типом выключателей, применяемых в электроэнергетических системах для открытия и закрытия электрических цепей. Они используют вакуумный пространство в качестве изоляционной среды между контактами, что обеспечивает хорошие характеристики переключения и высокую надежность работы. Вот основные аспекты конструкции, области применения, а также достоинства и недостатки вакуумных выключателей:</p><p><strong>Конструкция вакуумных выключателей:</strong></p><ul><li>Вакуумные выключатели состоят из контактов, которые разделяются и соединяются в вакуумном пространстве. Когда выключатель закрыт, контакты соединены, обеспечивая электрическое соединение. При открытии выключателя контакты разделяются, прерывая электрическую цепь.</li></ul><p><strong>Область применения вакуумных выключателей:</strong></p><ul><li>Вакуумные выключатели широко применяются в системах распределения электроэнергии, включая подстанции, городские электрические сети и промышленные установки. Они используются для управления нагрузками, защиты от коротких замыканий и отключения оборудования для обслуживания.</li></ul><p><strong>Достоинства вакуумных выключателей:</strong></p><ol><li><strong>Высокая надежность</strong>: Вакуумные выключатели обладают высокой степенью надежности, так как отсутствие газовых или жидких сред в вакууме предотвращает истирание и окисление контактов, что обеспечивает долгий срок службы и минимальные потери мощности при коммутации.</li><li><strong>Высокая скорость переключения</strong>: Вакуумные выключатели способны осуществлять быстрое переключение цепей, что особенно важно для защиты от коротких замыканий и обеспечения стабильности системы.</li><li><strong>Низкие потери мощности</strong>: Из-за отсутствия дуги при размыкании контактов, вакуумные выключатели обеспечивают меньшие потери мощности и имеют более высокий КПД по сравнению с выключателями, использующими другие изоляционные среды.</li></ol><p><strong>Недостатки вакуумных выключателей:</strong></p><ol><li><strong>Высокая стоимость</strong>: Вакуумные выключатели могут быть более дорогими в производстве по сравнению с некоторыми другими типами выключателей.</li><li><strong>Ограниченный ток переключения</strong>: Для некоторых высоковольтных приложений могут потребоваться специальные дизайны для обеспечения возможности переключения больших токов.</li></ol><p>Несмотря на некоторые недостатки, вакуумные выключатели широко применяются в электроэнергетике благодаря своим преимуществам в надежности, быстродействии и эффективности.</p></div>"],["Конструкция, область применения, достоинство и недостатки элегазовых выключателей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Элегазовые выключатели</strong> (иногда называемые газовыми выключателями) являются типом выключателей, использующих газовую среду (как правило, серу-гексафторид SF6) для изоляции контактов. Они применяются в электроэнергетических системах для открытия и закрытия электрических цепей. Вот основные аспекты конструкции, области применения, а также достоинства и недостатки элегазовых выключателей:</p><p><strong>Конструкция элегазовых выключателей:</strong></p><ul><li>Элегазовые выключатели содержат контакты, которые разделяются и соединяются в газовой среде (SF6). При открытии контактов газ служит изоляционной средой и предотвращает образование дуги, что позволяет безопасно размыкать высоковольтные электрические цепи.</li></ul><p><strong>Область применения элегазовых выключателей:</strong></p><ul><li>Элегазовые выключатели широко применяются в системах распределения и передачи электроэнергии, а также в высоковольтных подстанциях. Они используются для коммутации нагрузок, защиты от коротких замыканий, отключения оборудования для обслуживания, а также для разделения или соединения различных участков электрических сетей.</li></ul><p><strong>Достоинства элегазовых выключателей:</strong></p><ol><li><strong>Высокая надежность</strong>: Элегазовые выключатели обладают высокой степенью надежности благодаря использованию газовой изоляции, которая предотвращает истирание и окисление контактов, обеспечивая долгий срок службы.</li><li><strong>Высокая скорость переключения</strong>: Элегазовые выключатели способны быстро и надежно открывать и закрывать контакты, что важно для обеспечения стабильности работы электрической системы.</li><li><strong>Малые размеры и вес</strong>: Элегазовые выключатели имеют компактный дизайн и небольшой вес по сравнению с некоторыми другими выключателями.</li></ol><p><strong>Недостатки элегазовых выключателей:</strong></p><ol><li><strong>Высокая стоимость</strong>: Элегазовые выключатели могут быть более дорогими в производстве по сравнению с некоторыми другими типами выключателей.</li><li><strong>Влияние на окружающую среду</strong>: Газ SF6, используемый в элегазовых выключателях, является парниковым газом, который может оказывать влияние на климат, если попадет в атмосферу при утечках или при конце срока эксплуатации оборудования. Это приводит к необходимости контролировать и предотвращать утечки газа и принимать меры по утилизации выключателей после эксплуатации.</li></ol><p>Несмотря на некоторые недостатки, элегазовые выключатели широко применяются в высоковольтных системах благодаря своим преимуществам в надежности и быстродействии. Для уменьшения воздействия на окружающую среду, исследуются и внедряются технологии для обработки и утилизации газовой среды, а также разрабатываются альтернативные экологически безопасные газы для использования в выключателях.</p></div>"],["Конструкция, область применения, достоинство и недостатки малообъемных масляных выключателей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Малообъемные масляные выключатели</strong> являются типом выключателей, использующих масло в качестве изоляционной среды для контактов. Они применяются в электроэнергетических системах для открытия и закрытия электрических цепей. Вот основные аспекты конструкции, области применения, а также достоинства и недостатки малообъемных масляных выключателей:</p><p><strong>Конструкция малообъемных масляных выключателей:</strong></p><ul><li>Малообъемные масляные выключатели содержат контакты, которые разделяются и соединяются в масляной среде. Масло используется в качестве изоляционной среды для предотвращения образования дуги при открытии контактов.</li></ul><p><strong>Область применения малообъемных масляных выключателей:</strong></p><ul><li>Малообъемные масляные выключатели применяются в средних и высоковольтных системах электроэнергетики. Они используются для коммутации нагрузок, защиты от коротких замыканий, отключения оборудования для обслуживания и разделения или соединения различных участков электрических сетей.</li></ul><p><strong>Достоинства малообъемных масляных выключателей:</strong></p><ol><li><strong>Высокая надежность</strong>: Малообъемные масляные выключатели обладают высокой степенью надежности благодаря использованию масла в качестве изоляционной среды, которое обеспечивает хорошую изоляцию контактов и предотвращает образование дуги.</li><li><strong>Сравнительно низкая стоимость</strong>: Малообъемные масляные выключатели могут быть более доступны по стоимости в сравнении с некоторыми другими типами выключателей.</li></ol><p><strong>Недостатки малообъемных масляных выключателей:</strong></p><ol><li><strong>Большие размеры и масса</strong>: Малообъемные масляные выключатели обычно имеют большие размеры и массу по сравнению с некоторыми другими типами выключателей.</li><li><strong>Требование к обслуживанию</strong>: Масло требует регулярного обслуживания и проверки его качества, что может повысить операционные расходы и необходимость в специалистах для проведения обслуживания.</li></ol><p>Несмотря на некоторые недостатки, малообъемные масляные выключатели успешно применяются в электроэнергетике благодаря своим преимуществам в надежности и доступной стоимости. Для уменьшения размеров и веса, исследуются и внедряются передовые технологии и материалы в производство выключателей.</p></div>"],["Выбор выключателей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор выключателей в электроэнергетике является важным этапом проектирования и эксплуатации электрических систем и сетей. Он зависит от различных факторов, таких как напряжение сети, тип оборудования, условия эксплуатации, требования безопасности и надежности. Вот некоторые ключевые аспекты, которые учитываются при выборе выключателей:</p><ol><li><p><strong>Напряжение сети:</strong> Выключатели должны быть подобраны с учетом напряжения, на котором они будут работать. В зависимости от уровня напряжения могут применяться различные типы выключателей: для низковольтных, средневольтных или высоковольтных систем.</p></li><li><p><strong>Тип оборудования:</strong> Выключатели выбираются с учетом типа оборудования, которое они будут коммутировать или защищать. Например, для силовых трансформаторов используются выключатели большой емкости, а для линий электропередачи — выключатели с высокой надежностью и быстрым переключением.</p></li><li><p><strong>Ток коммутации:</strong> Выключатели должны обладать достаточной номинальной коммутируемой токовой нагрузкой, чтобы обеспечить стабильную работу в условиях сети.</p></li><li><p><strong>Тип коммутации:</strong> Выключатели могут быть ручными, автоматическими или дистанционно управляемыми. Выбор типа зависит от специфических требований и условий эксплуатации системы.</p></li><li><p><strong>Условия эксплуатации:</strong> Факторы, такие как климатические условия, окружающая среда, воздействие на выключатель (вибрации, загрязнения), также учитываются при выборе подходящего типа выключателя.</p></li><li><p><strong>Надежность и безопасность:</strong> Особое внимание уделяется надежности и безопасности выключателей. В критических системах выбираются выключатели с высокой степенью надежности и возможностью быстрого отключения в аварийных ситуациях.</p></li><li><p><strong>Сертификация и соответствие стандартам:</strong> При выборе выключателей важно удостовериться, что они соответствуют применимым стандартам безопасности и нормативам.</p></li><li><p><strong>Техническая поддержка и обслуживание:</strong> Надежность и доступность технической поддержки и обслуживания также играют важную роль в выборе выключателей.</p></li></ol><p>Каждый случай выбора выключателей уникален, и инженеры должны учитывать все указанные аспекты, чтобы обеспечить оптимальную работу и безопасность электроэнергетических систем и сетей.</p></div>"],["Типы силовых трансформаторов и автотрансформаторов. Системы охлаждения трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Типы силовых трансформаторов и автотрансформаторов:</p><ol><li><p>Силовые трансформаторы:</p><ul><li>Распределительные трансформаторы: применяются для снижения напряжения в распределительных сетях и обеспечения электроснабжения домов, офисов и других зданий.</li><li>Силовые трансформаторы для передачи электроэнергии: используются на высоковольтных линиях передачи для снижения потерь энергии при долгосрочной передаче электроэнергии на большие расстояния.</li></ul></li><li><p>Автотрансформаторы:</p><ul><li>Автотрансформаторы: имеют общую обмотку для входа и выхода, что позволяет сэкономить материалы и уменьшить габариты. Они используются, когда необходимо совмещение двух номиналов напряжения или регулирование напряжения.</li></ul></li></ol><p>Системы охлаждения трансформаторов:</p><p>Охлаждение трансформаторов необходимо для поддержания их нормальной работы и предотвращения перегрева. Существует несколько типов систем охлаждения:</p><ol><li><p>Естественное охлаждение (природное охлаждение): Трансформатор охлаждается окружающим воздухом. Внешняя поверхность корпуса трансформатора имеет радиаторы или ребра для увеличения поверхности и улучшения теплоотдачи.</p></li><li><p>Принудительное охлаждение: Включает вентиляторы или насосы, которые активно перемещают охлаждающую среду (обычно масло) через трансформатор, усиливая процесс охлаждения.</p></li><li><p>Охлаждение с использованием воды: В некоторых крупных трансформаторах могут применяться системы охлаждения, использующие воду, чтобы эффективно отводить тепло.</p></li><li><p>Смешанные системы охлаждения: Некоторые трансформаторы могут комбинировать различные методы охлаждения для оптимизации процесса.</p></li></ol><p>Важно подбирать правильную систему охлаждения для конкретного типа трансформатора и учитывать условия его эксплуатации, чтобы обеспечить его надежную и безопасную работу.</p></div>"],["Назначение выключателей, разъединителей, выключателей нагрузки, короткозамыкателей (КЗ), отделителей (ОД).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выключатели, разъединители, выключатели нагрузки, короткозамыкатели (КЗ) и отделители (ОД) являются важными элементами энергопитающих систем и электрических сетей. Вот их назначение:</p><ol><li><p>Выключатели: Используются для открытия и закрытия электрической цепи в нормальных условиях работы. Они позволяют контролировать подачу электроэнергии на электроприемники или сегменты сети, обеспечивая возможность обслуживания, ремонта или замены оборудования без необходимости прерывания всей системы.</p></li><li><p>Разъединители: Применяются для размыкания электрической цепи при обслуживании или ремонте оборудования. Они выполняют функцию физического разъединения, предотвращая подачу электроэнергии на отключенное оборудование. Разъединители должны быть уверенно замкнуты в положении \\"открыто\\" перед началом работ.</p></li><li><p>Выключатели нагрузки: Эти устройства используются для отключения нагрузки от электрической системы. Выключатели нагрузки способны справляться с большими токами и служат для защиты оборудования и систем от перегрузок и коротких замыканий.</p></li><li><p>Короткозамыкатели (КЗ): Эти устройства предназначены для быстрого отключения электрической цепи в случае короткого замыкания. Короткозамыкатели создают низкое сопротивление, обеспечивая быстрое распределение тока короткого замыкания, что помогает защитить оборудование и систему от повреждений.</p></li><li><p>Отделители (ОД): Они используются для создания электрической изоляции между различными частями сети или оборудования. Отделители помогают предотвратить случайные замыкания или переходы тока между разными фазами или компонентами системы.</p></li></ol><p>Важно понимать, что эти устройства играют критическую роль в обеспечении безопасности, защите и эффективной работы электроэнергетических систем и электрических сетей. Их правильное применение и обслуживание помогают предотвратить аварии и обеспечивают стабильное и надежное электроснабжение.</p></div>"],["Назначение трансформаторов тока (ТТ), трансформаторов напряжения (ТН), разрядников, реакторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Трансформаторы тока (ТТ), трансформаторы напряжения (ТН), разрядники и реакторы являются важными компонентами электроэнергетических систем и электрических сетей. Вот их назначение:</p><ol><li><p>Трансформаторы тока (ТТ): ТТ используются для измерения тока в электрической цепи. Они предназначены для преобразования высокого тока, проходящего по первичной обмотке, в низкий ток на вторичной стороне, который затем подается на измерительные приборы, такие как амперметры. ТТ позволяют измерять высокие токи без необходимости проводить ток через измерительное оборудование, что обеспечивает безопасность и точность измерений.</p></li><li><p>Трансформаторы напряжения (ТН): ТН служат для измерения напряжения в электрической цепи. Они позволяют преобразовать высокое напряжение на первичной обмотке в низкое напряжение на вторичной стороне, которое затем поступает на измерительные приборы, такие как вольтметры. ТН позволяют измерять напряжение без необходимости подключения измерительных приборов непосредственно к высоковольтным точкам системы, что обеспечивает безопасность и удобство.</p></li><li><p>Разрядники: Разрядники (или грозозащитные разрядники) применяются для защиты электроэнергетических систем и оборудования от перенапряжений, вызванных молниями или другими источниками. Они обладают способностью быстро реагировать на повышение напряжения и разряжать его в заземление, предотвращая повреждение оборудования и системы, которое может возникнуть из-за сильных перенапряжений.</p></li><li><p>Реакторы: Реакторы применяются для регулирования тока и реактивной мощности в электрических сетях. Они являются индуктивными элементами и используются для увеличения или уменьшения тока в системе. Реакторы также помогают снижать уровень коротких замыканий и резко изменяющихся токов, что способствует стабильной работе системы и защите оборудования.</p></li></ol><p>Важно отметить, что все эти компоненты играют важную роль в обеспечении надежности, безопасности и эффективности работы электроэнергетических систем и электрических сетей. Их правильное применение и обслуживание помогают предотвратить повреждения оборудования, обеспечивают защиту от перенапряжений и обеспечивают стабильное электроснабжение.</p></div>"],["Нагрев токоведущих частей в продолжительном режиме. Длительно допустимый и номинальный ток проводника. Постоянная времени нагрева проводника.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Нагрев токоведущих частей в продолжительном режиме является важным аспектом в электроэнергетике и электротехнике. Это связано с потерями энергии, которые возникают из-за протекания тока через проводники. Вопрос №16 включает следующие понятия:</p><ol><li><p>Длительно допустимый ток проводника: Это максимально допустимый ток, который проводник может переносить в течение продолжительного времени без превышения предельных температурных ограничений. При превышении длительно допустимого тока проводник может перегреться, что приведет к ухудшению его характеристик и даже к повреждениям.</p></li><li><p>Номинальный ток проводника: Номинальный ток представляет собой обычно принимаемый рабочий ток, при котором проводник работает в нормальных условиях без перегрузок. Он обычно определяется на основе характеристик проводника, его сечения и тепловых характеристик.</p></li><li><p>Постоянная времени нагрева проводника: Постоянная времени относится к времени, за которое токоведущие части, такие как проводники или кабели, нагреваются до определенной доли своего максимально допустимого температурного предела. Это время зависит от тепловой инерции проводника и окружающей среды. Постоянная времени позволяет оценить, как быстро происходит нагрев и какие меры предосторожности необходимы для предотвращения перегрева.</p></li></ol><p>Важно соблюдать допустимые значения тока проводника и учитывать его тепловые характеристики, чтобы обеспечить безопасную и эффективную работу электроэнергетических систем и электрических сетей. Корректное определение длительно допустимого тока и использование проводников, спроектированных для определенных нагрузок, помогают избежать нежелательных последствий, связанных с нагревом токоведущих частей.</p></div>"],["Нагрев токоведущих частей в кратковременном режиме. Тепловой импульс тока КЗ.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Вопрос №17 связан с нагревом токоведущих частей в кратковременном режиме, а также с тепловым импульсом тока короткого замыкания (КЗ). Давайте разберем эти понятия:</p><ol><li><p>Нагрев токоведущих частей в кратковременном режиме: Кратковременный режим, или режим КЗ, возникает, когда происходит короткое замыкание в электрической системе, что приводит к резкому увеличению тока. Во время КЗ токоведущие части, такие как проводники и кабели, могут испытывать кратковременный и очень высокий ток. Это приводит к интенсивному нагреву проводников и окружающих их материалов.</p></li><li><p>Тепловой импульс тока КЗ: Тепловой импульс тока КЗ представляет собой кратковременное увеличение тока, возникающее при коротком замыкании, и представляющее значительную энергию. Эта энергия преобразуется в тепло в токоведущих частях и окружающих материалах, вызывая высокую температуру на короткое время.</p></li></ol><p>Тепловой импульс тока КЗ является опасным для оборудования и систем электроэнергетики. Это может привести к повреждению проводников, изоляции, а также к возможному возгоранию и разрушению оборудования. Для предотвращения негативных последствий теплового импульса тока КЗ используются различные защитные устройства, такие как выключатели, предохранители и релейная защита. Эти устройства обеспечивают быстрое отключение токоведущих частей от источника КЗ, что помогает предотвратить повреждения и обеспечить безопасность системы.</p></div>"],["Проверка токоведущих частей и аппаратов на термическую стойкость.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Проверка токоведущих частей и аппаратов на термическую стойкость является важным аспектом в области электроэнергетики и электротехники. Это необходимо для обеспечения безопасной и надежной работы электрических систем и оборудования. В процессе проверки учитываются характеристики и способность токоведущих элементов и аппаратов переносить тепловую нагрузку, возникающую в процессе работы системы.</p><p>Вот основные этапы проверки токоведущих частей и аппаратов на термическую стойкость:</p><ol><li><p>Расчетные оценки: Сначала проводится расчетная оценка тепловой нагрузки, которую будут испытывать токоведущие части и аппараты в нормальных и аварийных условиях работы. Расчет включает учет рабочих токов, перегрузочных токов, токов короткого замыкания, а также длительности времени, в течение которой они действуют.</p></li><li><p>Испытания на моделях: Чтобы подтвердить расчетные данные и тепловую стойкость, проводятся испытания на моделях или прототипах токоведущих элементов и аппаратов. В процессе испытаний проверяется их способность переносить тепловую нагрузку в условиях, максимально приближенных к реальным.</p></li><li><p>Соблюдение стандартов и нормативов: Проверка на термическую стойкость должна соответствовать действующим стандартам и нормативам, которые регулируют допустимые пределы нагрева и максимальные рабочие температуры для токоведущих частей и аппаратов.</p></li><li><p>Применение тепловых изоляционных материалов: В некоторых случаях могут использоваться специальные тепловые изоляционные материалы, чтобы улучшить термическую стойкость и предотвратить перегрев.</p></li><li><p>Обслуживание и контроль: После установки и ввода в эксплуатацию токоведущих частей и аппаратов осуществляется регулярное обслуживание и контроль их термической стойкости. Это включает проверку и замену поврежденных элементов и материалов.</p></li></ol><p>Проверка токоведущих частей и аппаратов на термическую стойкость помогает предотвратить перегрев, повреждения и аварии, обеспечивая безопасную и надежную работу электрических сетей и систем электроэнергетики.</p></div>"],["Проверка токоведущих частей и аппаратов на электродинамическую стойкость.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Проверка токоведущих частей и аппаратов на электродинамическую стойкость также является важным аспектом в области электроэнергетики и электротехники. Этот вид проверки направлен на оценку способности токоведущих элементов и аппаратов справляться с электродинамическими нагрузками, которые возникают в результате коротких замыканий и других аварийных ситуаций в электрических системах.</p><p>Процесс проверки на электродинамическую стойкость включает в себя следующие шаги:</p><ol><li><p>Расчеты и моделирование: Прежде чем проводить физические испытания, производятся расчеты и компьютерное моделирование поведения токоведущих частей и аппаратов в условиях короткого замыкания. Расчеты позволяют определить ожидаемые электродинамические силы и напряжения, действующие на элементы системы.</p></li><li><p>Физические испытания: После расчетов проводятся физические испытания, которые включают создание контролируемых коротких замыканий в системе и наблюдение за поведением токоведущих элементов и аппаратов во время аварийных ситуаций. Это может включать нагрузку, применяемую на проводники и другие компоненты, а также исследование деформаций и напряжений, возникающих в результате электродинамических нагрузок.</p></li><li><p>Соответствие стандартам: Проверка на электродинамическую стойкость должна соответствовать действующим стандартам и нормативам, которые устанавливают требования к механической прочности и надежности токоведущих частей и аппаратов при коротких замыканиях.</p></li><li><p>Обновление и модернизация: В зависимости от результатов проверки, возможно потребуется обновление или модернизация элементов системы, чтобы повысить их электродинамическую стойкость и обеспечить надежную работу в аварийных условиях.</p></li></ol><p>Проверка на электродинамическую стойкость позволяет убедиться в том, что токоведущие части и аппараты способны выдерживать электродинамические нагрузки в экстремальных ситуациях, таких как короткие замыкания. Это помогает предотвращать повреждения оборудования и обеспечивать безопасную и надежную работу электроэнергетических систем и электрических сетей.</p></div>"],["Проверка выключателей на отключающую способность.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Проверка выключателей на отключающую способность является важным процессом в области электроэнергетики и электротехники. Отключающая способность выключателей означает их способность надежно и эффективно отключать электрическую цепь в случае аварийных или нештатных ситуаций, таких как короткие замыкания или перегрузки.</p><p>Вот основные шаги проверки выключателей на отключающую способность:</p><ol><li><p>Испытания по стандартам: Проверка выключателей проводится согласно действующим стандартам и нормативам. Эти стандарты определяют требования к отключающей способности, которые должны быть выполнены выключателем в различных условиях эксплуатации.</p></li><li><p>Симуляция аварийных ситуаций: Проверка включает проведение специальных испытаний с симуляцией аварийных ситуаций, таких как короткое замыкание или перегрузка. В процессе испытаний измеряются и оцениваются параметры, такие как время срабатывания, степень разъединения контактов, и другие характеристики, которые влияют на отключающую способность.</p></li><li><p>Оценка результатов: После проведения испытаний анализируются полученные результаты, чтобы убедиться, что выключатель соответствует требуемым характеристикам отключения. При необходимости могут быть предприняты дополнительные меры для улучшения отключающей способности выключателя.</p></li><li><p>Регулярное обслуживание: Выключатели должны регулярно обслуживаться и проверяться, чтобы обеспечить их надежную работу. Это включает проверку состояния контактов, механизмов и других компонентов, которые влияют на отключающую способность.</p></li></ol><p>Проверка выключателей на отключающую способность помогает гарантировать безопасную и надежную работу электрических сетей. Выключатели, обладающие хорошей отключающей способностью, способны быстро и эффективно прерывать ток в аварийных ситуациях, что помогает предотвратить повреждения оборудования и обеспечить безопасность персонала и системы.</p></div>"],["Методы и средства ограничения токов короткого замыкания, применяемые на электростанциях и подстанциях.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Методы и средства ограничения токов короткого замыкания, применяемые на электростанциях и подстанциях, имеют важное значение для обеспечения надежности и безопасности электроэнергетических систем. Они помогают предотвращать разрушительные последствия высоких токов при возникновении коротких замыканий. Вот некоторые из распространенных методов и средств ограничения токов короткого замыкания:</p><ol><li><p>Предохранители: Предохранители - это электрические устройства, которые предназначены для автоматического разрыва электрической цепи при превышении определенного тока. Они работают на основе эффекта теплового плавления или срабатывания при сильном токе короткого замыкания. Предохранители устанавливаются на отдельных линиях или в цепях, чтобы предотвратить повреждение оборудования и кабелей.</p></li><li><p>Выключатели с быстрым разрывом: Выключатели с быстрым разрывом представляют собой выключатели, которые спроектированы для быстрого разрыва тока в случае короткого замыкания. Они могут обеспечивать очень быстрый отказ в условиях высокого тока, предотвращая дальнейшее развитие короткого замыкания.</p></li><li><p>Разрядники (Грозозащитные разрядники): Разрядники применяются для предотвращения повреждений оборудования и систем от перенапряжений, вызванных грозами или другими источниками. Они обладают способностью быстро срабатывать при повышении напряжения и разряжать его в заземление.</p></li><li><p>Токоведущие ограничители: Токоведущие ограничители используются для ограничения тока короткого замыкания в системе. Они обеспечивают низкое сопротивление для короткого замыкания, что способствует быстрому распределению тока и предотвращает его дальнейшее распространение.</p></li><li><p>Реакторы и дроссели: Реакторы и дроссели могут использоваться для ограничения тока короткого замыкания и уменьшения его значения. Они представляют собой индуктивные элементы, которые увеличивают реактивное сопротивление в цепи и тем самым снижают величину тока короткого замыкания.</p></li></ol><p>Комбинация этих методов и средств позволяет эффективно ограничивать ток короткого замыкания на электростанциях и подстанциях, что помогает обеспечить надежную работу системы и защитить оборудование от повреждений.</p></div>"],["Силовые трансформаторы в схемах электростанций и подстанций.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Силовые трансформаторы играют важную роль в схемах электростанций и подстанций в электроэнергетике. Они служат для перевода электрической энергии с одного уровня напряжения на другой, что позволяет эффективно передавать и распределять электроэнергию в сети. Вот некоторые из основных аспектов использования силовых трансформаторов на электростанциях и подстанциях:</p><ol><li><p>Передача электроэнергии: Силовые трансформаторы применяются для повышения или понижения напряжения электрической энергии в системе. На высоковольтной стороне (высокое напряжение) они принимают электрическую энергию с генераторов или других источников, а затем на низковольтной стороне (низкое напряжение) передают эту энергию в сеть для дальнейшего распределения.</p></li><li><p>Регулирование напряжения: Силовые трансформаторы позволяют регулировать напряжение в системе. При повышении напряжения на выходе трансформатора, можно уменьшить потери энергии при передаче на большие расстояния. А при понижении напряжения, можно подстроить его под требуемые значения в распределительных сетях.</p></li><li><p>Изоляция: Силовые трансформаторы обеспечивают электрическую изоляцию между высоковольтными и низковольтными частями системы, что повышает безопасность и предотвращает перенос высокого напряжения на низковольтные уровни.</p></li><li><p>Трансформация тока и мощности: Силовые трансформаторы могут также использоваться для изменения тока или мощности в сети, что позволяет адаптировать электроэнергию под определенные потребности.</p></li><li><p>Защита и контроль: Силовые трансформаторы также используются в системах защиты и контроля, чтобы обнаруживать аварийные ситуации и быстро срабатывать на них, предотвращая дальнейшее распространение аварийного состояния.</p></li></ol><p>Силовые трансформаторы представляют собой ключевую составляющую электроэнергетических систем и позволяют обеспечивать эффективное и безопасное функционирование электростанций и подстанций. Они играют роль в передаче и распределении электроэнергии, регулировании напряжения и обеспечении надежности системы.</p></div>"],["Автотрансформаторы в схемах электростанций и подстанций. Режимы работы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автотрансформаторы - это особый тип трансформаторов, который широко применяется в схемах электростанций и подстанций в электроэнергетике. Они представляют собой одну общую обмотку, которая служит как высоковольтная сторона (ВС) и низковольтная сторона (НС) трансформатора. Режимы работы автотрансформаторов определяются их физической конструкцией и подключением.</p><p>Рассмотрим некоторые режимы работы автотрансформаторов:</p><ol><li><p>Прямой режим работы: В прямом режиме автотрансформатор используется для повышения или понижения напряжения в электрической сети. Это достигается путем подключения сторон трансформатора таким образом, чтобы одна часть обмотки служила как ВС, а другая - как НС. В прямом режиме выходное напряжение на НС меньше или больше напряжения на ВС, в зависимости от соотношения величин обмоток.</p></li><li><p>Обратный режим работы: В обратном режиме автотрансформатор используется для уменьшения или увеличения напряжения в сети. В этом режиме обмотка, которая ранее служила как ВС, становится НС, а обмотка, которая ранее была НС, становится ВС. Это позволяет получить напряжение на НС, которое меньше или больше напряжения на ВС.</p></li><li><p>Режим переключения: Автотрансформаторы также могут использоваться для переключения между различными уровнями напряжения в сети. Путем изменения точки подключения к общей обмотке можно получить различные значения выходного напряжения. Это позволяет гибко управлять напряжением и адаптировать его под требования сети.</p></li></ol><p>Преимущества использования автотрансформаторов включают более компактные размеры, меньшие потери мощности и экономию материалов по сравнению с обычными двухобмоточными трансформаторами. Однако использование автотрансформаторов требует более тщательного контроля и защиты, так как у них есть общая обмотка, и короткое замыкание на одной стороне может повлиять на другую. Поэтому правильное проектирование и контроль при эксплуатации автотрансформаторов являются ключевыми для обеспечения надежности системы.</p></div>"],["Режимы нейтралей электроустановок в соответствии с ПУЭ.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>В соответствии с Правилами устройства электроустановок (ПУЭ), существуют различные режимы нейтралей, которые применяются в электроэнергетике и электротехнике. Режим нейтрали определяет способ подключения нейтрального проводника в электрической сети. Вот некоторые из основных режимов нейтралей:</p><ol><li><p>Заземленная нейтраль (ТН): В этом режиме нейтраль проводника заземлена. То есть, нейтральный проводник имеет электрическую связь с землей через заземляющее устройство. Этот режим широко применяется в низковольтных сетях, где заземление нейтрали помогает обеспечить безопасность при возникновении случайных коротких замыканий, предоставляя путь для отвода тока короткого замыкания в землю.</p></li><li><p>Изолированная нейтраль (ТТН): В этом режиме нейтраль намеренно отсоединена от заземления. Такой режим применяется, например, на некоторых больших промышленных предприятиях, где существуют специальные требования по надежности и безопасности электроустановок.</p></li><li><p>Комбинированная нейтраль (КН): В комбинированном режиме нейтрали, часть электрических цепей имеет заземленную нейтраль, а часть имеет изолированную нейтраль. Этот режим может использоваться в больших электрических сетях с различными условиями эксплуатации и требованиями.</p></li><li><p>Раскомпенсированная нейтраль (РН): В этом режиме используется специальное компенсирующее устройство, такое как реактор или автотрансформатор, чтобы уменьшить несимметричные нагрузки на нейтральной проводнике и улучшить равномерность распределения тока в нейтральной системе.</p></li></ol><p>Выбор режима нейтралей зависит от конкретных требований электроустановки, характеристик нагрузок, уровней напряжения, размеров системы и других факторов. Корректный выбор и настройка режима нейтралей является важным аспектом обеспечения надежной и безопасной работы электрических сетей и систем.</p></div>"],["Регулирование напряжения в силовых трансформаторах.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Регулирование напряжения в силовых трансформаторах представляет собой процесс изменения выходного напряжения трансформатора для поддержания определенного уровня напряжения в электроэнергетической системе. Это важный аспект управления электрической энергией и обеспечения стабильного напряжения в электроустановках. Вот некоторые методы регулирования напряжения в силовых трансформаторах:</p><ol><li><p>Переключение обмоток: Многие силовые трансформаторы имеют множество выводов на высоковольтной и низковольтной сторонах, что позволяет выбирать различные соотношения напряжения. Путем переключения обмоток можно изменять выходное напряжение трансформатора в пределах заданных значений.</p></li><li><p>Использование устройств автоматической стабилизации напряжения: В некоторых силовых трансформаторах применяются устройства автоматической стабилизации напряжения, такие как автоматические регуляторы напряжения (AVR). Эти устройства мониторируют уровень напряжения на выходе трансформатора и автоматически регулируют намагничивающий ток или трансформационное соотношение, чтобы поддерживать требуемое значение напряжения.</p></li><li><p>Использование реакторов и автотрансформаторов: Реакторы и автотрансформаторы могут быть использованы для регулирования напряжения. Путем изменения коэффициента самоиндукции реактора или точки подключения автотрансформатора можно контролировать выходное напряжение.</p></li><li><p>Использование компенсационных устройств: В некоторых случаях применяют компенсационные устройства, такие как статические компенсаторы реактивной мощности (STATCOM), которые могут помочь регулировать напряжение в сети.</p></li><li><p>Модуляция намагничивающего тока: Метод модуляции намагничивающего тока позволяет изменять уровень магнитного потока в сердечнике трансформатора, что в свою очередь влияет на выходное напряжение.</p></li></ol><p>Выбор конкретного метода регулирования напряжения зависит от требований и характеристик конкретной электроэнергетической системы или электрической сети. Однако важно гарантировать, что регулирование напряжения происходит точно и эффективно, чтобы обеспечить стабильную работу системы и поддерживать напряжение на требуемом уровне.</p></div>"],["Условия параллельной работы трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Условия параллельной работы трансформаторов - это определенные требования и меры, которые необходимо соблюдать при подключении двух или более трансформаторов к одной электрической сети так, чтобы они работали согласованно и безопасно. Параллельная работа трансформаторов может быть необходима для обеспечения достаточной мощности или резервирования, а также для распределения нагрузки. Вот некоторые из основных условий для параллельной работы трансформаторов:</p><ol><li><p>Одинаковые характеристики: Трансформаторы, которые должны работать параллельно, должны иметь одинаковые характеристики, такие как номинальное напряжение, номинальная мощность, отношение трансформации и импеданс.</p></li><li><p>Однотипные трансформаторы: Желательно, чтобы трансформаторы, работающие в параллель, были одного типа и от одного производителя. Это уменьшает вероятность нежелательных различий в характеристиках и поведении трансформаторов.</p></li><li><p>Регулирование напряжения: Трансформаторы, работающие параллельно, должны иметь средства для регулирования напряжения, чтобы поддерживать стабильный уровень напряжения на выходе.</p></li><li><p>Компенсация реактивной мощности: Трансформаторы должны быть способны компенсировать реактивную мощность, чтобы обеспечить стабильное напряжение и эффективное использование энергии.</p></li><li><p>Согласование защиты: Защитные системы трансформаторов должны быть согласованы, чтобы обеспечить быстрое и согласованное отключение при возникновении аварийных ситуаций.</p></li><li><p>Балансировка нагрузки: Нагрузка должна быть равномерно распределена между трансформаторами, чтобы избежать перегрузок или недогрузок, которые могут повлиять на их работу.</p></li><li><p>Согласование трансформаторов с электрической сетью: Параметры и характеристики трансформаторов должны соответствовать требованиям и особенностям электрической сети, к которой они подключаются.</p></li></ol><p>При выполнении всех указанных условий параллельная работа трансформаторов будет проходить эффективно и надежно, обеспечивая непрерывность энергоснабжения и оптимальное использование ресурсов. Однако для обеспечения безопасности и стабильности работы системы, необходимо проектирование и настройка параллельной работы трансформаторов должны выполняться опытными и квалифицированными инженерами.</p></div>"],["Схемы упрощенных трансформаторных подстанций.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Упрощенные трансформаторные подстанции - это тип подстанций, предназначенных для перевода напряжения электроэнергии на различных уровнях в электрических сетях. Они применяются там, где требуется более небольшая мощность или они являются временными решениями для обеспечения энергией отдаленных или маломощных потребителей. Вот некоторые из схем упрощенных трансформаторных подстанций:</p><ol><li><p>Трансформаторная подстанция с одним трансформатором: В этой упрощенной схеме присутствует только один трансформатор, который выполняет функцию повышения или понижения напряжения. Например, на маломощных или временных строительных объектах может быть установлен один трансформатор для обеспечения энергией рабочих инструментов и оборудования.</p></li><li><p>Трансформаторная подстанция с двумя трансформаторами: В данной схеме присутствуют два трансформатора, однако они могут быть подключены последовательно (последовательное включение) или параллельно (параллельное включение). В последовательном включении один трансформатор будет выполнять функцию повышения напряжения, а второй - понижения. В параллельном включении оба трансформатора будут работать на одном уровне напряжения, что обеспечит резервирование или увеличение мощности.</p></li><li><p>Компактная модульная подстанция: Это тип упрощенной трансформаторной подстанции, который представляет собой компактный модуль с предварительно установленными трансформаторами, выключателями и защитными устройствами. Он обычно размещается на специальной площадке и может быть быстро установлен и подключен к электрической сети.</p></li><li><p>Мобильные трансформаторные подстанции: Это временные решения, которые могут быть перемещены и установлены в различных местах в зависимости от потребности в электроэнергии. Они часто используются в ситуациях, когда нужно быстро обеспечить энергией удаленные районы или временные строительные объекты.</p></li></ol><p>Упрощенные трансформаторные подстанции обычно не имеют сложных систем автоматизации и контроля, что делает их более доступными с точки зрения стоимости. Однако они выполняют важные функции по обеспечению энергией мелких потребителей и временных объектов. Важно отметить, что проектирование и установка упрощенных трансформаторных подстанций должны выполняться с соблюдением всех нормативных требований и стандартов безопасности электроэнергетики.</p></div>"],["Схема трансформаторной подстанции с секционированной системой шин и обходной системой шин.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схема трансформаторной подстанции с секционированной системой шин и обходной системой шин - это одна из типовых схем организации электрооборудования в подстанциях. Эта схема позволяет обеспечить надежность работы и упростить процедуры технического обслуживания и ремонта оборудования. Вот общее описание данной схемы:</p><ol><li><p>Секционированная система шин: В этой схеме используется несколько секций шин, которые позволяют разделять электрооборудование на отдельные блоки. Каждая секция может содержать определенный набор оборудования, например, высоковольтные выключатели и разъединители, а также другие устройства, предназначенные для управления и защиты.</p></li><li><p>Обходная система шин: В случае, если одна из секций шин или соединительных проводов в трансформаторной подстанции требует обслуживания или ремонта, секционированные шины позволяют отключить неисправный участок, а обходные шины предоставляют возможность временно объединить работающие секции для обеспечения непрерывности электропитания.</p></li><li><p>Разделение высоковольтной и низковольтной частей: Трансформаторная подстанция содержит секции шин как на высоковольтной (например, на стороне высоковольтного ввода от электростанции) так и на низковольтной стороне (к например, к стороне низковольтных сетей или потребителей).</p></li><li><p>Устройства управления и защиты: Каждая секция шин оборудуется необходимыми устройствами управления и защиты, такими как выключатели, разъединители, предохранители, релейные защиты и другие устройства, которые позволяют контролировать и защищать оборудование и секции шин от перегрузок и коротких замыканий.</p></li></ol><p>Схема с секционированной системой шин и обходной системой шин позволяет улучшить надежность и оперативность работы трансформаторной подстанции, так как в случае неисправности или ремонта можно отключить только необходимые секции, не прерывая энергопоставку всего объекта. Это снижает вероятность длительных простоев и упрощает обслуживание и ремонт оборудования.</p></div>"],["Схема трансформаторной подстанции с двойной системой шин и обходной системой шин.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схема трансформаторной подстанции с двойной системой шин и обходной системой шин - это типовая схема, которая применяется в электроэнергетике для обеспечения надежности и гибкости работы электрооборудования. В данной схеме используются две независимые системы шин, а также обходные шины, предназначенные для временного объединения секций шин в случае необходимости проведения работ или ремонта. Основные особенности данной схемы:</p><ol><li><p>Двойная система шин: Трансформаторная подстанция содержит две параллельные системы шин - основную (A) и резервную (B). Они обычно используются для обеспечения дополнительной надежности и увеличения гибкости работы. При нормальной эксплуатации трансформаторы и оборудование подключены к основным шинам.</p></li><li><p>Обходные системы шин: Обходные шины предоставляют возможность временно объединить основную и резервную системы шин для обеспечения непрерывности электропитания в случае плановых работ или ремонта на одной из систем. Обходные шины обычно активируются с помощью выключателей или разъединителей, которые переключаются в специальное положение для образования временного соединения.</p></li><li><p>Устройства управления и защиты: Каждая система шин оборудуется устройствами управления и защиты, такими как выключатели, разъединители, релейные защиты и другие устройства, необходимые для контроля и защиты электрооборудования.</p></li><li><p>Управление переключениями: Переключение между основными и резервными системами шин, а также активация обходных шин, должны выполняться с соблюдением определенных процедур и правил, чтобы предотвратить возможные аварийные ситуации.</p></li></ol><p>Схема с двойной системой шин и обходной системой шин обеспечивает повышенную надежность электроснабжения, так как позволяет быстро переключаться на резервные системы или объединять секции шин в случае необходимости проведения технических работ. Это особенно важно для объектов с повышенными требованиями к надежности, таких как крупные промышленные предприятия или критические инфраструктурные объекты. Однако важно отметить, что проектирование и эксплуатация такой схемы должны осуществляться квалифицированными специалистами с соблюдением всех стандартов и правил безопасности.</p></div>"]],"ЭЛЕКТРОЭНЕРГЕТИКА":[["Релейная защита как один из видов противоаварийной автоматики, ее назначение.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Релейная защита - это один из видов противоаварийной автоматики, предназначенной для обнаружения и оперативного отключения электрических сетей или оборудования в случае возникновения аварийных ситуаций или неисправностей. Она играет важную роль в обеспечении безопасности и надежности работы электроэнергетических систем. Основное назначение релейной защиты:</p><ol><li><p>Обнаружение аварийных ситуаций: Релейная защита контролирует параметры электрических сетей и оборудования, такие как ток, напряжение, мощность, частота и другие характеристики. В случае возникновения необычных или аварийных значений этих параметров, релейная защита срабатывает и принимает меры по предотвращению распространения аварии.</p></li><li><p>Быстрое отключение: Релейная защита должна быть быстрой и точной. При обнаружении аварийной ситуации она немедленно активирует выключатели или разъединители для быстрого отключения определенных участков сети или оборудования, чтобы предотвратить дальнейшее распространение аварии и уменьшить возможные повреждения.</p></li><li><p>Защита оборудования: Релейная защита обеспечивает защиту электрических аппаратов, оборудования и проводов от перегрузок, коротких замыканий, землеобрывов и других неисправностей, которые могут привести к повреждению или поломке.</p></li><li><p>Минимизация простоев: Релейная защита помогает минимизировать простои в электроэнергетической системе. При срабатывании защиты она активирует автоматические механизмы быстрого восстановления электропитания (например, автоматические включатели) после устранения причин аварии.</p></li><li><p>Управление сетью: Релейная защита может выполнять функции управления работы сети, такие как переключение режимов работы и координация работы различных элементов системы для обеспечения оптимальной работы.</p></li></ol><p>Релейная защита является одной из важных составляющих системы автоматического контроля и управления электрическими сетями. Она позволяет своевременно обнаруживать и локализовывать аварийные ситуации, что способствует повышению надежности и безопасности электроэнергетических систем и уменьшению возможных последствий аварийных ситуаций.</p></div>"],["Основные свойства релейной защиты: селективность, быстродействие, чувствительность, надежность.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные свойства релейной защиты, которые обеспечивают ее эффективную работу, включают:</p><ol><li><p>Селективность: Селективность релейной защиты означает, что она способна выбирать только тот элемент системы, в котором произошла авария, и быстро отключать только этот элемент, минимизируя воздействие на остальные части системы. Это важно для предотвращения лишних отключений и сокращения перебоев в электроснабжении. Релейная защита должна быть настроена таким образом, чтобы отключать ближайший элемент к месту аварии, оставляя другие участки сети в работоспособном состоянии.</p></li><li><p>Быстродействие: Быстродействие релейной защиты критически важно для быстрого реагирования на аварийные ситуации и предотвращения их дальнейшего распространения. Релейная защита должна активироваться и отключать аварийный элемент в течение очень короткого времени, обычно в пределах нескольких миллисекунд или микросекунд, в зависимости от типа аварии и требований к системе.</p></li><li><p>Чувствительность: Релейная защита должна быть достаточно чувствительной, чтобы обнаруживать даже небольшие изменения в параметрах электрической сети, которые могут свидетельствовать о возникновении аварийной ситуации. Это позволяет обнаруживать даже незначительные неисправности и принимать меры по их предотвращению.</p></li><li><p>Надежность: Надежность релейной защиты - это способность функционировать без сбоев и ложных срабатываний в течение длительного времени. Релейная защита должна быть защищена от воздействия различных факторов, таких как вибрации, пыль, влага, перепады напряжения и другие условия эксплуатации, которые могут повлиять на ее работу. Надежность релейной защиты особенно важна, так как она играет критическую роль в обеспечении безопасности электроэнергетической системы.</p></li></ol><p>Свойства селективности, быстродействия, чувствительности и надежности релейной защиты взаимосвязаны и важны для обеспечения эффективной и безопасной работы электрических систем. Комплексное рассмотрение этих свойств при проектировании и эксплуатации релейной защиты позволяет создать надежную систему автоматического контроля и управления, способную обеспечивать безопасное и стабильное электроснабжение.</p></div>"],["Понятие абсолютной и относительной селективности. Как обеспечивается селективность максимальных токовых защит?","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>В релейной защите различают понятия абсолютной и относительной селективности, которые связаны с обеспечением правильной работы максимальных токовых защит.</p><ol><li><p>Абсолютная селективность: Абсолютная селективность означает, что защитное устройство должно отключить только тот элемент сети, в котором произошла авария, и не должно вызывать отключения на других участках сети. То есть, при возникновении аварии на определенном проводнике или аппарате, должна сработать только защита этого конкретного элемента, не затрагивая работоспособные участки сети.</p></li><li><p>Относительная селективность: Относительная селективность означает, что в системе защиты должна быть предусмотрена иерархия срабатывания различных уровней защиты. При возникновении аварии, первым срабатывает ближайшая к аварийному элементу защита, и только в случае ее несрабатывания или неудачи, активируется более удаленная и мощная защита на следующем уровне.</p></li></ol><p>Для обеспечения селективности максимальных токовых защит используются различные методы:</p><ul><li><p>Применение различных уровней тока: На разных уровнях защиты устанавливаются реле с различными уставками тока. Более близкое к месту аварии реле имеет более низкую уставку тока, тогда как реле на более отдаленных участках имеют более высокие уставки. Таким образом, сработает только ближайшее реле.</p></li><li><p>Использование времени срабатывания: Для улучшения селективности можно задавать разные временные задержки для различных уровней защиты. Реле на более близких участках должны срабатывать быстрее, чем реле на отдаленных участках. Это позволяет избежать ложных срабатываний.</p></li><li><p>Комбинация с различными методами защиты: В современных системах защиты часто используется комбинация различных методов, таких как тока, напряжения, мощности, частоты и других параметров, что повышает точность и селективность работы защиты.</p></li></ul><p>Обеспечение селективности максимальных токовых защит критически важно для минимизации простоев и обеспечения надежной и стабильной работы электроэнергетической системы. Точное определение уровней защиты и правильная настройка реле являются важными задачами при проектировании и эксплуатации систем релейной защиты.</p></div>"],["Определение основной, резервной и дополнительной защит. Что такое ближнее и дальнее резервирование?","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основная, резервная и дополнительная защита - это термины, которые используются в контексте систем релейной защиты для обеспечения надежности и безопасности электрических сетей.</p><ol><li><p>Основная защита: Основная защита - это первичная защита, которая непосредственно отвечает за обнаружение аварийных ситуаций и быстрое отключение аварийного участка сети. Она расположена ближе всего к месту аварии и обычно активируется при превышении определенных уставок тока, напряжения или других параметров. Основная защита должна обеспечивать высокую скорость срабатывания для предотвращения дальнейшего распространения аварии.</p></li><li><p>Резервная защита: Резервная защита представляет собой дополнительный уровень защиты, который активируется в случае, если основная защита не срабатывает или не выполняет свою функцию. Она устанавливается на уровне, более удаленном от места аварии, чем основная защита, и предназначена для защиты других участков сети в случае неудачи основной защиты.</p></li><li><p>Дополнительная защита: Дополнительная защита - это дополнительный уровень защиты, который предназначен для обнаружения и предотвращения особых или необычных аварийных ситуаций, которые могут быть упущены основной и резервной защитой. Дополнительная защита может включать специализированные релейные защиты или способы детектирования определенных нештатных ситуаций.</p></li></ol><p>Ближнее и дальнее резервирование связано с размещением резервной защиты относительно основной защиты:</p><ul><li><p>Ближнее резервирование: При ближнем резервировании резервная защита располагается ближе к месту аварии, чем основная защита. Это обеспечивает более быстрое и селективное отключение аварийного участка и минимизирует возможные повреждения. Ближнее резервирование используется для критически важных частей сети или объектов с повышенными требованиями к надежности.</p></li><li><p>Дальнее резервирование: При дальнем резервировании резервная защита устанавливается на более отдаленном участке сети по сравнению с основной защитой. Это обеспечивает дополнительный уровень защиты для других участков сети и предназначено для ситуаций, когда ближнее резервирование может быть недостаточным или невозможным.</p></li></ul><p>Выбор метода резервирования зависит от конкретных требований к надежности и особенностей электроэнергетической системы. Эффективное сочетание основной, резервной и дополнительной защиты, а также оптимальное резервирование способствуют обеспечению надежности и безопасности электрических сетей и помогают предотвратить возможные аварийные ситуации.</p></div>"],["Максимальная токовая защита с независимой выдержкой времени. Схема, принцип действия.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Максимальная токовая защита с независимой выдержкой времени (МТЗ с НВВ) - это один из типов релейной защиты, используемой в электроэнергетических системах для обнаружения и отключения элементов сети при превышении заданных токовых уровней. Особенностью этой защиты является возможность настройки независимых временных задержек срабатывания для разных уровней тока.</p><p>Схема и принцип действия МТЗ с НВВ:</p><ol><li><p>Схема: Максимальная токовая защита с независимой выдержкой времени состоит из реле тока, которое подключается к токоведущим частям сети (например, кабелям, проводам или трансформаторам тока). Реле тока служит для измерения текущих значений тока в сети.</p></li><li><p>Принцип действия: Когда ток в сети превышает заданный уставочный порог, реле тока активируется и вырабатывает сигнал для отключения аварийного участка. Однако МТЗ с НВВ предусматривает настройку независимых временных задержек для разных уровней тока.</p></li></ol><ul><li><p>Настройка временных задержек: В зависимости от конкретной схемы и требований к системе защиты, реле тока может иметь различные уровни тока и соответствующие временные задержки. Например, для более близких к месту аварии участков сети можно задать меньшую временную задержку, чтобы защита сработала быстрее и предотвратила дальнейшее распространение аварии. Для более отдаленных участков сети задается большая временная задержка, что предоставляет возможность основной защите (например, дифференциальной защите) сработать первично.</p></li><li><p>Зависимость временных задержек от уровня тока: Настройка временных задержек обычно производится с учетом принципов селективности. Чем ближе реле тока расположено к месту аварии, тем меньше временная задержка устанавливается, чтобы обеспечить быстрое срабатывание и отключение. Для дальних участков сети временные задержки будут больше, что предотвращает ложные срабатывания.</p></li></ul><p>Преимуществом МТЗ с НВВ является возможность более гибкой настройки и более точного реагирования на различные ситуации в сети. Это обеспечивает более эффективную и селективную защиту, что является критически важным для надежной работы электроэнергетических систем.</p></div>"],["Максимальная токовая защита с зависимой выдержкой времени. Схема, принцип действия.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Максимальная токовая защита с зависимой выдержкой времени (МТЗ с ЗВВ) - это еще один тип релейной защиты, применяемый в электроэнергетических системах для обнаружения и отключения элементов сети при превышении заданных токовых уровней. В отличие от МТЗ с НВВ, у МТЗ с ЗВВ временные задержки срабатывания зависят от величины тока.</p><p>Схема и принцип действия МТЗ с ЗВВ:</p><ol><li><p>Схема: Максимальная токовая защита с зависимой выдержкой времени также использует реле тока, которое подключается к токоведущим частям сети для измерения токовых значений.</p></li><li><p>Принцип действия: При превышении заданного уставочного порога тока, реле тока активируется. Однако в МТЗ с ЗВВ временные задержки срабатывания зависят от величины тока. Суть заключается в том, что чем выше текущий ток, тем быстрее срабатывает защита.</p></li></ol><ul><li><p>Зависимость времени от тока: Величина временной задержки напрямую зависит от величины измеренного тока. Чем выше текущий ток, тем меньше временная задержка, и наоборот. Это означает, что при сравнительно малых токах (например, недостаточно высоких, чтобы сработала основная защита), защита имеет возможность \\"подождать\\" и дать время для работы основной защиты, которая обычно имеет более длительное время срабатывания. При очень высоких токах, которые свидетельствуют о близком расположении аварийного участка, защита срабатывает быстрее, чтобы предотвратить дальнейшее распространение аварии.</p></li><li><p>Отличие от МТЗ с НВВ: Главное отличие МТЗ с ЗВВ от МТЗ с НВВ заключается в зависимости времени срабатывания от величины тока. В МТЗ с ЗВВ не требуется настройка независимых временных задержек, так как время задержки определяется автоматически и зависит от величины тока.</p></li></ul><p>МТЗ с ЗВВ обеспечивает более гибкую и эффективную защиту, так как время срабатывания автоматически адаптируется к текущей ситуации в сети. Это помогает предотвратить аварийные ситуации и обеспечить безопасную и надежную работу электроэнергетических систем.</p></div>"],["Максимальная токовая защита с пуском по напряжению. Схема, принцип действия.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Максимальная токовая защита с пуском по напряжению – это система защиты электрических устройств и оборудования от перегрузки или короткого замыкания в электрической сети. Эта защита применяется для предотвращения повреждения оборудования и предотвращения возможных аварий.</p><p>Схема и принцип действия данной защиты следующие:</p><ol><li><p>Схема:\\nМаксимальная токовая защита с пуском по напряжению состоит из токового реле (токового трансформатора), устройства срабатывания (реле времени или электронного блока управления), и управляющего контактора.</p></li><li><p>Принцип действия:</p><ul><li>Токовой трансформатор измеряет ток, текущий через оборудование или устройство, которое нужно защитить.</li><li>Измеренный ток передается на устройство срабатывания, которое контролирует текущую величину тока.</li><li>Если ток превышает установленное значение (максимальное допустимое значение), устройство срабатывания активирует сигнал тревоги или запускает процесс отключения оборудования.</li><li>Обычно для предотвращения ложных срабатываний (например, из-за кратковременных пиков тока) применяют временные задержки срабатывания.</li><li>Управляющий контактор выполняет функцию отключения оборудования при срабатывании защиты. Он размыкает электрическую цепь и предотвращает дальнейшее протекание тока через защищаемое устройство.</li></ul></li></ol><p>Таким образом, максимальная токовая защита с пуском по напряжению обеспечивает надежную защиту оборудования от перегрузок, которые могут возникнуть вследствие нештатных ситуаций в электрической сети, и способствует обеспечению безопасной и стабильной работы электроустановок.</p></div>"],["Выбор параметров срабатывания токовой отсечки и максимальной токовой защиты.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор параметров срабатывания токовой отсечки и максимальной токовой защиты является важным процессом при проектировании и эксплуатации электрических систем. Эти параметры определяются с учетом безопасности оборудования и надежности электроустановок. Ниже приведены основные факторы, которые следует учитывать при выборе параметров срабатывания для токовой отсечки и максимальной токовой защиты:</p><ol><li><p>Токовая отсечка:</p><ul><li>Предназначение: Токовая отсечка используется для быстрого и автоматического отключения оборудования в случае короткого замыкания. Основная цель - предотвратить повреждение оборудования и обеспечить безопасность персонала.</li><li>Установка тока отсечки: Значение тока отсечки должно быть выбрано таким образом, чтобы оборудование надежно отключалось при коротком замыкании, но не срабатывало ложно при кратковременных перегрузках или всплесках тока.</li><li>Время срабатывания: Токовая отсечка должна срабатывать максимально быстро, чтобы быстро исключить опасное короткое замыкание.</li></ul></li><li><p>Максимальная токовая защита:</p><ul><li>Предназначение: Максимальная токовая защита предназначена для предотвращения перегрузок оборудования, вызванных превышением допустимых рабочих токов.</li><li>Установка максимального тока защиты: Значение максимального тока защиты должно быть выбрано с учетом номинальных токов, которые оборудование способно выдержать без повреждения. Это обычно связано с номинальными характеристиками защищаемого оборудования.</li><li>Время срабатывания: Максимальная токовая защита может иметь различные временные характеристики, которые зависят от типа оборудования и его реакции на перегрузки. Для некоторых устройств требуется более быстрое срабатывание, чтобы избежать повреждений, в то время как для других допускается некоторая перегрузка на короткий промежуток времени.</li></ul></li></ol><p>В общем случае, выбор параметров срабатывания токовой отсечки и максимальной токовой защиты должен основываться на анализе характеристик оборудования, типе электрической сети, номинальных токах, а также требованиях к безопасности и надежности работы системы. Кроме того, необходимо учитывать стандарты и нормативные документы, регламентирующие параметры защиты для конкретных типов электроустановок.</p></div>"],["Принцип и зона действия продольной дифференциальной защиты силового трансформатора.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Принцип действия продольной дифференциальной защиты силового трансформатора основан на сравнении токов, протекающих через обмотки трансформатора. Эта защита предназначена для обнаружения и быстрого отключения трансформатора в случае возникновения внутреннего короткого замыкания в обмотках.</p><p>Продольная дифференциальная защита имеет две зоны действия:</p><ol><li><p>Зона первичной обмотки: В этой зоне трансформатора устанавливаются токовые трансформаторы (ТТ), которые измеряют токи первичной обмотки. Эти измеренные токи сравниваются и суммируются в специальном устройстве, называемом продольным дифференциальным защитным реле. В нормальных условиях работы трансформатора, сумма токов первичной обмотки будет равна нулю, так как токи туда и обратно компенсируют друг друга.</p></li><li><p>Зона вторичной обмотки: Эта зона включает вторичную обмотку трансформатора и электрически связанные с ней токовые трансформаторы. Также измеренные токи сравниваются и суммируются в продольном дифференциальном защитном реле. В нормальных условиях сумма токов во вторичной обмотке также должна быть равна нулю.</p></li></ol><p>Если возникает внутреннее короткое замыкание в одной из обмоток трансформатора, например, из-за повреждения изоляции или другой неисправности, то токи в соответствующей обмотке существенно отличаются от токов в другой обмотке, и сумма токов уже не равна нулю. Это приводит к срабатыванию продольной дифференциальной защиты, которая быстро отключает трансформатор, предотвращая дальнейшее развитие аварии и защищая оборудование и персонал от возможных опасностей.</p><p>Таким образом, продольная дифференциальная защита силового трансформатора обеспечивает надежную защиту от внутренних коротких замыканий, обеспечивая безопасную и надежную работу электроэнергетической системы.</p></div>"],["Устройство газового реле. Принцип работы газовой защиты трансформатора.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Устройство газового реле и принцип работы газовой защиты трансформатора:</p><p>Газовое реле (также известное как газоразрядное реле) используется для обнаружения внутренних дефектов трансформаторов, таких как образование газов в масле из-за коротких замыканий или повреждения изоляции. Оно основано на принципе обнаружения газовых разрядов, которые могут возникнуть в масле трансформатора в результате его деградации или повреждения.</p><p>Устройство газового реле обычно состоит из следующих основных компонентов:</p><ol><li><p>Масляный бак: Внутри бака находится изолирующее масло, которое используется в трансформаторе.</p></li><li><p>Датчики газа: В масляный бак встроены датчики, которые способны обнаруживать наличие газовых разрядов или газов, образующихся в масле трансформатора.</p></li><li><p>Электронная система обработки данных: Датчики газа подключены к электронной системе, которая анализирует данные от датчиков и обрабатывает информацию о количестве и типе газов, присутствующих в масле.</p></li><li><p>Система сигнализации и управления: При обнаружении газовых разрядов или увеличении уровня газов в масле до предупредительного или аварийного уровней, газовое реле активирует систему сигнализации, которая предупреждает операторов или запускает автоматическое отключение трансформатора.</p></li></ol><p>Принцип работы газовой защиты трансформатора:</p><p>Когда внутри трансформатора происходит неполадка, такая как короткое замыкание или повреждение изоляции, возникает газовый разряд в изоляционном масле. Газы, образующиеся в результате разряда, имеют свойство акумулироваться в верхней части масляного бака трансформатора.</p><p>Датчики газа, установленные в масляном баке, обнаруживают наличие этих газов и измеряют их концентрацию. Если уровень газов превышает установленные пороговые значения (например, из-за серьезных дефектов), то газовое реле срабатывает.</p><p>При срабатывании газового реле электронная система обработки данных интерпретирует этот сигнал и запускает систему сигнализации. Это может быть звуковой сигнал, визуальное предупреждение или автоматический сигнал к системе управления, которая может автоматически отключить трансформатор для предотвращения его дальнейшего повреждения или опасной ситуации.</p><p>Таким образом, газовое реле играет важную роль в обеспечении безопасной и надежной работы трансформатора, позволяя оперативно реагировать на потенциальные проблемы и предотвращать серьезные повреждения оборудования.</p></div>"],["Схемы соединения трансформаторов тока, используемые для релейной защиты и автоматики (РЗА).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы соединения трансформаторов тока, используемые для релейной защиты и автоматики (РЗА), включают следующие типы:</p><ol><li><p>Схема соединения \\"звезда\\" (Y):\\nВ данной схеме обмотки трансформатора тока соединены в звезду (треугольник с нейтралью). Это обозначается буквой Y. Такое соединение обычно применяется, когда требуется измерение тока в симметричных системах, например, в системах трехфазного переменного тока. В схеме Y одна из обмоток соединена к земле (нейтральной точке) или к общей точке трехфазной системы, а другая сторона подключается к релейному устройству или прибору для измерения тока. Схема Y также может применяться в защитных релейных схемах, таких как дифференциальная защита или защита от перегрузок.</p></li><li><p>Схема соединения \\"треугольник\\" (△):\\nВ данной схеме обмотки трансформатора тока соединены в треугольник (трехугольник). Это обозначается знаком △. В такой схеме ток протекает по замкнутому контуру между обмотками трансформатора. Схема △ применяется в системах трехфазного переменного тока, когда требуется высокая точность измерения тока для релейной защиты и контроля процессов.</p></li><li><p>Смешанная схема соединения трансформатора тока:\\nЭто сочетание схемы Y и △. В смешанной схеме одна сторона трансформатора соединена в звезду (Y), а другая сторона соединена в треугольник (△). Такое соединение может использоваться, когда необходимо измерить и контролировать токи как в трехфазных системах, так и в однофазных системах, либо когда требуется различная точность измерения тока для разных целей.</p></li></ol><p>Выбор определенной схемы соединения трансформатора тока зависит от конкретных требований релейной защиты, измерительных задач, и характеристик системы электропитания. Каждая схема имеет свои преимущества и применяется в соответствии с конкретными требованиями и условиями эксплуатации.</p></div>"],["Схемы соединения трансформаторов тока (ТТ) продольной дифференциальной защиты силового трансформатора.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Схемы соединения трансформаторов тока (ТТ) продольной дифференциальной защиты силового трансформатора могут быть реализованы с использованием двух основных конфигураций:</p><ol><li><p>Схема соединения трансформаторов тока в продольной дифференциальной защите типа \\"дельта\\" (Δ):\\nВ этой схеме обмотки трансформаторов тока (ТТ) соединены в \\"дельта-схему\\" (треугольник). Каждая обмотка ТТ с подходящими фазными углами соединена друг с другом, образуя замкнутый контур. Такое соединение обозначается символом Δ.</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>lua</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-lua\\">                 ТТ<span class=\\"hljs-number\\">1</span> - ТТ<span class=\\"hljs-number\\">2</span> - ТТ<span class=\\"hljs-number\\">3</span>\\n                  |      |      |\\n                  |      |      |\\n                  +<span class=\\"hljs-comment\\">------+------+</span>\\n</code></div></div></pre></li></ol><p>В данной схеме происходит суммирование токов во всех обмотках ТТ, и получившаяся суммарная схема передается на продольное дифференциальное реле. В нормальных условиях работы трансформатора сумма токов в обмотках должна быть равна нулю.</p><ol start=\\"2\\"><li><p>Схема соединения трансформаторов тока в продольной дифференциальной защите типа \\"звезда\\" (Y):\\nВ этой схеме обмотки трансформаторов тока (ТТ) соединены в \\"звезду\\" (треугольник с нейтралью). Такое соединение обозначается буквой Y.</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>markdown</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-markdown\\"><span class=\\"hljs-code\\">              /  \\\\\\n         ТТ1 --- ТТ2\\n              \\\\  /\\n</span>\\n<span class=\\"hljs-code\\">          ТТ3 (нейтраль)\\n</span></code></div></div></pre></li></ol><p>В данной схеме, как и в предыдущей, происходит суммирование токов во всех обмотках ТТ, и получившаяся суммарная схема передается на продольное дифференциальное реле.</p><p>Обе схемы служат для обнаружения и защиты от внутренних коротких замыканий в обмотках силового трансформатора. Если возникает короткое замыкание в одной из обмоток трансформатора, то токи в соответствующих обмотках существенно отличаются от токов в других обмотках, и сумма токов уже не равна нулю. Это приводит к срабатыванию продольной дифференциальной защиты, которая быстро отключает трансформатор для предотвращения дальнейшего развития аварии.</p></div>"],["Виды повреждений, ненормальных режимов и виды защит силовых трансформаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Виды повреждений, ненормальных режимов и виды защит силовых трансформаторов включают следующие:</p><p>Виды повреждений:</p><ol><li>Внутренние короткие замыкания в обмотках трансформатора, вызванные дефектами изоляции или другими неисправностями.</li><li>Внешние короткие замыкания на вторичной стороне трансформатора.</li><li>Перегрузки, вызванные превышением номинальных токов или долгосрочной работы при сверхноминальных условиях.</li><li>Повреждение изоляции трансформатора, например, из-за воздействия влаги, высоких температур или механических воздействий.</li></ol><p>Ненормальные режимы:</p><ol><li>Напряжение трансформатора ниже номинального значения.</li><li>Напряжение трансформатора выше номинального значения.</li><li>Неправильная последовательность фаз в трехфазных системах.</li><li>Несимметричные токи и напряжения.</li></ol><p>Виды защит силовых трансформаторов:</p><ol><li>Перегрузочная защита: Мониторирует токи в обмотках трансформатора и отключает его при превышении установленного предела, чтобы предотвратить повреждение из-за перегрузки.</li><li>Короткозамыкательная защита: Отслеживает токи короткого замыкания и быстро отключает трансформатор для предотвращения разрушительных последствий.</li><li>Дифференциальная защита: Сравнивает токи на входе и выходе трансформатора (токи обмоток) для обнаружения внутренних коротких замыканий. Если разница в токах превышает установленное значение, дифференциальная защита срабатывает и отключает трансформатор.</li><li>Защита от заземления: Отслеживает токи заземления трансформатора и предотвращает накопление опасных токов заземления.</li><li>Защита от перенапряжений: Отключает трансформатор при превышении допустимого значения напряжения, чтобы защитить его от повреждений.</li></ol><p>Каждый из этих видов защиты служит для обеспечения безопасной и надежной работы силового трансформатора и предотвращения серьезных аварий или повреждений оборудования.</p></div>"],["От каких режимов должна отстраиваться продольная дифференциальная защита силового трансформатора?","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Продольная дифференциальная защита силового трансформатора должна отстраиваться от нормальных режимов работы трансформатора, чтобы избежать ложных срабатываний и обеспечить надежную и точную работу защиты.</p><p>Продольная дифференциальная защита срабатывает на разницу токов в обмотках трансформатора, которая возникает при внутренних коротких замыканиях. Однако, в некоторых нормальных режимах работы трансформатора, например, при включении или выключении, или при некоторых переходных процессах, разница токов в обмотках может быть временно выше нуля. Если защита не будет отстроена с учетом этих особенностей, она может сработать ложно, что приведет к ненужному отключению трансформатора и нарушению нормальной работы электроэнергетической системы.</p><p>Чтобы избежать ложных срабатываний, продольная дифференциальная защита может быть отстроена от таких режимов, как:</p><ol><li>Начальные моменты включения трансформатора.</li><li>Начальные моменты выключения трансформатора.</li><li>Переходные процессы при изменении режима нагрузки на трансформаторе.</li><li>Определенные режимы переключения трансформатора между различными обмотками.</li></ol><p>Отстройка продольной дифференциальной защиты проводится с учетом конкретных характеристик трансформатора и параметров электроэнергетической системы, чтобы обеспечить оптимальную работу защиты без ложных срабатываний.</p></div>"],["Как выбирается трансформатор тока (ТТ) для релейной защиты?","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Выбор трансформатора тока (ТТ) для релейной защиты основывается на нескольких факторах, которые нужно учитывать, чтобы обеспечить надежную и точную работу защиты. Вот ключевые аспекты, которые учитываются при выборе трансформатора тока для релейной защиты:</p><ol><li><p>Ток номинальной нагрузки: Трансформатор тока должен быть спроектирован таким образом, чтобы его номинальный ток соответствовал или немного превышал максимальный ток нагрузки, который ожидается в системе. Он должен быть способен обеспечить точное измерение токов в номинальном диапазоне работы трансформатора.</p></li><li><p>Диапазон измеряемых токов: Трансформатор тока должен иметь достаточно широкий диапазон измеряемых токов, чтобы учитывать как номинальные токи, так и возможные перегрузки или короткие замыкания.</p></li><li><p>Точность измерения: Для надежной релейной защиты важно, чтобы трансформатор тока обладал высокой точностью измерения токов, особенно в критических моментах при возникновении аварийных ситуаций.</p></li><li><p>Тепловая нагрузка: Трансформатор тока должен быть способен переносить тепловую нагрузку, связанную с максимальными токами, чтобы избежать перегрева.</p></li><li><p>Чувствительность и временные характеристики: Трансформатор тока должен быть спроектирован с учетом требуемой чувствительности релейной защиты и необходимых временных характеристик срабатывания (например, времени задержки).</p></li><li><p>Физические параметры: Важно учитывать физические параметры трансформатора, такие как размер, масса и монтажные возможности, чтобы его можно было установить в соответствующее место в системе.</p></li><li><p>Степень защиты (IP-класс): Если трансформатор тока будет устанавливаться в условиях высокой влажности, пыли или агрессивной среды, то следует учитывать его степень защиты (IP-класс) для обеспечения надежной работы в таких условиях.</p></li><li><p>Соответствие стандартам и нормам: Трансформатор тока должен соответствовать соответствующим стандартам и нормативам, чтобы обеспечить безопасность и надежность его работы.</p></li></ol><p>В целом, выбор трансформатора тока для релейной защиты требует тщательного анализа требований системы, ожидаемых нагрузок и условий эксплуатации, чтобы обеспечить оптимальную работу защиты и предотвратить возможные аварийные ситуации.</p></div>"],["Источники оперативного тока для систем релейной защиты и автоматики (РЗА).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Источники оперативного тока для систем релейной защиты и автоматики (РЗА) включают различные устройства, которые предоставляют ток для работы реле и защитных устройств. Вот некоторые из основных источников оперативного тока:</p><ol><li><p>Трансформаторы тока (ТТ): Трансформаторы тока (или токовые трансформаторы) широко используются для обеспечения оперативного тока для релейной защиты и автоматики. Они позволяют измерять токи в высоковольтных и сильноточных системах и преобразовывать их до уровней, пригодных для работы защитных реле. ТТ подключаются к первичной обмотке высоковольтного оборудования (например, к высоковольтным линиям или трансформаторам) и предоставляют токи на вторичной стороне, которые используются для работы релейной защиты.</p></li><li><p>Датчики Холла: Датчики Холла используются для измерения тока в системах релейной защиты. Они основаны на эффекте Холла и позволяют непосредственно измерять ток в проводнике без разрыва цепи. Датчики Холла обеспечивают точное измерение тока и обладают высокой чувствительностью.</p></li><li><p>Резистивные трансформаторы: Резистивные трансформаторы также могут использоваться для измерения тока в релейной защите. Они базируются на измерении напряжения, падающего на резисторе, который подключен последовательно с измеряемым током.</p></li><li><p>Токовые клещи: Токовые клещи (токоизмерительные клещи) представляют собой портативные устройства, которые обхватывают проводник, чтобы измерить ток. Они удобны для измерения токов в существующих системах без разрыва цепи и могут использоваться в различных ситуациях.</p></li><li><p>Трансформаторы тока с источником питания: В некоторых случаях, когда нет возможности применить классические источники оперативного тока, можно использовать трансформаторы тока с встроенными источниками питания. Эти устройства содержат батареи или другие источники питания для обеспечения работы защитных реле даже в условиях, когда основной источник тока отключен.</p></li></ol><p>Выбор конкретного источника оперативного тока зависит от характеристик системы релейной защиты, требуемых точности измерения тока, условий эксплуатации и других факторов.</p></div>"],["Конструкция и принцип действия релеДЗТ-11.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>РелеДЗТ-11 (также известное как РЗА-ДЗТ-11) представляет собой тип релейной защиты, который используется для обнаружения дифференциальных токов и защиты трансформаторов. Данное устройство применяется в электроэнергетических системах для надежной работы силовых трансформаторов.</p><p>Конструкция релеДЗТ-11:\\nРелеДЗТ-11 обычно имеет компактную корпусную конструкцию, в которой находятся необходимые электронные и электромеханические компоненты. Внутри корпуса находятся:</p><ol><li><p>Трансформаторы тока (ТТ): Для измерения токов на входе и выходе трансформатора используются специальные трансформаторы тока. Обычно ТТ устанавливаются на первичной и вторичной сторонах трансформатора.</p></li><li><p>Датчики тока: В современных моделях релеДЗТ-11 также могут применяться датчики тока, такие как датчики Холла или токовые клещи.</p></li><li><p>Электронные схемы: В релеДЗТ-11 используются электронные схемы для обработки данных от трансформаторов тока и принятия решения о срабатывании защиты.</p></li><li><p>Электромеханические реле: Некоторые модели релеДЗТ-11 могут также иметь электромеханические реле, которые срабатывают при нарушениях в трансформаторе.</p></li></ol><p>Принцип действия релеДЗТ-11:\\nПринцип действия релеДЗТ-11 основан на сравнении токов на входе и выходе трансформатора. Когда трансформатор работает в нормальных условиях, сумма токов на входе и выходе должна быть равна нулю (если учесть потери). Однако при возникновении внутренних коротких замыканий в трансформаторе, токи на входе и выходе перестают быть равными.</p><p>РелеДЗТ-11 анализирует разницу токов на входе и выходе трансформатора и при превышении установленного предела срабатывает для защиты трансформатора. При срабатывании релейной защиты могут быть предприняты соответствующие меры, например, автоматическое отключение трансформатора или отправка сигнала операторам о возникшей аварии.</p><p>Таким образом, релеДЗТ-11 обеспечивает дифференциальную защиту силового трансформатора и обнаруживает внутренние короткие замыкания, предотвращая разрушительные последствия и обеспечивая безопасную и надежную работу системы электроэнергетики.</p></div>"]],"ЭЛЕКТРОМАГНИТНАЯ СОВМЕСТИМОСТЬ В ЭЛЕКТРОЭНЕРГЕТИКЕ":[["Электромагнитная обстановка на объектах электроэнергетики.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Электромагнитная обстановка на объектах электроэнергетики - это комплекс электромагнитных полей и явлений, возникающих вокруг и внутри электроэнергетических систем и оборудования. Электроэнергетика связана с производством, передачей и распределением электроэнергии, и при этом возникают различные электромагнитные процессы и воздействия.</p><p>Ключевые аспекты электромагнитной обстановки в электроэнергетике включают:</p><ol><li><p>Электромагнитные поля: Вокруг электрических линий передачи, подстанций и других объектов электроэнергетики возникают электромагнитные поля. Эти поля могут быть постоянными или изменяющимися во времени в зависимости от режимов работы системы.</p></li><li><p>Электромагнитные наводки: Взаимодействие электромагнитных полей с окружающими объектами, включая сооружения, коммуникации и электронное оборудование, может вызывать электромагнитные наводки. Это может приводить к нежелательным эффектам, таким как помехи в коммуникационных системах или некорректная работа электронной аппаратуры.</p></li><li><p>Индукция: Переменные электромагнитные поля могут вызывать электрическую индукцию в близлежащих проводниках, что также может вызывать наводки или потери энергии.</p></li><li><p>Электромагнитные силы: В системах электроэнергетики возможны действия электромагнитных сил, которые могут влиять на механическую стабильность и прочность оборудования и конструкций.</p></li></ol><p>Управление электромагнитной обстановкой является важным аспектом в электроэнергетике, особенно при проектировании и эксплуатации систем. Настройка параметров оборудования и применение средств экранирования могут помочь снизить негативные воздействия электромагнитной обстановки и обеспечить электромагнитную совместимость системы. Также проводятся исследования и стандартизация в этой области для обеспечения безопасности и надежности работы электроэнергетических систем.</p></div>"],["Источники помех и каналы передачи помех.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Источники помех в электроэнергетике могут быть различными источниками электромагнитных возмущений, которые могут негативно влиять на работу электрических систем и оборудования. Некоторые из типичных источников помех включают:</p><ol><li><p>Электромагнитные помехи от электрических устройств и оборудования: Это может быть вызвано работой высоковольтных и низковольтных устройств, коммутации, включением и выключением электрических нагрузок и т.д.</p></li><li><p>Молнии: Высоковольтные разряды молнии могут создавать мощные электромагнитные поля, которые могут негативно повлиять на системы электроэнергетики.</p></li><li><p>Высоковольтные линии передачи электроэнергии: Электрические поля, возникающие вокруг высоковольтных линий передачи, могут создавать помехи на соседних линиях связи и электронных устройствах.</p></li><li><p>Импульсные помехи: Возникают в результате включения и выключения ключевых элементов электрических схем, таких как транзисторы и тиристоры.</p></li><li><p>Радиочастотные помехи: Возникают от работы радиоэлектронных устройств, радиопередатчиков и другого коммуникационного оборудования.</p></li><li><p>Электромагнитные помехи от электрических машин: Мощные электродвигатели, генераторы и трансформаторы также могут создавать помехи в окружающей среде.</p></li></ol><p>Каналы передачи помех – это маршруты, по которым помехи распространяются от источников к потребителям. Каналы могут быть проводными и беспроводными, включая электрические провода, кабели, воздушные линии, радиоканалы и пространство. Помехи могут переходить от источника к потребителю как по проводным, так и по беспроводным каналам, негативно влияя на работу электронного оборудования и систем электроэнергетики в целом.</p></div>"],["Влияние полей, создаваемых устройствами электроэнергетики, на биологические объекты.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Влияние полей, создаваемых устройствами электроэнергетики, на биологические объекты может быть важным аспектом, который требует внимания и регулирования. На биологические объекты, такие как человек, животные и растения, могут влиять различные типы электромагнитных полей, возникающих в процессе генерации, передачи и потребления электроэнергии. Некоторые аспекты воздействия электромагнитных полей на биологические объекты включают:</p><ol><li><p>Электрические поля: Человеческое тело является проводником электричества, и наличие сильных электрических полей может вызывать эффекты в организме. Длительное воздействие высоких уровней электрических полей может вызывать электростатические эффекты, такие как раздражение кожи.</p></li><li><p>Магнитные поля: Электрические устройства и линии передачи создают магнитные поля. Сильные магнитные поля могут влиять на нервную систему, вызывать различные реакции в организме, такие как головные боли, головокружение или изменения сонливости.</p></li><li><p>Воздействие на организмы в окружающей среде: Электромагнитные поля также могут оказывать воздействие на животных и растения, влияя на их поведение и физиологию.</p></li><li><p>Потенциальные риски для здоровья: Некоторые исследования проводились для изучения возможных связей между длительным воздействием электромагнитных полей и различными заболеваниями, однако научные доказательства остаются неоднозначными, и вопрос о потенциальных рисках для здоровья остается предметом дебатов.</p></li></ol><p>Для того чтобы минимизировать влияние электромагнитных полей на биологические объекты, существуют нормативные документы и стандарты, устанавливающие предельно допустимые уровни излучения для различных типов электротехнических устройств и оборудования. Эти стандарты разрабатываются на основе результатов научных исследований и регулируются соответствующими органами и ведомствами в каждой стране.</p></div>"],["Закон РФ о электромагнитной совместимости.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>На момент моего обучения, законодательства Российской Федерации о \\"Электромагнитной совместимости\\" (ЭМС) не существовало как единого документа. Однако, существует ряд нормативно-правовых актов, регулирующих вопросы электромагнитной совместимости в России. Ниже предоставлен обзор наиболее значимых из них:</p><ol><li><p>Федеральный закон \\"О техническом регулировании\\" № 184-ФЗ от 27.12.2002: Этот закон определяет основы технического регулирования, включая стандартизацию, сертификацию и декларирование соответствия. Некоторые вопросы, связанные с электромагнитной совместимостью, могут регулироваться на основе этого закона.</p></li><li><p>ГОСТ Р 51317.X-X-X-X \\"Электромагнитная совместимость технических средств. Требования к электромагнитной совместимости\\": Этот ГОСТ устанавливает требования по обеспечению электромагнитной совместимости технических средств, включая электротехническое оборудование. Несоблюдение данных требований может привести к негативным последствиям, таким как помехи в работе других устройств и систем.</p></li><li><p>Национальный стандарт ГОСТ Р ИСО/МЭК 17025-2019 \\"Общие требования к компетентности испытательных и калибровочных лабораторий\\": Данный стандарт определяет требования к компетентности лабораторий, занимающихся испытаниями и калибровками, включая исследование и анализ электромагнитной совместимости устройств.</p></li><li><p>Постановление Правительства РФ № 1019 от 1 декабря 2009 года \\"О применении технических регламентов о безопасности продукции\\": Это постановление устанавливает правила применения технических регламентов о безопасности продукции, включая продукцию в сфере электроэнергетики и электротехники.</p></li></ol><p>Пожалуйста, имейте в виду, что законодательство может изменяться со временем, поэтому для получения актуальной информации о законе РФ о электромагнитной совместимости рекомендуется обратиться к официальным источникам или юридическим специалистам.</p></div>"]],"ОПТИМИЗАЦИЯ В ЭЛЕКТРОЭНЕРГЕТИЧЕСКИХ СИСТЕМАХ":[["Расчет задачи распределения активной нагрузки между ТЭС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Расчет задачи распределения активной нагрузки между тепловыми электростанциями (ТЭС) может осуществляться с целью оптимизации работы электроэнергетической системы. Основной задачей здесь является эффективное распределение активной нагрузки между различными ТЭС с учетом их характеристик, нагрузочных условий, технических ограничений и стоимости производства электроэнергии.</p><p>Процесс распределения активной нагрузки между ТЭС обычно включает следующие шаги:</p><ol><li><p>Сбор данных: Необходимо получить данные о текущей активной нагрузке, доступной мощности каждой ТЭС, их технических характеристиках, экономических параметрах (стоимости производства электроэнергии) и ограничениях на работу.</p></li><li><p>Определение целевых функций: Задача оптимизации должна быть сформулирована с учетом определенных целевых функций. Например, можно стремиться минимизировать общие эксплуатационные расходы системы, минимизировать выбросы парниковых газов, обеспечить стабильность энергосистемы и т.д.</p></li><li><p>Формулировка математической модели: На основе данных и целевых функций разрабатывается математическая модель, которая учитывает связи между переменными и ограничениями на работу ТЭС.</p></li><li><p>Решение оптимизационной задачи: Применяются методы оптимизации для нахождения оптимальных значений активной нагрузки для каждой ТЭС, которые удовлетворяют заданным ограничениям и оптимизационным критериям.</p></li><li><p>Анализ результатов: Полученные результаты анализируются для оценки эффективности распределения активной нагрузки и, при необходимости, вносятся корректировки.</p></li></ol><p>Методы оптимизации могут включать линейное программирование, динамическое программирование, методы искусственного интеллекта и другие алгоритмы. От выбора метода оптимизации будет зависеть точность и эффективность решения задачи распределения активной нагрузки между ТЭС.</p></div>"],["Характеристики устройств для регулирования режима в сети по уровням напряжения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Устройства для регулирования режима в электроэнергетической сети используются для поддержания стабильности работы сети, подавления перенапряжений и перетоков мощности, а также для обеспечения оптимального режима работы энергосистемы. В зависимости от уровней напряжения и конкретных задач регулирования, устройства могут иметь различные характеристики. Рассмотрим некоторые из них:</p><ol><li><p>Автоматические выключатели (АВ): Они предназначены для быстрого отключения частей сети при возникновении аварийных ситуаций, таких как короткое замыкание. АВ обычно обладают высокой быстродействием и надежностью.</p></li><li><p>Автоматические регуляторы напряжения (АРН): Используются для поддержания уровней напряжения в заданных пределах. АРН могут быть установлены на подстанциях и осуществлять автоматическое управление трансформаторами и компенсационными устройствами.</p></li><li><p>Системы компенсации реактивной мощности: Компенсирующие устройства, такие как конденсаторы и синхронные компенсаторы, используются для улучшения качества напряжения, снижения потерь и увеличения пропускной способности линий передачи.</p></li><li><p>Регуляторы мощности генераторов: Управляют работой генераторов с целью обеспечения баланса между производством и потреблением мощности в энергосистеме.</p></li><li><p>Трансформаторы управления напряжением: Используются для поддержания напряжения на заданном уровне путем автоматического переключения обмоток трансформатора.</p></li><li><p>Системы управления нагрузками: Эффективное управление нагрузками, например, по времени, позволяет сгладить пиковые нагрузки и снизить потребление энергии в периоды пиковой нагрузки.</p></li><li><p>Генераторы аварийного питания: Установки, которые включаются автоматически при сбое в основной электросети, обеспечивая электроэнергией важные объекты или системы.</p></li></ol><p>Характеристики устройств для регулирования режима в сети будут зависеть от их типа, назначения и технических характеристик, необходимых для оптимального функционирования электроэнергетической системы.</p></div>"],["Оптимизация режима системы при наличии ГЭС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Оптимизация режима системы при наличии гидроэлектростанций (ГЭС) является важным аспектом управления электроэнергетической системой. ГЭС имеют особенности, которые позволяют эффективно регулировать производство электроэнергии в зависимости от изменяющихся условий нагрузки и доступности водных ресурсов. Вот некоторые ключевые аспекты оптимизации режима системы с ГЭС:</p><ol><li><p>Управление выпуском воды: Одним из главных параметров управления ГЭС является объем выпускаемой воды через турбины. В зависимости от нагрузки и потребностей системы, ГЭС может увеличивать или уменьшать объем воды, чтобы обеспечить оптимальное производство электроэнергии.</p></li><li><p>Регулирование напора: Напор — это разница между уровнем воды в верхнем и нижнем бьефах ГЭС. Регулирование напора позволяет контролировать мощность генерации ГЭС и эффективно реагировать на изменения в нагрузке и условиях системы.</p></li><li><p>Прогнозирование доступности водных ресурсов: Оптимизация работы системы с ГЭС также требует прогнозирования доступности водных ресурсов. Это позволяет планировать производство электроэнергии с учетом колебаний уровня воды в водохранилищах и внешних климатических факторов.</p></li><li><p>Координация с другими источниками энергии: Оптимизация режима системы с участием ГЭС включает согласование работы гидроэлектростанций с другими источниками энергии, такими как тепловые и ветровые станции. Это позволяет обеспечить баланс и стабильность работы системы.</p></li><li><p>Минимизация потерь: Оптимизация режима системы направлена на минимизацию потерь энергии в системе. С учетом характеристик ГЭС, можно планировать передачу электроэнергии с наименьшими потерями на большие расстояния.</p></li><li><p>Бережливое управление: Применение бережливых методов управления и оптимизации может способствовать более эффективному использованию ресурсов, повышению надежности работы системы и снижению операционных расходов.</p></li></ol><p>Оптимизация режима системы с участием гидроэлектростанций требует комплексного подхода, учета множества переменных и использования современных методов моделирования и оптимизации.</p></div>"],["Потери в сетях. Основные допущения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Потери в электроэнергетических сетях возникают из-за сопротивления проводников, преобразования энергии, неконтролируемых режимов работы и других факторов. При оптимизации работы электроэнергетической системы учитываются различные допущения, которые помогают упростить расчеты и анализировать ключевые аспекты потерь. Некоторые из основных допущений в отношении потерь в сетях включают:</p><ol><li><p>Омические потери: При расчетах обычно предполагается, что потери в электроэнергетических сетях вызваны только омическими потерями, которые пропорциональны квадрату тока и сопротивлению проводников. Это предположение справедливо для обычных переменных токовых систем, но не учитывает дополнительные потери, такие как потери в трансформаторах или потери в ферромагнитных материалах.</p></li><li><p>Симметричность системы: В некоторых случаях допускается, что система является симметричной, что означает, что все три фазы равномерно нагружены и имеют одинаковые параметры. Это упрощение позволяет применять методы для симметричных трехфазных систем и сократить объем расчетов.</p></li><li><p>Идеальные условия: В некоторых аналитических моделях допускается, что устройства и компоненты сети являются идеальными, то есть не имеют собственных потерь или ограничений. В реальной жизни устройства всегда имеют потери, но в определенных случаях использование идеальных условий может упростить модель и расчеты.</p></li><li><p>Постоянство параметров сети: В некоторых случаях предполагается, что параметры сети, такие как сопротивление, индуктивность или емкость, остаются постоянными в течение анализируемого периода. В реальности параметры могут изменяться, например, в зависимости от температуры, нагрузки и условий окружающей среды.</p></li></ol><p>Учет этих допущений позволяет создавать более простые математические модели для анализа потерь в сетях и исследования влияния различных факторов на эффективность работы системы. Однако при более точных и приближенных расчетах необходимо учитывать более сложные эффекты, что может потребовать использования более сложных методов и программного обеспечения для моделирования и оптимизации.</p></div>"],["Задачи оптимизации. Перспективные проектирования электроэнергетических систем.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Оптимизация в электроэнергетических системах играет важную роль при перспективном проектировании и развитии системы энергоснабжения. Вот некоторые задачи оптимизации и аспекты перспективного проектирования электроэнергетических систем:</p><ol><li><p><strong>Минимизация затрат на производство и передачу электроэнергии</strong>: Задача оптимизации состоит в нахождении оптимальных путей снижения производственных и эксплуатационных затрат в электроэнергетической системе. Это может включать оптимальное распределение нагрузки, выбор оптимальных мест размещения генерирующих и передающих устройств, учет динамических факторов и т.д.</p></li><li><p><strong>Интеграция возобновляемых источников энергии</strong>: С ростом интереса к возобновляемым источникам энергии, оптимизация включает интеграцию этих источников в сеть. Задача состоит в эффективной интеграции солнечных, ветровых, гидроэнергетических и других видов возобновляемых источников, чтобы обеспечить стабильность и надежность энергоснабжения.</p></li><li><p><strong>Управление энергосистемами</strong>: Задача оптимизации включает разработку алгоритмов и стратегий управления электроэнергетическими системами для обеспечения оптимального распределения энергии, поддержания стабильной работы системы, минимизации потерь и улучшения качества энергоснабжения.</p></li><li><p><strong>Повышение энергоэффективности</strong>: Оптимизация направлена на разработку и внедрение энергоэффективных технологий и методов управления, чтобы уменьшить потребление электроэнергии при сохранении высокого уровня производительности и комфорта.</p></li><li><p><strong>Прогнозирование нагрузки и генерации</strong>: Развитие методов прогнозирования нагрузки и генерации является одной из задач оптимизации. Точные прогнозы позволяют более эффективно планировать и управлять работой электроэнергетической системы.</p></li><li><p><strong>Обеспечение надежности системы</strong>: Задача состоит в оптимизации структуры системы энергоснабжения, чтобы обеспечить высокую надежность и устойчивость к возможным отказам и аварийным ситуациям.</p></li><li><p><strong>Учет экологических факторов</strong>: Перспективное проектирование электроэнергетических систем включает учет экологических аспектов. Задача оптимизации заключается в минимизации воздействия на окружающую среду при производстве и использовании электроэнергии.</p></li><li><p><strong>Использование хранилищ энергии</strong>: Оптимизация касается также использования эффективных систем хранения энергии, таких как аккумуляторы, суперконденсаторы и другие технологии, которые способствуют более эффективному управлению нагрузками и поддержанию стабильности в сети.</p></li></ol><p>Эти задачи оптимизации в электроэнергетических системах помогают сделать энергоснабжение более эффективным, устойчивым и экологически безопасным.</p></div>"]],"ПРИМЕНЕНИЕ ЭВМ В ЭЛЕКТРОЭНЕРГЕТИКЕ":[["Структуры алгоритмов расчета установившихся режим работы систем.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Структуры алгоритмов расчета установившихся режимов работы системы электроэнергетики могут быть представлены следующими подходами:</p><ol><li><p><strong>Метод итераций</strong>: Этот метод основан на последовательных итерациях и обновлениях переменных до достижения установившегося режима. Первоначально устанавливаются начальные значения переменных, а затем выполняются итерационные шаги до тех пор, пока условие сходимости не будет выполнено.</p></li><li><p><strong>Метод прямого расчета</strong>: В этом методе производится прямой расчет системы, чтобы определить установившиеся значения переменных. Он не требует последовательных итераций, но может быть менее эффективен для сложных систем.</p></li><li><p><strong>Метод Гаусса-Зейделя</strong>: Это модификация метода итераций, в которой значения переменных обновляются по одной на каждом шаге итерации. Этот метод обычно обеспечивает более быструю сходимость, чем обычный метод итераций.</p></li><li><p><strong>Метод Ньютона-Рафсона</strong>: Этот метод используется для расчета нелинейных систем уравнений, которые часто встречаются в системах электроэнергетики. Он базируется на линеаризации системы уравнений вокруг текущих значений переменных и нахождении корней линеаризованных уравнений.</p></li><li><p><strong>Методы оптимизации</strong>: Некоторые алгоритмы оптимизации, такие как метод наименьших квадратов, генетические алгоритмы и рой частиц, могут быть применены для расчета установившихся режимов в системах электроэнергетики, особенно при наличии неопределенностей или шума в данных.</p></li><li><p><strong>Методы аналитического решения</strong>: В некоторых случаях, когда структура системы проста и содержит линейные уравнения, возможно использование методов аналитического решения для получения точного установившегося режима.</p></li><li><p><strong>Методы времени разложения</strong>: Эти методы разделяют динамические и установившиеся составляющие переменных, что позволяет более эффективно определить установившийся режим.</p></li></ol><p>В зависимости от сложности системы, требуемой точности и доступных вычислительных ресурсов, можно выбрать подходящий алгоритм расчета установившихся режимов работы системы электроэнергетики.</p></div>"],["Формирование уравнений установившегося режима энергосистемы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Для формирования уравнений установившегося режима энергосистемы применяются методы анализа сетевых элементов и законов сохранения энергии. В установившемся режиме все переменные системы становятся постоянными или периодическими функциями времени. Важно помнить, что установившийся режим наступает, когда все переходные процессы в энергосистеме утихают, и рабочие значения всех переменных стабилизируются.</p><p>Для формирования уравнений установившегося режима энергосистемы учитываются законы Кирхгофа (закон токов и закон узлов), а также активная и реактивная мощности. Эти уравнения позволяют анализировать токи, напряжения и мощности на различных участках электроэнергетической системы.</p><p>Уравнения установившегося режима позволяют определить значения фазных напряжений, токов, мощности и других параметров электрических схем в стационарном состоянии, что является важной задачей при проектировании, эксплуатации и оптимизации энергосистем.</p><p>Замечание: Вопрос описывает тему \\"Формирование уравнений установившегося режима энергосистемы\\", без указания применения ЭВМ. Возможно, уточнение вопроса требуется для точного ответа в контексте использования компьютеров в данной области.</p></div>"],["Алгоритмы оптимизации режимов системы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Алгоритмы оптимизации режимов системы в электроэнергетике являются важным инструментом для обеспечения эффективного и стабильного функционирования электроэнергетических систем. Они используются для оптимизации работы энергосистем, минимизации потерь энергии, оптимального распределения нагрузок и ресурсов, а также для решения различных задач планирования и управления.</p><p>Один из распространенных алгоритмов оптимизации режимов системы - это алгоритм наименьших потерь мощности (Algorithm of Minimum Losses). Он направлен на минимизацию потерь электроэнергии в сети, что обеспечивает повышение эффективности энергосистемы и снижение эксплуатационных расходов.</p><p>Еще одним распространенным алгоритмом является алгоритм оптимизации нагрузки (Load Optimization Algorithm). Он позволяет определить оптимальное распределение нагрузки между различными источниками энергии и потребителями, чтобы избежать перегрузок и неэффективного использования ресурсов.</p><p>Для решения сложных задач оптимизации в электроэнергетике также применяются генетические алгоритмы (Genetic Algorithms), методы искусственного интеллекта, алгоритмы искусственных нейронных сетей и другие современные технологии.</p><p>Оптимизация режимов системы позволяет энергосистемам работать более эффективно, уменьшать риски возникновения аварийных ситуаций и снижать нагрузку на окружающую среду. Это важный компонент современной управления электроэнергией и обеспечения надежности энергоснабжения.</p></div>"],["Симплекс - метод и его модификации. Вычислительная процедура метода.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Симплекс-метод - это численный алгоритм для решения оптимизационных задач, таких как линейное программирование. Он широко применяется в различных областях, в том числе в электроэнергетике.</p><p>Вычислительная процедура Симплекс-метода включает следующие шаги:</p><ol><li><p>Начальное допустимое базисное решение: Сначала необходимо выбрать допустимое базисное решение для задачи линейного программирования. Базисные переменные - это те переменные, которые приравниваются нулю, и они играют важную роль в методе.</p></li><li><p>Определение коэффициентов: Рассчитываются значения коэффициентов целевой функции и ограничений для текущего базисного решения.</p></li><li><p>Выбор опорного элемента: Выбирается переменная, входящая в базис, которая может увеличить значение целевой функции (если задача является задачей на максимум) или уменьшить его (если задача на минимум). Этот шаг называется \\"вход в базис\\".</p></li><li><p>Правило разрешающего элемента: Среди переменных, которые могут войти в базис, выбирается переменная, которая будет ограничивающей. Этот шаг называется \\"выход из базиса\\".</p></li><li><p>Обновление базиса: Обновляется базис, и новое допустимое решение получается путем изменения значений переменных.</p></li><li><p>Проверка оптимальности: Проверяется, достигнут ли оптимум, то есть является ли текущее решение наилучшим решением задачи. Если да, то процесс завершается. В противном случае, возвращаемся к шагу 2.</p></li><li><p>Итерационный процесс: Шаги 2-6 повторяются итеративно до достижения оптимального решения задачи.</p></li></ol><p>Модификации Симплекс-метода могут включать улучшения для ускорения сходимости или улучшения точности решения. Одним из примеров модификации является метод двухфазного симплекса, который используется для решения задач с ограничениями на равенства. Множество различных модификаций симплекс-метода были разработаны и оптимизированы для различных видов задач линейного программирования в электроэнергетике и других областях.</p></div>"],["Алгоритмы расчета статической устойчивости систем.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Алгоритмы расчета статической устойчивости систем в электроэнергетике основаны на проведении различных методов и исследований электрических сетей. Один из таких алгоритмов - метод потенциалов узлов. Он предполагает представление системы в виде графа, где узлы соответствуют узлам электрической сети, а ребра - проводникам. С помощью этого метода определяется потенциал каждого узла сети относительно некоторой выбранной точки.</p><p>Другой распространенный алгоритм - метод Гаусса-Зейделя. Он используется для определения напряжений в сети путем последовательного обновления значений напряжений в узлах до достижения сходимости системы.</p><p>Также для расчета статической устойчивости применяется метод расходов мощности, который позволяет определить перетоки мощности по линиям сети и контролировать их значения в пределах допустимых.</p><p>Интервальный метод является более продвинутым алгоритмом, который учитывает неопределенность в некоторых параметрах сети. Он представляет значения параметров как интервалы и позволяет получить интервальные оценки для напряжений и перетоков мощности.</p><p>Это лишь некоторые из алгоритмов, используемых для расчета статической устойчивости систем в электроэнергетике. В современных условиях также активно исследуются и применяются различные методы и техники искусственного интеллекта, нейронные сети и оптимизационные алгоритмы для повышения точности и эффективности расчетов.</p></div>"]],"ТЕХНИЧЕСКИЕ СРЕДСТВА ДИСПЕТЧЕРСКОГО И ТЕХНОЛОГИЧЕСКОГО УПРАВЛЕНИЯ":[["Особенности технологического процесса выработки и распределения электроэнергии в энергосистемах.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Технологический процесс выработки и распределения электроэнергии в энергосистемах имеет несколько особенностей:</p><ol><li><p>Комплексность и масштабность: Электроэнергетические системы представляют собой сложные технические комплексы, объединяющие множество генерирующих, передающих и распределительных устройств. Они включают генерирующие станции различных типов (тепловые, гидроэлектрические, атомные, ветро-, солнечные и др.), сети высокого и низкого напряжения, подстанции, трансформаторы и другие элементы.</p></li><li><p>Нагрузочная динамика: Спрос на электроэнергию непостоянен и изменяется в зависимости от времени суток, сезонности, дня недели и других факторов. Диспетчерское управление должно балансировать производство и потребление электроэнергии, чтобы обеспечивать стабильную работу системы и предотвращать перегрузки.</p></li><li><p>Регулирование частоты и напряжения: В электроэнергетических системах необходимо поддерживать постоянные значения частоты (50 Гц или 60 Гц) и напряжения (обычно 220 В или 110 В). Для этого используются автоматические регуляторы и резервные мощности.</p></li><li><p>Ограниченная храняемость: Электроэнергия является продуктом немгновенного использования, и ее нельзя значительно накапливать в больших объемах. Это требует точного планирования и прогнозирования спроса, чтобы избежать недостатка или перерасхода.</p></li><li><p>Учет возобновляемой энергии: Внедрение возобновляемых источников энергии, таких как солнечные и ветряные станции, представляет новые вызовы для диспетчерского управления. Их вариабельность и зависимость от погодных условий требуют усовершенствованных методов управления и прогнозирования.</p></li><li><p>Развитие смарт-технологий: В современных энергосистемах активно внедряются смарт-технологии, позволяющие более гибко управлять потреблением, предоставлять информацию о состоянии сети в режиме реального времени и оптимизировать процессы управления.</p></li><li><p>Безопасность и надежность: Электроэнергетические системы должны обеспечивать надежную и безопасную работу. Отказы в работе могут привести к серьезным последствиям, поэтому особое внимание уделяется контролю, обслуживанию и применению аварийных защитных механизмов.</p></li></ol><p>Эти особенности требуют от диспетчеров и инженеров электроэнергетики высокой компетенции и умения оперативно принимать решения для эффективного и стабильного функционирования электроэнергетических систем.</p></div>"],["Функции и задачи оперативно-диспетчерского управления. Информационные основы управления.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Оперативно-диспетчерское управление в электроэнергетике выполняет ряд важных функций и задач для обеспечения стабильной и надежной работы энергосистемы. Информационные основы управления играют ключевую роль в обеспечении оперативности и эффективности принятия решений. Вот основные функции и задачи оперативно-диспетчерского управления:</p><p>Функции оперативно-диспетчерского управления:</p><ol><li><p>Мониторинг и контроль: Основная функция диспетчерской системы - непрерывный мониторинг и контроль работы электрических сетей и энергопроизводящих установок. Диспетчеры наблюдают за различными параметрами, такими как напряжение, частота, токи, нагрузки, состояние оборудования и др., чтобы обнаружить возможные неисправности или нарушения в работе системы.</p></li><li><p>Управление режимами работы: Оперативно-диспетчерское управление регулирует режимы работы энергосистемы с целью поддержания баланса между потреблением и производством электроэнергии. Диспетчеры принимают решения о включении или отключении генерирующих и потребляющих установок в зависимости от текущей нагрузки и возможностей производства электроэнергии.</p></li><li><p>Распределение нагрузки: Диспетчерская система управляет распределением нагрузки между различными энергопроизводящими и потребляющими установками для оптимизации и равномерного использования ресурсов.</p></li><li><p>Обеспечение надежности: Оперативное управление направлено на обеспечение высокой надежности работы электроэнергетических систем. Диспетчеры принимают меры для предотвращения аварийных ситуаций и устранения возможных отказов оборудования.</p></li><li><p>Реагирование на аварии и чрезвычайные ситуации: В случае возникновения аварийных ситуаций или чрезвычайных обстоятельств диспетчерская система принимает меры по ограничению последствий и восстановлению стабильной работы системы.</p></li></ol><p>Задачи оперативно-диспетчерского управления связаны с эффективным использованием информации для принятия правильных решений:</p><ol><li><p>Сбор и анализ данных: Для принятия решений диспетчеры собирают информацию о текущем состоянии системы, ее нагрузке, работе оборудования и других параметрах.</p></li><li><p>Прогнозирование нагрузки: Для оптимального управления системой диспетчеры используют прогнозы нагрузки, которые позволяют предвидеть изменения потребления электроэнергии в будущем.</p></li><li><p>Моделирование системы: Диспетчеры могут проводить моделирование электроэнергетической системы с целью определения оптимальных решений для поддержания стабильного режима работы.</p></li><li><p>Принятие решений: На основе анализа данных и прогнозов диспетчеры принимают решения по управлению энергосистемой, которые направлены на обеспечение безопасности, надежности и экономичности ее работы.</p></li><li><p>Коммуникация и координация: Важной задачей является обмен информацией между различными диспетчерскими центрами и субъектами электроэнергетики для координации работы системы в целом.</p></li></ol><p>Информационные основы управления позволяют оперативно и точно реагировать на изменения в работе энергосистемы, обеспечивая ее стабильное и эффективное функционирование.</p></div>"],["Информационная база как основа современной технологии управления, информационные системы, задачи, функции.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Информационная база является краеугольным камнем современной технологии управления в электроэнергетике и электротехнике. Она представляет собой совокупность данных, информации, алгоритмов, программного обеспечения и оборудования, которые обеспечивают сбор, обработку, хранение, передачу и анализ информации для принятия обоснованных решений и управления энергосистемами и процессами.</p><p>Информационная база оперативно-диспетчерского и технологического управления включает в себя несколько ключевых элементов:</p><ol><li><p>Датчики и измерительные устройства: Они предназначены для сбора данных о состоянии и параметрах работы электроэнергетических объектов, таких как генерирующие станции, трансформаторы, линии электропередачи, нагрузки и другие компоненты системы.</p></li><li><p>Автоматизированные системы сбора данных (АССД): Эти системы предназначены для сбора данных от датчиков и измерительных устройств, их предварительной обработки и передачи на центральные пункты управления.</p></li><li><p>SCADA-системы (Supervisory Control and Data Acquisition): Эти системы обеспечивают централизованный мониторинг и управление техническими процессами в реальном времени. SCADA-системы обеспечивают визуализацию данных, анализ параметров работы и управление оборудованием на удаленных объектах.</p></li><li><p>Диспетчерские информационные системы: Они интегрируют данные из различных источников и предоставляют оперативным диспетчерам полную информацию о текущем состоянии системы, статусе оборудования и других ключевых параметрах.</p></li><li><p>Модели и алгоритмы: Разработанные модели и алгоритмы позволяют проводить прогнозирование, оптимизацию и анализ энергосистемы на основе доступных данных.</p></li></ol><p>Задачи и функции информационной базы:</p><ol><li><p>Мониторинг и контроль: Информационная база обеспечивает постоянный мониторинг и контроль за состоянием и работой всех элементов электроэнергетической системы.</p></li><li><p>Сбор и обработка данных: Осуществляется сбор данных от датчиков и измерительных устройств, их передача в центральные системы управления, а также предварительная обработка данных для анализа.</p></li><li><p>Анализ и прогнозирование: На основе собранных данных и используя разработанные модели и алгоритмы, информационная база позволяет проводить анализ текущего состояния системы и прогнозировать возможные изменения и нагрузки.</p></li><li><p>Принятие решений: Оперативно-диспетчерское управление использует информационную базу для принятия обоснованных решений по управлению системой электроснабжения, оптимизации нагрузки, резервированию, а также предотвращению и устранению аварийных ситуаций.</p></li><li><p>Коммуникация и обмен информацией: Информационная база обеспечивает связь и обмен информацией между различными уровнями управления, от оперативных диспетчеров до высшего управленческого звена.</p></li></ol><p>Информационная база является незаменимым инструментом для повышения эффективности, надежности и безопасности работы электроэнергетических систем и процессов управления в современной электроэнергетике и электротехнике.</p></div>"],["Компьютерные сети, модель архитектуры вычислительной сети.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Компьютерные сети играют важную роль в современных системах диспетчерского и технологического управления в электроэнергетике и электротехнике. Они обеспечивают связь и передачу данных между различными компонентами системы управления, что позволяет оперативно и эффективно контролировать работу электрических сетей и устройств. Модель архитектуры вычислительной сети описывает структуру и принципы организации компьютерных сетей. Наиболее распространенной и широко используемой моделью архитектуры является модель OSI (Open Systems Interconnection).</p><p>Модель OSI состоит из семи уровней, каждый из которых выполняет определенные функции. Вот описание каждого уровня модели OSI:</p><ol><li><p>Физический уровень (Physical Layer): Этот уровень отвечает за физическое соединение и передачу данных по физическим средам связи, таким как проводные и беспроводные кабели, оптоволокно и другие. Он определяет характеристики аппаратного оборудования, методы кодирования данных и электрические параметры передачи.</p></li><li><p>Канальный уровень (Data Link Layer): Этот уровень обеспечивает надежную передачу данных между устройствами в локальной сети. Здесь выполняется управление доступом к среде передачи, обнаружение и исправление ошибок, а также управление потоком данных.</p></li><li><p>Сетевой уровень (Network Layer): На этом уровне осуществляется маршрутизация данных между различными сетями. Он отвечает за выбор оптимального пути передачи данных, а также определение адресов и маршрутизацию пакетов.</p></li><li><p>Транспортный уровень (Transport Layer): Этот уровень обеспечивает надежную передачу данных между конечными устройствами. Здесь происходит разделение данных на пакеты, установка соединения, управление потоком данных и обработка ошибок.</p></li><li><p>Сеансовый уровень (Session Layer): Сеансовый уровень управляет установлением, поддержкой и завершением сеансов связи между приложениями на различных устройствах.</p></li><li><p>Представительный уровень (Presentation Layer): На этом уровне происходит преобразование данных в формат, понятный для приложений. Он отвечает за кодирование, сжатие и шифрование данных.</p></li><li><p>Прикладной уровень (Application Layer): Этот уровень предоставляет интерфейс для приложений, которые используют сеть. Здесь работают различные сетевые протоколы, такие как HTTP, FTP, SMTP и другие.</p></li></ol><p>Модель OSI обеспечивает структурированный подход к проектированию и разработке компьютерных сетей, что делает ее универсальной и применимой в различных областях, включая электроэнергетику и электротехнику.</p></div>"],["Назначение и виды протоколов передачи данных в сетях.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Назначение протоколов передачи данных в сетях заключается в обеспечении стандартных правил и процедур для эффективного обмена информацией между устройствами в компьютерных сетях. Протоколы определяют формат данных, способы кодирования, соглашения о передаче и приеме данных, а также контроль за ошибками для обеспечения надежной и безопасной передачи данных. В сфере электроэнергетики и электротехники используются различные виды протоколов передачи данных в сетях.</p><p>Виды протоколов передачи данных в сетях:</p><ol><li><p>Протоколы управления сетью (Network Management Protocols): Эти протоколы предназначены для управления и мониторинга сетевых ресурсов и устройств. Примерами таких протоколов являются Simple Network Management Protocol (SNMP) и Common Industrial Protocol (CIP).</p></li><li><p>Протоколы уровня передачи данных (Data Link Layer Protocols): Эти протоколы обеспечивают надежную передачу данных между устройствами в локальной сети. Примерами таких протоколов являются Ethernet, IEEE 802.11 (Wi-Fi), а также протоколы для управления доступом к среде передачи (например, CSMA/CD - Carrier Sense Multiple Access with Collision Detection).</p></li><li><p>Протоколы сетевого уровня (Network Layer Protocols): Эти протоколы отвечают за маршрутизацию и пересылку данных между различными сетями. Примерами таких протоколов являются Internet Protocol (IP) и Routing Information Protocol (RIP).</p></li><li><p>Протоколы транспортного уровня (Transport Layer Protocols): Эти протоколы обеспечивают надежную и целостную передачу данных между конечными устройствами. Примерами таких протоколов являются Transmission Control Protocol (TCP) и User Datagram Protocol (UDP).</p></li><li><p>Протоколы прикладного уровня (Application Layer Protocols): Эти протоколы предоставляют интерфейсы для приложений и обеспечивают обмен данных между приложениями на различных устройствах. Примерами таких протоколов являются Hypertext Transfer Protocol (HTTP) для передачи веб-страниц, File Transfer Protocol (FTP) для передачи файлов, Simple Mail Transfer Protocol (SMTP) для передачи электронной почты и другие.</p></li></ol><p>Примечание: В области электроэнергетики и электротехники могут также использоваться специализированные протоколы, адаптированные для нужд управления электрическими сетями и устройствами, такие как DNP3 (Distributed Network Protocol), IEC 61850, Modbus, и другие. Эти протоколы часто применяются для обмена данных между удаленными устройствами и системами диспетчерского управления в энергетических сетях.</p></div>"],["Коммуникационные средства вычислительных сетей.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Коммуникационные средства вычислительных сетей в области электроэнергетики и электротехники представляют собой технологии и устройства, используемые для передачи информации между различными системами и устройствами, такими как диспетчерские центры, субстанции, релейная защита, мониторинг и управление электрическими объектами и прочее. Они играют важную роль в обеспечении надежной, быстрой и безопасной передачи данных в электроэнергетической инфраструктуре.</p><p>Примеры коммуникационных средств вычислительных сетей в электроэнергетике и электротехнике:</p><ol><li><p><strong>SCADA-системы (системы сбора и передачи данных в режиме реального времени)</strong>: Они предоставляют возможность мониторинга и управления распределенными объектами и процессами в энергосистеме. SCADA-системы собирают данные от различных устройств, таких как датчики, релейная защита, и передают эту информацию на диспетчерские центры для принятия решений.</p></li><li><p><strong>Коммуникационные протоколы</strong>: Протоколы передачи данных, такие как IEC 60870-5, IEC 61850, DNP3 и Modbus, обеспечивают стандартизированные методы коммуникации между различными устройствами и системами в электроэнергетической сети.</p></li><li><p><strong>Оптические волоконные кабели</strong>: Они обеспечивают высокую скорость передачи данных и имеют низкую задержку, что делает их идеальным выбором для передачи информации на длинные расстояния и в высоконагруженных сетях.</p></li><li><p><strong>Микроволновая связь и радиоканалы</strong>: Используются для передачи данных на большие расстояния, особенно в удаленных и труднодоступных местах, где прокладка кабелей может быть затруднительной.</p></li><li><p><strong>Интернет и сети связи</strong>: Используются для обмена данных между удаленными объектами и центральными системами, а также для связи между различными диспетчерскими центрами.</p></li><li><p><strong>Мобильные коммуникации</strong>: Возможность передачи данных и управления удаленными объектами с помощью сотовых сетей, что особенно полезно для мобильных объектов, таких как подвижные субстанции или автомобильные электростанции.</p></li></ol><p>Важно обеспечивать надежность, защиту и безопасность коммуникационных средств, так как они имеют критическое значение для эффективного управления и контроля в электроэнергетической системе. Также, учитывая быстрое развитие технологий, отрасль электроэнергетики и электротехники постоянно внедряет новые инновации и совершенствует существующие коммуникационные решения для обеспечения оптимальной работы энергетической инфраструктуры.</p></div>"],["Технические средства сбора оперативно-диспетчерской информации.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Технические средства сбора оперативно-диспетчерской информации в области электроэнергетики и электротехники включают в себя разнообразные системы и устройства, которые предназначены для получения и передачи данных о работе электрических сетей и энергопроизводственных объектов. Некоторые из таких средств включают:</p><ol><li><p>Системы измерительных устройств: Для сбора информации о токах, напряжениях, мощности, частоте и других параметрах в различных узлах электрической сети устанавливаются измерительные приборы, такие как трансформаторы тока, трансформаторы напряжения, мультиметры и счетчики электроэнергии.</p></li><li><p>SCADA-системы (Системы сбора, передачи и обработки данных): Это комплексные системы, которые обеспечивают сбор и передачу данных с удаленных объектов в реальном времени. SCADA-системы позволяют операторам диспетчерских центров мониторить работу электрооборудования и принимать управляющие решения.</p></li><li><p>Регистраторы данных: Устройства, предназначенные для непрерывной записи показаний измерительных приборов и параметров работы электрооборудования. Регистраторы могут использоваться для анализа и выявления аномалий в работе системы.</p></li><li><p>Дистанционные коммуникационные средства: Технологии связи, такие как оптоволокно, радиосвязь, гребневые каналы и другие, позволяют передавать данные с удаленных объектов на диспетчерские пункты и центры управления.</p></li><li><p>Автоматизированные системы управления и защиты: Это технические средства, которые автоматически реагируют на изменения в работе электрооборудования, например, распознавая и устраняя аварийные ситуации или выполняя регулирование нагрузки в сети.</p></li><li><p>GPS-технологии: Глобальная система позиционирования используется для определения местоположения и координат объектов, что может быть полезно для мониторинга передвижения мобильных энергетических установок и транспортных средств.</p></li><li><p>Интернет вещей (IoT): Включение устройств и сенсоров в электроэнергетические объекты и передача данных через интернет позволяет получать информацию о состоянии системы в режиме реального времени.</p></li><li><p>Электронные журналы и базы данных: Для хранения и анализа большого объема данных о работе электрических сетей и энергопроизводственных объектов используются электронные журналы и базы данных.</p></li></ol><p>Это лишь некоторые примеры технических средств сбора оперативно-диспетчерской информации. Развитие технологий в области электроэнергетики и электротехники постоянно продвигается вперед, что способствует более эффективному и надежному управлению электрическими системами.</p></div>"],["Состав и назначение технических средств диспетчеризации.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Состав и назначение технических средств диспетчеризации в области электроэнергетики и электротехники включают разнообразные системы и устройства, предназначенные для оперативного контроля, управления и координации работы электроэнергетических систем. Эти технические средства позволяют диспетчерам эффективно управлять электрическими сетями, обеспечивать стабильную работу энергосистемы и решать проблемы, связанные с нагрузками, перераспределением энергии, предотвращением аварийных ситуаций и другими важными аспектами управления.</p><p>Некоторые из основных технических средств диспетчеризации включают:</p><ol><li><p>SCADA-системы (Системы сбора, передачи и обработки данных): Это централизованные системы, которые позволяют операторам мониторить и управлять электрическими объектами и процессами в реальном времени. SCADA-системы собирают данные с различных удаленных устройств, анализируют их и предоставляют диспетчерам информацию для принятия управленческих решений.</p></li><li><p>Дистанционное управление и управление удаленными объектами: Это технические средства, которые позволяют диспетчерам мониторить и управлять электрооборудованием и системами удаленно. Например, дистанционное управление позволяет открывать и закрывать выключатели, регулировать реле защиты и управлять другими важными устройствами в сети без необходимости присутствия на месте.</p></li><li><p>Автоматические системы управления и защиты: Эти системы реагируют на аварийные ситуации или изменения в работе электрооборудования и выполняют автоматические действия для предотвращения серьезных нарушений или аварий. Они также обеспечивают стабильную работу системы при изменяющихся условиях.</p></li><li><p>Компьютерные информационные системы: Эти системы включают базы данных и программное обеспечение для хранения и обработки большого объема данных о работе электрических сетей, а также для моделирования и анализа работы энергосистемы.</p></li><li><p>Средства связи и передачи данных: Для обеспечения связи между различными устройствами и системами используются сети передачи данных, оптоволоконные линии, радиоканалы и другие средства связи.</p></li><li><p>Энергосистемные оперативно-производственные системы (ЭОПС): Эти системы обеспечивают оперативное управление энергосистемой, планирование и распределение нагрузок, а также решают задачи по оптимизации и координации работы электростанций и передачи электроэнергии.</p></li><li><p>Визуализация данных и системы принятия решений: Диспетчеры используют системы визуализации данных, которые предоставляют информацию в удобной и понятной форме, а также системы принятия решений, которые помогают определить оптимальные стратегии управления и реагировать на изменяющиеся условия.</p></li></ol><p>Каждое из этих технических средств играет важную роль в обеспечении надежной, безопасной и эффективной работы электроэнергетических систем. Они позволяют диспетчерам оперативно реагировать на изменения и проблемы, возникающие в энергосистеме, и принимать решения для обеспечения стабильной работы и предотвращения аварийных ситуаций.</p></div>"],["Системы передачи данных, каналы связи с частотным и временным разделением.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Системы передачи данных с частотным и временным разделением представляют собой технологии связи, которые позволяют передавать информацию по разным каналам с различными частотными или временными характеристиками. Эти методы используются для обеспечения эффективной передачи данных в различных системах, включая системы диспетчеризации в электроэнергетике и электротехнике.</p><ol><li>Частотное разделение:\\nЧастотное разделение (Frequency Division Multiplexing, FDM) представляет собой метод передачи нескольких потоков данных одновременно по различным частотным каналам. Каждому потоку данных выделяется свой уникальный частотный диапазон, и данные смешиваются для передачи по общему каналу. На принимающей стороне данные разделяются обратно на исходные потоки.</li></ol><p>Пример применения FDM: В традиционных радио- и телевизионных передачах используется частотное разделение, когда различные радиостанции или телеканалы транслируются на разных частотах.</p><ol start=\\"2\\"><li>Временное разделение:\\nВременное разделение (Time Division Multiplexing, TDM) представляет собой метод передачи данных по одному и тому же физическому каналу, но с разделением по времени. Каждому потоку данных выделяется определенный интервал времени, в течение которого данные передаются последовательно.</li></ol><p>Пример применения TDM: В сетях передачи данных, таких как Ethernet, используется временное разделение, когда несколько устройств передают свои данные по одному сетевому кабелю, но данные передаются с разделением по времени.</p><ol start=\\"3\\"><li>Статистическое временное разделение:\\nСтатистическое временное разделение (Statistical Time Division Multiplexing) - это метод коммутации, при котором пропускная способность канала распределяется динамически в зависимости от активности каждого устройства. Если устройство активно и передает данные, ему предоставляется доступ к каналу. Если устройство неактивно, пропускная способность канала может быть использована другими устройствами.</li></ol><p>Эти методы частотного и временного разделения широко используются в современных системах связи, включая технические средства диспетчеризации в электроэнергетике. Они позволяют эффективно использовать доступные ресурсы передачи данных, обеспечивая надежную и быструю связь между различными устройствами и системами в электроэнергетической инфраструктуре.</p></div>"],["Виды и параметры информационных сигналов, характеристика каналов передачи данных.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Виды и параметры информационных сигналов, а также характеристики каналов передачи данных играют ключевую роль в обеспечении эффективной и надежной связи в системах диспетчерского и технологического управления в области электроэнергетики и электротехники. Ниже перечислены основные виды информационных сигналов и параметры, а также характеристики каналов передачи данных:</p><p>Виды информационных сигналов:</p><ol><li><p>Аналоговые сигналы: Это непрерывные сигналы, которые могут принимать любые значения в определенном диапазоне. В электроэнергетике аналоговые сигналы могут представлять различные параметры, такие как напряжение, ток, мощность и т.д.</p></li><li><p>Цифровые сигналы: Это дискретные сигналы, которые принимают только определенные значения (обычно 0 и 1). В системах диспетчеризации и управления часто используются цифровые сигналы для передачи информации о состоянии устройств, команд и других данных.</p></li></ol><p>Параметры информационных сигналов:</p><ol><li><p>Амплитуда: Это значение аналогового сигнала на пике своего колебания или значение цифрового сигнала, например, \\"1\\" или \\"0\\".</p></li><li><p>Частота: Это количество колебаний аналогового сигнала за единицу времени, измеряемое в герцах (Гц). Для цифровых сигналов частота определяет скорость передачи информации.</p></li><li><p>Фаза: Это смещение во времени между несколькими сигналами. Фаза имеет особое значение для сигналов синхронизации и временного разделения.</p></li></ol><p>Характеристики каналов передачи данных:</p><ol><li><p>Пропускная способность (Bandwidth): Это максимальная скорость передачи данных через канал, измеряемая в битах в секунду (бит/с) или в герцах (Гц).</p></li><li><p>Задержка (Latency): Это время, которое требуется для передачи данных от источника к назначению. Малая задержка важна для оперативных систем управления.</p></li><li><p>Отношение сигнал/шум (Signal-to-Noise Ratio, SNR): Это соотношение между мощностью сигнала и мощностью шумов на канале. Высокое SNR обеспечивает более надежную передачу данных.</p></li><li><p>Пропускная способность канала: Это общая пропускная способность канала, которая определяет его способность одновременно поддерживать несколько информационных потоков.</p></li><li><p>Дальность передачи: Это максимальное расстояние, на которое может быть передан сигнал без значительных потерь.</p></li></ol><p>Знание и оптимальное использование различных видов информационных сигналов и характеристик каналов передачи данных позволяют обеспечить эффективную и надежную связь в системах диспетчеризации и технологического управления электроэнергетическими системами.</p></div>"],["Системы телемеханики. Определение, подразделение по характеру выполняемых функций, типу передачи данных.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Системы телемеханики в области электроэнергетики и электротехники - это технические средства и технологии, предназначенные для удаленного контроля и управления электрическим оборудованием и процессами. Они позволяют дистанционно передавать информацию о состоянии устройств, а также выполнять команды и управлять различными устройствами в электроэнергетической системе. Телемеханика играет ключевую роль в автоматизации и оптимизации работы сетей и процессов в электроэнергетике.</p><p>Подразделение по характеру выполняемых функций:</p><ol><li><p>Измерительная телемеханика: Включает системы сбора и передачи информации о параметрах электроэнергетических объектов, таких как напряжение, ток, мощность и другие параметры. Эти системы позволяют операторам диспетчерского центра контролировать работу оборудования и отслеживать его текущее состояние.</p></li><li><p>Управляющая телемеханика: Включает системы удаленного управления электрооборудованием и процессами. Операторы могут дистанционно управлять выключателями, регуляторами, реле защиты и другими устройствами в сети, принимать решения и выполнять команды для обеспечения стабильной и безопасной работы системы.</p></li><li><p>Телемеханика для аварийного управления: Включает системы, которые автоматически реагируют на аварийные ситуации и выполняют соответствующие защитные или восстановительные действия. Эти системы способствуют предотвращению аварийных ситуаций или минимизации их последствий.</p></li></ol><p>Тип передачи данных:</p><ol><li><p>Проводная телемеханика: Использует проводные каналы связи, такие как оптоволокно, медные кабели или другие провода, для передачи информации между удаленными устройствами и диспетчерским центром.</p></li><li><p>Беспроводная телемеханика: Использует беспроводные каналы связи, такие как радиосвязь, сотовая связь или спутниковая связь, для передачи данных. Беспроводная телемеханика особенно полезна в удаленных или труднодоступных местах.</p></li><li><p>Гибридная телемеханика: Использует комбинацию проводных и беспроводных каналов связи для оптимальной передачи данных, учитывая особенности конкретной системы.</p></li></ol><p>Системы телемеханики существенно повышают эффективность, надежность и безопасность управления электроэнергетическими системами, а также позволяют операторам быстро реагировать на изменения и принимать управленческие решения в режиме реального времени.</p></div>"],["Виды систем телемеханики, системы ТМ по линиям электропередач.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Виды систем телемеханики в области электроэнергетики включают различные технические средства и технологии, которые предназначены для удаленного контроля, управления и передачи данных в электроэнергетических системах. Одним из подразделов телемеханики являются системы ТМ (телемеханики) по линиям электропередач.</p><p>Виды систем телемеханики:</p><ol><li><p>Системы ТМ для удаленного управления оборудованием: Эти системы предназначены для дистанционного управления различным электрическим оборудованием, таким как выключатели, регуляторы, реле защиты и другие устройства. Операторы диспетчерского центра могут открывать, закрывать или регулировать параметры устройств удаленно.</p></li><li><p>Системы ТМ для сбора и передачи данных: Эти системы предназначены для сбора информации о параметрах работы электроэнергетических объектов, таких как напряжение, ток, мощность, частота и другие параметры. Данные собираются и передаются в реальном времени операторам диспетчерского центра для мониторинга и анализа работы системы.</p></li><li><p>Системы ТМ для автоматического управления и защиты: Эти системы автоматически реагируют на изменения в работе электрических сетей и выполняют соответствующие действия для предотвращения аварийных ситуаций или восстановления работы системы после сбоев.</p></li></ol><p>Системы ТМ по линиям электропередач:\\nСистемы ТМ по линиям электропередач специализируются на удаленном контроле и управлении процессами на электрических линиях передачи энергии. Они обеспечивают мониторинг состояния линий, обнаружение аварийных ситуаций, а также предпринимают меры для поддержания стабильности и надежности передачи электроэнергии.</p><p>Некоторые из технологий и систем телемеханики по линиям электропередач включают:</p><ol><li><p>Телемеханика на высоковольтных линиях: Используется для мониторинга и управления высоковольтными линиями передачи энергии. Включает системы удаленного контроля выключателей, регулировки нагрузки и реле защиты.</p></li><li><p>Комплексы оптической телемеханики: Используют оптоволоконные кабели для передачи данных между различными пунктами контроля и управления на линиях передачи.</p></li><li><p>Системы мониторинга состояния линий передачи: Включают различные сенсоры и измерительные устройства, которые предоставляют информацию о температуре, вибрации, прогибе и других параметрах линий передачи электроэнергии.</p></li><li><p>Системы ТМ для аварийной защиты линий передачи: Автоматически реагируют на возникающие аварийные ситуации на линиях передачи, например, срабатывают реле защиты для быстрого отключения участка сети при обрыве или коротком замыкании.</p></li></ol><p>Системы ТМ по линиям электропередач играют важную роль в обеспечении безопасной и эффективной передачи электроэнергии, а также в оперативном реагировании на возможные аварийные ситуации. Они улучшают надежность и стабильность работы электрических систем и позволяют операторам эффективно управлять сетью.</p></div>"],["Системы ТМ TM-800, MKT, SMART-КП.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Системы телемеханики TM-800, MKT и SMART-КП являются примерами технических средств, используемых в области электроэнергетики и электротехники для удаленного контроля, управления и передачи данных в электрических сетях. Давайте рассмотрим каждую систему более подробно:</p><ol><li><p>Система телемеханики TM-800:\\nTM-800 - это система телемеханики, разработанная для удаленного контроля и управления оборудованием в электроэнергетических системах. Эта система позволяет операторам диспетчерского центра мониторить состояние и параметры различных устройств на подстанциях и линиях электропередачи. TM-800 обеспечивает быструю передачу информации в режиме реального времени и позволяет операторам принимать оперативные управленческие решения.</p></li><li><p>Система телемеханики MKT:\\nMKT - это система телемеханики, предназначенная для удаленного управления и мониторинга объектов энергетической инфраструктуры, таких как электрические подстанции, выключатели, регуляторы и другие устройства. MKT обеспечивает возможность удаленного включения и выключения оборудования, а также контроля за его работой. Система MKT имеет высокую надежность и применяется для автоматизации процессов управления в электроэнергетике.</p></li><li><p>Система телемеханики SMART-КП:\\nSMART-КП (Система Мониторинга, Автоматики, Релейной защиты, Телемеханики) - это комплексная система, объединяющая множество технических средств и программного обеспечения для управления и контроля различных процессов в электрических сетях. SMART-КП включает в себя средства автоматизации, релейной защиты, телемеханики, мониторинга и диспетчеризации. Она предоставляет операторам полную информацию о состоянии и работе электрооборудования и позволяет эффективно управлять энергосистемами.</p></li></ol><p>Каждая из этих систем телемеханики представляет собой современные технические решения, спроектированные для повышения надежности, эффективности и безопасности работы электроэнергетических систем. Они активно применяются в сфере электроэнергетики для автоматизации процессов и оперативного управления сетями и устройствами.</p></div>"],["Автоматизированные системы управления в электроэнергетике.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматизированные системы управления (АСУ) в электроэнергетике представляют собой комплексные системы, основанные на использовании современных информационных технологий и компьютерных средств, которые предназначены для автоматизации процессов управления и контроля в электроэнергетических системах. Они играют ключевую роль в обеспечении эффективности, надежности и безопасности работы электрических сетей и устройств. АСУ в электроэнергетике включают различные подсистемы и модули, обеспечивающие автоматизацию управления в различных уровнях энергетической инфраструктуры.</p><p>Некоторые из ключевых компонентов и функций автоматизированных систем управления в электроэнергетике включают:</p><ol><li><p>Системы диспетчерского управления (СДУ): Эти системы предназначены для централизованного контроля и управления работой электроэнергетических сетей. Операторы диспетчерского центра могут мониторить параметры системы в режиме реального времени, принимать оперативные решения и выполнять команды удаленного управления.</p></li><li><p>Системы автоматической регулировки и управления (САРУ): Эти системы автоматически регулируют параметры электроэнергетической системы, такие как напряжение, частота, мощность, с целью обеспечения стабильной и надежной работы.</p></li><li><p>Системы аварийной защиты и автоматического восстановления (САЗ и САВ): Эти системы автоматически реагируют на аварийные ситуации, выполняя защитные мероприятия для предотвращения распространения аварии. После устранения причины аварии, системы автоматического восстановления восстанавливают работу системы в нормальный режим.</p></li><li><p>Системы телемеханики: Эти системы предоставляют средства удаленного контроля и управления оборудованием в электроэнергетических системах. Операторы могут дистанционно управлять выключателями, регуляторами, реле защиты и другими устройствами на различных уровнях энергетической инфраструктуры.</p></li><li><p>Системы мониторинга и диагностики: Эти системы предоставляют операторам информацию о состоянии оборудования и сети, а также выполняют функции прогнозирования и диагностики возможных проблем.</p></li></ol><p>Автоматизированные системы управления в электроэнергетике позволяют повысить эффективность работы системы, снизить затраты на эксплуатацию, улучшить надежность энергосистем и оперативно реагировать на изменения в энергетической инфраструктуре. Они играют важную роль в обеспечении стабильной и бесперебойной работы электроэнергетических систем и повышении уровня автоматизации в электроэнергетике.</p></div>"],["Типы и виды АСУ, задачи, решаемые АСУ на предприятиях электроэнергетики.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматизированные системы управления (АСУ) в электроэнергетике выполняют ряд важных задач, связанных с диспетчерским и технологическим управлением. В зависимости от функциональности и области применения, они могут быть классифицированы на несколько типов и видов. Некоторые из них включают:</p><ol><li><p>Системы диспетчерского управления:</p><ul><li>Системы автоматизированного диспетчерского управления (САДУ) для оперативного управления производством, передачей и распределением электроэнергии.</li><li>Системы мобильного диспетчерского управления для оперативного реагирования на аварии и нештатные ситуации.</li></ul></li><li><p>Системы технологического управления:</p><ul><li>Системы автоматизированного технологического управления для контроля и управления процессами в энергосистеме, такими как нагрузка, генерация, переключение оборудования и др.</li><li>Системы управления дистанционными объектами, которые позволяют мониторить и управлять удаленными устройствами, например, выключателями или регуляторами.</li></ul></li><li><p>Системы управления по прогнозу и оптимизации:</p><ul><li>Системы прогнозирования нагрузок и производства для планирования режима работы электроэнергетической системы.</li><li>Системы оптимизации работы энергосистемы с учетом стоимости производства, передачи и распределения электроэнергии.</li></ul></li><li><p>Системы аварийной защиты и безопасности:</p><ul><li>Автоматические системы защиты и отключения при возникновении аварийных ситуаций для предотвращения повреждения оборудования и обеспечения безопасности персонала.</li></ul></li><li><p>Системы управления качеством электроэнергии:</p><ul><li>Системы контроля и управления параметрами качества электроэнергии, такими как напряжение, частота и гармоники.</li></ul></li><li><p>Системы управления энергоэффективностью:</p><ul><li>Системы мониторинга и управления потреблением электроэнергии для повышения энергоэффективности предприятий.</li></ul></li></ol><p>Задачи, решаемые АСУ на предприятиях электроэнергетики, включают обеспечение стабильной и надежной работы энергосистемы, оптимизацию использования ресурсов, минимизацию потерь электроэнергии, предотвращение аварийных ситуаций, оперативное реагирование на изменения в нагрузке и технологических процессах, обеспечение качества электроэнергии, повышение энергоэффективности и общей производительности предприятия.</p></div>"],["SCADA-системы, характеристика, назначение.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>SCADA (Supervisory Control And Data Acquisition) – это системы диспетчерского управления и сбора данных, которые играют важную роль в сфере электроэнергетики и других промышленных отраслях. Они представляют собой комплекс программно-аппаратных средств, позволяющих операторам мониторить и управлять технологическими процессами и оборудованием в режиме реального времени.</p><p>Характеристики SCADA-систем:</p><ol><li><p>Визуализация: SCADA-системы обеспечивают визуализацию процессов и объектов в виде графических интерфейсов. Это позволяет операторам наглядно отслеживать работу оборудования и производственных процессов.</p></li><li><p>Удаленный доступ: С помощью SCADA-систем можно получать доступ к удаленным объектам и системам через сети связи, что облегчает мониторинг и управление распределенными объектами.</p></li><li><p>Сбор данных: SCADA-системы осуществляют непрерывный сбор данных с различных датчиков и устройств, которые затем обрабатываются и анализируются.</p></li><li><p>Контроль и управление: SCADA-системы предоставляют возможность операторам производить контроль и управление оборудованием и процессами. Операторы могут выполнять различные операции, такие как включение/выключение оборудования, изменение параметров и т.д.</p></li><li><p>Архивирование данных: SCADA-системы сохраняют и архивируют данные о производственных процессах, что позволяет проводить анализ производственной деятельности и выявлять тенденции.</p></li><li><p>Автоматизация: SCADA-системы позволяют реализовывать автоматизированные сценарии и стратегии управления на основе заданных условий и правил.</p></li></ol><p>Назначение SCADA-систем:</p><ol><li><p>Мониторинг и управление энергосистемами: SCADA-системы применяются для мониторинга и управления работой энергосистем, электростанций, подстанций, линий передачи и распределительных сетей.</p></li><li><p>Промышленные процессы: В промышленности SCADA-системы используются для контроля и управления технологическими процессами, производственным оборудованием и системами автоматизации.</p></li><li><p>Мониторинг среды: SCADA-системы применяются для мониторинга параметров окружающей среды, таких как уровень загрязнения воздуха, уровень воды и другие экологические показатели.</p></li><li><p>Транспортные системы: В области транспорта SCADA-системы используются для управления и контроля транспортными сетями, например, метрополитенами, железными дорогами и автоматизированными системами управления трафиком.</p></li><li><p>Газо- и нефтепроводы: SCADA-системы применяются для мониторинга и управления транспортировкой газа и нефти по трубопроводам.</p></li></ol><p>SCADA-системы позволяют повысить эффективность работы предприятий, обеспечивают оперативное реагирование на изменения и аварийные ситуации, а также повышают уровень безопасности и надежности технологических процессов.</p></div>"],["ОИК-основа АСДУ, функции и требования предъявляемые к ОИК.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>ОИК (Оперативно-информационный комплекс) - это основа АСДУ (автоматизированных систем диспетчерского управления). ОИК представляет собой комплекс технических средств и программного обеспечения, которые используются для оперативного управления и контроля технологическими процессами в электроэнергетике.</p><p>Функции ОИК в АСДУ:</p><ol><li><p>Мониторинг: ОИК осуществляет непрерывный мониторинг состояния электроэнергетической системы, включая данные о нагрузках, напряжении, частоте, токах, и других параметрах.</p></li><li><p>Управление: ОИК предоставляет возможность оперативного управления оборудованием и технологическими процессами, такими как включение/отключение генераторов, регулирование мощности, переключение схем и т.д.</p></li><li><p>Контроль: ОИК осуществляет контроль за выполнением заданных параметров и режимов работы электроэнергетической системы и автоматически реагирует на нештатные ситуации.</p></li><li><p>Архивирование данных: ОИК сохраняет и архивирует данные о работе системы на различных временных интервалах, что позволяет проводить анализ и оптимизацию производственных процессов.</p></li><li><p>Предоставление информации: ОИК предоставляет операторам информацию о состоянии системы в удобной форме, такой как графики, диаграммы и таблицы.</p></li><li><p>Автоматическая защита: ОИК выполняет функцию автоматической защиты системы, предотвращая аварийные ситуации и повреждение оборудования.</p></li></ol><p>Требования, предъявляемые к ОИК в АСДУ:</p><ol><li><p>Надежность: ОИК должен обеспечивать высокую степень надежности работы, чтобы минимизировать вероятность сбоев и ошибок.</p></li><li><p>Безопасность: ОИК должен быть защищен от несанкционированного доступа и предоставлять средства для обеспечения безопасности электроэнергетической системы.</p></li><li><p>Быстродействие: ОИК должен оперативно обрабатывать данные и предоставлять информацию в режиме реального времени для операторов.</p></li><li><p>Масштабируемость: ОИК должен быть способен масштабироваться для работы с различными уровнями системы – от отдельных объектов до всей электроэнергетической системы.</p></li><li><p>Гибкость и адаптивность: ОИК должен быть способен адаптироваться к изменениям в структуре и конфигурации системы, а также поддерживать различные стандарты связи и протоколы.</p></li><li><p>Удобный интерфейс: ОИК должен обладать удобным и интуитивно понятным интерфейсом для работы операторов, что облегчит их задачи и повысит эффективность управления.</p></li></ol><p>Использование ОИК в АСДУ позволяет улучшить оперативное управление электроэнергетическими системами, обеспечить стабильную и надежную работу оборудования, а также повысить эффективность производственных процессов.</p></div>"]]}'),Gn=JSON.parse('{"Введение в программную инженерию":[["Введение в программную инженерию. Понятие ПИ.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Программная инженерия (ПИ) - это область знаний и практическая деятельность, связанная с разработкой и поддержкой программного обеспечения. Понятие программной инженерии охватывает процессы и методы, которые применяются при создании программных продуктов, а также управление жизненным циклом программных систем.</p><p>Этот подход к разработке программного обеспечения включает в себя систематические методы, техники и инструменты, которые позволяют разработчикам эффективно и качественно создавать программы, учитывая различные аспекты, такие как требования заказчиков, проектирование, тестирование, сопровождение и обновление.</p><p>Важными аспектами программной инженерии являются коллективная работа, использование стандартов и практик, а также стремление к повторному использованию кода и минимизации ошибок через систематические подходы к разработке и тестированию. Это помогает обеспечить надежность, масштабируемость и поддерживаемость программных продуктов в долгосрочной перспективе.</p></div>"],["Стандарты и методологии разработки программного обеспечения. Свойства программного обеспечения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Стандарты и методологии разработки программного обеспечения (ПО) являются важными инструментами, которые обеспечивают структурированный и систематический подход к созданию программных продуктов. Они помогают улучшить качество, надежность и эффективность разработки, а также способствуют снижению рисков и затрат.</p><p>Стандарты разработки ПО определяют правила, нормы и рекомендации, которые разработчики должны соблюдать в процессе создания программных продуктов. Это могут быть стандарты на уровне компании или отраслевые международные стандарты. Например, стандарт ISO/IEC 12207 определяет процессы жизненного цикла программного обеспечения, включая его разработку, тестирование, управление конфигурацией и сопровождение.</p><p>Методологии разработки ПО представляют собой наборы процедур, инструментов и правил, которые определяют, каким образом будет проходить процесс разработки. К ним относятся Agile (гибкая разработка), Waterfall (каскадная модель), Scrum, и другие. Каждая из методологий имеет свои преимущества и подходит для различных типов проектов.</p><p>Свойства программного обеспечения обусловливают его качество и способность удовлетворить потребности пользователей. Вот некоторые из основных свойств программного обеспечения:</p><ol><li><p>Функциональность: Способность программы выполнять свои предназначенные задачи и функции согласно требованиям.</p></li><li><p>Надежность: Способность программы работать без сбоев и ошибок в течение определенного периода времени (uptime).</p></li><li><p>Эффективность: Уровень ресурсоэффективности программы, такой как использование памяти и процессорного времени.</p></li><li><p>Удобство использования: Простота взаимодействия пользователя с программой и понимания ее интерфейса.</p></li><li><p>Устойчивость к изменениям: Способность программы адаптироваться к изменениям в требованиях и окружающей среде.</p></li><li><p>Поддерживаемость: Легкость поддержки и обновления программного обеспечения.</p></li><li><p>Переносимость: Возможность программы работать на различных платформах и операционных системах без изменений.</p></li></ol><p>Эти свойства являются основой для оценки качества программного обеспечения и определяют его ценность для пользователей и заказчиков.</p></div>"],["Классические процессы и модели.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Классические процессы и модели в программной инженерии представляют собой подходы к разработке программного обеспечения, которые были разработаны в прошлом и оказали значительное влияние на индустрию. Вот некоторые из них:</p><ol><li><p>Модель Waterfall (Каскадная модель):\\nМодель Waterfall - одна из самых старых и простых моделей разработки ПО. Она предполагает последовательное выполнение этапов разработки: определение требований, проектирование, реализация, тестирование и сопровождение. Каждый этап завершается перед переходом к следующему. Такой линейный подход может быть эффективен для маленьких проектов с четкими и стабильными требованиями, но неэффективен для больших и сложных проектов, где изменения требований более вероятны.</p></li><li><p>Модель V-образ (V-модель):\\nМодель V-образ - это улучшенная версия каскадной модели. Каждый этап разработки имеет соответствующий этап тестирования. Таким образом, сразу после завершения этапа разработки, выполняется этап соответствующего тестирования. Это позволяет своевременно выявлять ошибки и обеспечивать более надежное программное обеспечение.</p></li><li><p>Модель спирального развития:\\nМодель спирального развития - это итеративная модель, которая объединяет в себе элементы каскадной модели и итерационного подхода. Проект проходит чередующиеся циклы разработки, включающие планирование, риски, разработку, тестирование и оценку. Этот подход позволяет быстрее реагировать на изменения и учитывать обратную связь от пользователей.</p></li><li><p>Методология Agile (Гибкая разработка):\\nAgile - это семейство методологий разработки ПО, которые акцентируют внимание на гибкости и адаптивности. Agile-подходы включают Scrum, Kanban, XP (экстремальное программирование) и другие. Основной принцип Agile заключается в частых итерациях разработки с активным участием заказчика и команды разработчиков. Этот подход позволяет быстрее реагировать на изменения требований и более гибко управлять проектом.</p></li></ol><p>Каждая из этих классических процессов и моделей имеет свои преимущества и ограничения. Выбор конкретной модели зависит от характера проекта, его объема, сложности, требований и специфических потребностей команды разработчиков и заказчика. Применение адекватной модели разработки ПО помогает улучшить качество продукта, управление рисками и сроки разработки.</p></div>"],["Основные компоненты технологии создания программного продукта.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные компоненты технологии создания программного продукта включают в себя различные этапы и инструменты, которые используются в процессе разработки программного обеспечения. Вот основные компоненты:</p><ol><li><p>Требования:\\nЭтот компонент представляет собой процесс сбора, анализа и документирования требований к программному продукту. Здесь определяются функциональные и нефункциональные требования, которые должны быть учтены в процессе разработки.</p></li><li><p>Проектирование:\\nПроектирование - это этап, на котором разрабатывается архитектура программного продукта. Здесь определяются структура, компоненты, интерфейсы, а также взаимодействие между ними. Проектирование позволяет создать план, который будет использоваться в процессе разработки программы.</p></li><li><p>Реализация (кодирование):\\nЭтот этап представляет собой создание фактического исходного кода программы на основе разработанных архитектурных решений и спецификаций. Разработчики пишут код на выбранном языке программирования и используют различные инструменты для обеспечения качества кода.</p></li><li><p>Тестирование:\\nТестирование - это процесс проверки программного продукта на соответствие требованиям и выявление ошибок и дефектов. Тестирование включает различные виды тестов, такие как модульное тестирование, интеграционное тестирование, системное тестирование и приемочное тестирование.</p></li><li><p>Внедрение и сопровождение:\\nЭтот этап связан с развертыванием программного продукта и его внедрением в реальную рабочую среду. После внедрения следует сопровождение, которое включает поддержку и обновление программного обеспечения, а также исправление выявленных ошибок в процессе эксплуатации.</p></li><li><p>Управление конфигурацией:\\nУправление конфигурацией - это процесс контроля и учета всех элементов, входящих в программный продукт, включая исходный код, документацию, библиотеки и т.д. Это помогает обеспечить целостность и возможность отслеживания изменений в продукте.</p></li><li><p>Документация:\\nДокументация является важным компонентом, который описывает процессы разработки, архитектуру, использование и обслуживание программного продукта. Хорошо составленная документация упрощает сопровождение и поддержку продукта в долгосрочной перспективе.</p></li></ol><p>Все эти компоненты технологии создания программного продукта взаимосвязаны и важны для успешного завершения проекта. Комбинация правильных методологий и инструментов позволяет эффективно разрабатывать качественное программное обеспечение, соответствующее требованиям заказчика.</p></div>"],["Модель технологического процесса создания программного продукта.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Модель технологического процесса создания программного продукта обычно описывает последовательность шагов, которые выполняются в процессе разработки программного обеспечения. Одной из наиболее распространенных моделей технологического процесса является \\"модель жизненного цикла программного обеспечения\\". Эта модель охватывает различные фазы разработки ПО. Вот основные этапы модели жизненного цикла программного обеспечения:</p><ol><li><p>Анализ и сбор требований:\\nНа этом этапе определяются требования заказчика к программному продукту. Это включает сбор и анализ функциональных и нефункциональных требований, а также установление ограничений и возможностей продукта.</p></li><li><p>Проектирование:\\nНа этапе проектирования создается общая архитектура программного продукта. Здесь определяются компоненты, структура, интерфейсы и взаимосвязи между ними.</p></li><li><p>Реализация (кодирование):\\nНа этом этапе разработчики создают фактический исходный код программы, руководствуясь требованиями и архитектурой, определенными на предыдущих этапах.</p></li><li><p>Тестирование:\\nПосле завершения разработки программного продукта, он проходит через различные виды тестирования, чтобы обеспечить соответствие требованиям и выявить и исправить ошибки и дефекты.</p></li><li><p>Внедрение и сопровождение:\\nНа этапе внедрения программный продукт разворачивается и внедряется в реальную рабочую среду. После внедрения следует сопровождение, которое включает поддержку и обновление программного обеспечения.</p></li><li><p>Управление конфигурацией и документация:\\nВ процессе разработки ПО важно управлять конфигурацией, чтобы отслеживать изменения и обеспечивать целостность продукта. Также, составление документации, описывающей процессы разработки и работу программного продукта, является важным компонентом.</p></li></ol><p>Важно отметить, что существует множество моделей технологического процесса разработки ПО, таких как Agile, Spiral, V-модель и другие. Выбор конкретной модели зависит от характеристик проекта, его размера, сложности, требований и предпочтений команды разработчиков и заказчика.</p></div>"],["Методология моделирования IDEF0.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Методология моделирования IDEF0 (Integration Definition for Function Modeling) представляет собой инструмент для функционального моделирования и анализа систем. Она была разработана в США в рамках программы IDEF (Integration Definition for Function Modeling) в начале 1980-х годов и стала широко используемой в инженерии и управлении проектами.</p><p>Основной целью методологии IDEF0 является предоставление формального и универсального способа описания функциональных характеристик системы или процесса. Она позволяет строить графические модели, которые иллюстрируют структуру и связи между функциями системы.</p><p>Основные характеристики методологии IDEF0:</p><ol><li><p>Диаграммы IDEF0:\\nМетодология использует блок-схемы для представления функциональных моделей. Диаграммы IDEF0 состоят из блоков, стрелок и текстовых обозначений, которые помогают визуализировать структуру и взаимосвязи функций системы.</p></li><li><p>Функциональный подход:\\nIDEF0 сосредотачивается на функциональных характеристиках системы или процесса. Это позволяет выделить ключевые элементы и процессы, улучшить понимание системы и производительности.</p></li><li><p>Иерархическая структура:\\nМодели, созданные с помощью IDEF0, могут быть организованы в иерархическую структуру, что упрощает анализ и понимание сложных систем.</p></li><li><p>Системный анализ и оптимизация:\\nМетодология IDEF0 позволяет проводить анализ функциональных моделей, выявлять узкие места и оптимизировать процессы.</p></li><li><p>Стандартизация:\\nIDEF0 является стандартизированным методом моделирования, что обеспечивает единый подход к описанию функциональных характеристик системы или процесса.</p></li></ol><p>Методология моделирования IDEF0 находит широкое применение в различных областях, таких как управление проектами, бизнес-процессы, системный анализ, разработка программного обеспечения и другие сферы, где важна четкая и структурированная модель функциональности системы или процесса.</p></div>"],["Объектно-ориентированное моделирование.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Объектно-ориентированное моделирование (ООМ) - это подход к анализу, проектированию и разработке программного обеспечения, основанный на парадигме объектно-ориентированного программирования (ООП). ООМ позволяет структурировать систему в виде взаимосвязанных объектов, которые взаимодействуют друг с другом для выполнения функций и предоставления услуг.</p><p>Основные принципы и характеристики объекто-ориентированного моделирования:</p><ol><li><p>Объекты и классы:\\nОсновной элемент ООМ - это объекты и классы. Класс - это шаблон или чертеж для создания объектов, которые обладают определенными свойствами (полями) и поведением (методами). Объект - это экземпляр класса, который может принимать значения своих полей и выполнять методы.</p></li><li><p>Инкапсуляция:\\nИнкапсуляция означает скрытие внутренней реализации объектов и предоставление доступа только к необходимому функционалу через публичные методы. Это обеспечивает контролируемый доступ к данным и поведению объектов.</p></li><li><p>Наследование:\\nНаследование позволяет создавать новые классы на основе существующих, унаследовав их свойства и методы. Это позволяет создавать иерархии классов, что способствует повторному использованию кода и структурированию системы.</p></li><li><p>Полиморфизм:\\nПолиморфизм позволяет объектам одного класса проявлять различное поведение на основе контекста. Это может быть реализовано через перегрузку методов, интерфейсы и виртуальные методы.</p></li><li><p>Абстракция:\\nАбстракция позволяет выделять сущности и функциональность системы, которые имеют значение в контексте анализа и проектирования, игнорируя детали реализации. Абстракция помогает создавать более понятные и удобные модели системы.</p></li></ol><p>Преимущества использования объектно-ориентированного моделирования включают повышение читаемости, поддерживаемости и расширяемости кода, а также облегчение сопровождения и масштабирования проектов. ООМ также способствует повторному использованию кода и упрощению процесса разработки. Этот подход широко применяется в современной разработке программного обеспечения и считается одним из важных методов инженерии программного обеспечения.</p></div>"],["Case-технологии создания программного продукта.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Case-технологии (Computer-Aided Software Engineering) - это инструменты и методы, которые предназначены для автоматизации различных этапов процесса разработки программного обеспечения. Они помогают программистам и инженерам улучшить производительность, качество и эффективность разработки программного продукта.</p><p>Вот некоторые основные характеристики и применение Case-технологий:</p><ol><li><p>Моделирование и анализ: Case-инструменты позволяют создавать графические модели для анализа требований, проектирования архитектуры и визуализации процессов разработки. Это помогает лучше понять структуру и взаимосвязи в системе.</p></li><li><p>Кодогенерация: Некоторые Case-технологии предоставляют возможность автоматически генерировать код на основе созданных моделей, что позволяет существенно сократить время разработки и снизить вероятность ошибок.</p></li><li><p>Управление требованиями: Case-системы позволяют эффективно управлять требованиями, их изменениями и версиями, что упрощает процесс коммуникации с заказчиками.</p></li><li><p>Управление конфигурацией: Case-технологии также поддерживают управление конфигурацией, что позволяет контролировать изменения в исходном коде и других артефактах проекта.</p></li><li><p>Тестирование: Некоторые Case-инструменты обеспечивают поддержку автоматизации тестирования, что упрощает создание тестовых сценариев и улучшает качество тестирования.</p></li><li><p>Управление проектом: Case-технологии также предоставляют функциональности для управления проектом, включая планирование, распределение задач, контроль прогресса и оценку рисков.</p></li></ol><p>Применение Case-технологий в разработке программного обеспечения улучшает производительность команды разработчиков, облегчает совместную работу и позволяет сосредоточиться на более творческих и аналитических задачах, а также снизить вероятность ошибок. Однако следует отметить, что Case-технологии не заменяют умения и опыт разработчиков, а лишь являются поддерживающими инструментами для оптимизации процесса создания программного продукта.</p></div>"]],"Дискретная математика":[["Определение понятия множества. Способы задания множества. Конечные и бесконечные множества. Пустое множество. Равенство множеств.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Множество - это математический объект, который представляет собой совокупность различных элементов, объединенных общим свойством или характеристикой. Элементы множества могут быть числами, буквами, объектами или другими объектами.</p><p>Способы задания множества:</p><ol><li><p>Перечисление элементов: Множество может быть задано перечислением всех его элементов в фигурных скобках. Например, множество натуральных чисел до 5: {1, 2, 3, 4, 5}.</p></li><li><p>Описание свойств: Множество может быть определено через описание свойств его элементов. Например, множество простых чисел: {x | x - простое число}.</p></li><li><p>Диапазон значений: В числовых множествах можно задать диапазон значений. Например, множество натуральных чисел до 10: {x | x ∈ N, 1 ≤ x ≤ 10}.</p></li></ol><p>Конечное множество - это множество, содержащее определенное количество элементов, которое может быть перечислено. Например, множество {1, 2, 3, 4, 5} является конечным.</p><p>Бесконечное множество - это множество, содержащее бесконечное количество элементов и его нельзя перечислить. Например, множество всех натуральных чисел {1, 2, 3, ...} является бесконечным.</p><p>Пустое множество (обозначается как ∅) - это множество, не содержащее ни одного элемента. Оно является частным случаем конечного множества.</p><p>Равенство множеств - это отношение между двумя множествами, когда они содержат одни и те же элементы. Множества A и B равны, если для всех элементов x выполняется условие: x ∈ A тогда и только тогда, когда x ∈ B. Обозначается как A = B.</p></div>"],["Понятие подмножества. Количество k–элементных подмножеств множества из n элементов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Подмножество - это множество, элементы которого являются частью другого множества. Формально, множество A является подмножеством множества B (обозначается как A ⊆ B), если каждый элемент A также присутствует в B.</p><p>Количество k-элементных подмножеств множества из n элементов можно вычислить с помощью сочетаний. Комбинаторно, число k-элементных подмножеств (комбинаций) из множества из n элементов вычисляется по формуле сочетаний:</p><p>C(n, k) = n! / (k! * (n-k)!)</p><p>Где:\\nn - общее количество элементов в множестве,\\nk - количество элементов в подмножестве,\\n! - обозначает факториал.</p><p>Формула сочетаний позволяет определить количество различных комбинаций, которые можно сформировать, выбирая k элементов из множества из n элементов без повторений и без учета порядка.</p><p>Например, если у нас есть множество из 5 элементов {a, b, c, d, e}, и мы хотим найти количество 3-элементных подмножеств, мы можем использовать формулу сочетаний:</p><p>C(5, 3) = 5! / (3! * (5-3)!) = 10</p><p>Таким образом, в данном случае у нас будет 10 различных 3-элементных подмножеств для данного множества. Это подмножества: {a, b, c}, {a, b, d}, {a, b, e}, {a, c, d}, {a, c, e}, {a, d, e}, {b, c, d}, {b, c, e}, {b, d, e}, {c, d, e}.</p></div>"],["Операции над множествами. Универсальное множество. Дополнение множества. Диаграмма Эйлера-Венна.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Операции над множествами - это действия, которые позволяют создавать новые множества на основе данных исходных множеств. Основные операции над множествами включают:</p><ol><li><p>Объединение (обозначается как ∪): Объединение двух множеств A и B - это множество, которое содержит все элементы из обоих множеств. Формально, A ∪ B = {x | x ∈ A или x ∈ B}.</p></li><li><p>Пересечение (обозначается как ∩): Пересечение двух множеств A и B - это множество, которое содержит только те элементы, которые принадлежат обоим множествам. Формально, A ∩ B = {x | x ∈ A и x ∈ B}.</p></li><li><p>Разность (обозначается как \\\\ или -): Разность двух множеств A и B - это множество, которое содержит все элементы из A, но не содержит элементы из B. Формально, A \\\\ B = {x | x ∈ A и x ∉ B}.</p></li><li><p>Дополнение (обозначается как \' или с чертой сверху): Дополнение множества A - это множество, которое содержит все элементы универсального множества U, но не содержит элементы из A. Формально, A\' = {x | x ∈ U и x ∉ A}.</p></li></ol><p>Универсальное множество - это множество, которое содержит все возможные элементы, используемые в рассматриваемой задаче или контексте. Обозначается как U.</p><p>Диаграмма Эйлера-Венна - это графическое представление множеств и их операций с использованием пересекающихся кругов. Каждый круг представляет множество, а область пересечения кругов показывает результат операции между множествами.</p><p>Например, если у нас есть множества A = {1, 2, 3} и B = {3, 4, 5}, то их объединение (A ∪ B) будет {1, 2, 3, 4, 5}, пересечение (A ∩ B) будет {3}, а разность (A \\\\ B) будет {1, 2}.</p><p>Диаграмма Эйлера-Венна покажет эти операции следующим образом:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">   <span class=\\"hljs-selector-tag\\">A</span>              <span class=\\"hljs-selector-tag\\">B</span>\\n  ┌───┐        ┌───┐\\n  │ <span class=\\"hljs-number\\">1</span> │        │ <span class=\\"hljs-number\\">3</span> │\\n  ├───┤        ├───┤\\n  │ <span class=\\"hljs-number\\">2</span> │        │ <span class=\\"hljs-number\\">4</span> │\\n  ├───┤        ├───┤\\n  │ <span class=\\"hljs-number\\">3</span> │        │ <span class=\\"hljs-number\\">5</span> │\\n  └───┘        └───┘\\n\\n   <span class=\\"hljs-selector-tag\\">A</span> ∪ <span class=\\"hljs-selector-tag\\">B</span>              <span class=\\"hljs-selector-tag\\">A</span> ∩ <span class=\\"hljs-selector-tag\\">B</span>            <span class=\\"hljs-selector-tag\\">A</span> \\\\ <span class=\\"hljs-selector-tag\\">B</span>\\n  ┌───────┐        ┌───┐        ┌───────┐\\n  │   <span class=\\"hljs-number\\">1</span>   │        │ <span class=\\"hljs-number\\">3</span> │        │   <span class=\\"hljs-number\\">1</span>   │\\n  ├───────┤        ├───┤        ├───────┤\\n  │   <span class=\\"hljs-number\\">2</span>   │        │   │        │   <span class=\\"hljs-number\\">2</span>   │\\n  ├───────┤        ├───────┤    ├───────┤\\n  │   <span class=\\"hljs-number\\">3</span>   │        │   <span class=\\"hljs-number\\">3</span>   │    │       │\\n  ├───────┤        ├───────┤    ├───────┤\\n  │   <span class=\\"hljs-number\\">4</span>   │        │       │    │       │\\n  ├───────┤        ├───────┤    ├───────┤\\n  │   <span class=\\"hljs-number\\">5</span>   │        │       │    │       │\\n  └───────┘        └───────┘    └───────┘\\n</code></div></div></pre><p>Таким образом, диаграмма Эйлера-Венна помогает визуализировать результаты операций над множеств</p></div>"],["Прямое (декартово) произведение множеств. Определение, формула.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Прямое (декартово) произведение множеств - это операция, которая позволяет объединить все возможные упорядоченные пары элементов из двух множеств. Если у нас есть два множества A и B, то прямое произведение обозначается как A × B и представляет собой новое множество, состоящее из всех упорядоченных пар (a, b), где a ∈ A и b ∈ B.</p><p>Формально, прямое произведение множеств A и B определяется следующим образом:</p><p>A × B = {(a, b) | a ∈ A и b ∈ B}</p><p>Здесь (a, b) - упорядоченная пара, где a является элементом из множества A, а b - элементом из множества B.</p><p>Например, если у нас есть два множества A = {1, 2} и B = {3, 4}, то их прямое произведение A × B будет следующим:</p><p>A × B = {(1, 3), (1, 4), (2, 3), (2, 4)}</p><p>Таким образом, прямое произведение множеств позволяет создать новое множество из всех возможных упорядоченных пар элементов из исходных множеств. Количество элементов в прямом произведении равно произведению количества элементов в каждом из исходных множеств. В примере выше, у нас было 2 элемента в множестве A и 2 элемента в множестве B, что дало нам 2 * 2 = 4 упорядоченных пар в прямом произведении.</p></div>"],["Упорядоченное множество, определение, число упорядоченных множеств и Теоретико-множественное определение функции алгебры логики (ФАЛ).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><ol><li><p>Упорядоченное множество - это множество, в котором определено отношение \\"меньше или равно\\" (≤), которое устанавливает частичный порядок на элементах множества. В упорядоченном множестве каждая пара элементов сравнивается по отношению ≤, и каждый элемент может быть сравним только с другими элементами.</p></li><li><p>Число упорядоченных множеств - количество упорядоченных множеств зависит от количества элементов в множестве и типа упорядочивания. Для конечных множеств число упорядоченных множеств можно вычислить с помощью факториала. Например, для множества из n элементов число упорядоченных множеств будет n!.</p></li><li><p>Теоретико-множественное определение функции алгебры логики (ФАЛ) - Функция алгебры логики - это функция, которая принимает логические значения (истина или ложь) в качестве аргументов и возвращает логические значения в качестве результата. Функции алгебры логики могут быть определены на булевых множествах, где значения переменных и результаты функции ограничены значениями \\"истина\\" (1) или \\"ложь\\" (0).</p></li></ol><p>Например, рассмотрим ФАЛ AND (логическое умножение). Операция AND принимает два аргумента и возвращает \\"истина\\" только в том случае, когда оба аргумента равны \\"истина\\", иначе результат будет \\"ложь\\". Таким образом, функция AND может быть определена как:</p><p>AND(0, 0) = 0\\nAND(0, 1) = 0\\nAND(1, 0) = 0\\nAND(1, 1) = 1</p><p>Аналогично, для других логических функций, таких как OR (логическое сложение), NOT (логическое отрицание) и других, можно определить их значения на булевых множествах. Функции алгебры логики имеют важное применение в цифровой логике, математической логике и различных областях информатики.</p></div>"],["Элементарные двуместные булевы функции (при n=2), обозначения, таблицы истинности.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Элементарные двуместные булевы функции при n=2 - это булевы функции, которые принимают два аргумента и возвращают логическое значение (истина или ложь). В данном случае, n=2, значит, у нас два булевых аргумента.</p><p>Существует четыре элементарные двуместные булевы функции, и каждая из них имеет своё обозначение и таблицу истинности:</p><ol><li>Конъюнкция (AND): Обозначается символом \\"∧\\" или \\"*\\", представляет логическое умножение.\\nТаблица истинности:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\"><span class=\\"hljs-selector-tag\\">A</span>  <span class=\\"hljs-selector-tag\\">B</span>  <span class=\\"hljs-selector-tag\\">A</span> ∧ <span class=\\"hljs-selector-tag\\">B</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">1</span>\\n</code></div></div></pre><ol start=\\"2\\"><li>Дизъюнкция (OR): Обозначается символом \\"∨\\" или \\"+\\", представляет логическое сложение.\\nТаблица истинности:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\"><span class=\\"hljs-selector-tag\\">A</span>  <span class=\\"hljs-selector-tag\\">B</span>  <span class=\\"hljs-selector-tag\\">A</span> ∨ <span class=\\"hljs-selector-tag\\">B</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">1</span>\\n</code></div></div></pre><ol start=\\"3\\"><li>Исключающее ИЛИ (XOR): Обозначается символом \\"⊕\\", представляет исключающее логическое сложение.\\nТаблица истинности:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\"><span class=\\"hljs-selector-tag\\">A</span>  <span class=\\"hljs-selector-tag\\">B</span>  <span class=\\"hljs-selector-tag\\">A</span> ⊕ <span class=\\"hljs-selector-tag\\">B</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">0</span>\\n</code></div></div></pre><ol start=\\"4\\"><li>Импликация (→): Обозначается символом \\"→\\", представляет логическую импликацию (следование).\\nТаблица истинности:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\"><span class=\\"hljs-selector-tag\\">A</span>  <span class=\\"hljs-selector-tag\\">B</span>  <span class=\\"hljs-selector-tag\\">A</span> → <span class=\\"hljs-selector-tag\\">B</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>   <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>   <span class=\\"hljs-number\\">1</span>\\n</code></div></div></pre><p>Эти элементарные двуместные булевы функции образуют основу для построения более сложных функций и используются в цифровой логике, математической логике, программировании и других областях информатики. Они играют важную роль в построении и анализе логических выражений и операций.</p></div>"],["Основные законы булевой алгебры.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные законы булевой алгебры - это набор правил и тождеств, которые применяются к булевым функциям. Законы булевой алгебры играют важную роль в упрощении и анализе логических выражений. Вот основные законы булевой алгебры:</p><ol><li><p>Законы идемпотентности:</p><ul><li>A ∨ A = A (Идемпотентность дизъюнкции)</li><li>A ∧ A = A (Идемпотентность конъюнкции)</li></ul></li><li><p>Законы ассоциативности:</p><ul><li>(A ∨ B) ∨ C = A ∨ (B ∨ C) (Ассоциативность дизъюнкции)</li><li>(A ∧ B) ∧ C = A ∧ (B ∧ C) (Ассоциативность конъюнкции)</li></ul></li><li><p>Законы коммутативности:</p><ul><li>A ∨ B = B ∨ A (Коммутативность дизъюнкции)</li><li>A ∧ B = B ∧ A (Коммутативность конъюнкции)</li></ul></li><li><p>Законы дистрибутивности:</p><ul><li>A ∨ (B ∧ C) = (A ∨ B) ∧ (A ∨ C) (Дистрибутивность дизъюнкции относительно конъюнкции)</li><li>A ∧ (B ∨ C) = (A ∧ B) ∨ (A ∧ C) (Дистрибутивность конъюнкции относительно дизъюнкции)</li></ul></li><li><p>Закон поглощения:</p><ul><li>A ∨ (A ∧ B) = A (Закон поглощения дизъюнкции)</li><li>A ∧ (A ∨ B) = A (Закон поглощения конъюнкции)</li></ul></li><li><p>Закон отрицания:</p><ul><li>A ∨ ¬A = 1 (Закон исключения третьего)</li><li>A ∧ ¬A = 0 (Закон противоречия)</li></ul></li><li><p>Законы единицы и нуля:</p><ul><li>A ∨ 0 = A (Единичный элемент дизъюнкции)</li><li>A ∧ 1 = A (Единичный элемент конъюнкции)</li><li>A ∨ 1 = 1 (Нулевой элемент дизъюнкции)</li><li>A ∧ 0 = 0 (Нулевой элемент конъюнкции)</li></ul></li></ol><p>Эти законы позволяют упрощать логические выражения, преобразовывать их и находить равносильные выражения. Они являются основой для работы с булевыми функциями в цифровой логике, программировании и других областях, где логические операции широко используются для анализа и управления информацией.</p></div>"],["Понятие функционально-полной системы элементарных функций. Теорема Поста – Яблонского. Понятие базиса.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Понятие функционально-полной системы элементарных функций:</p><p>Функционально-полная система элементарных функций (или просто функционально-полная система) - это система булевых функций, которая обладает свойством, что любую другую булеву функцию можно выразить с помощью комбинаций (композиций) функций из этой системы. Другими словами, система функций считается функционально-полной, если с её помощью можно получить все возможные булевы функции.</p><p>Теорема Поста-Яблонского:</p><p>Теорема Поста-Яблонского устанавливает необходимое и достаточное условие для функциональной полноты системы булевых функций. Теорема утверждает, что система функций является функционально-полной тогда и только тогда, когда она не содержит ни одной из следующих трёх функций: константную 0 (отрицание), константную 1 (тождество) и операцию конъюнкции (логическое И).</p><p>Понятие базиса:</p><p>В контексте функционально-полных систем элементарных функций, базис - это минимальный набор функций, который обладает свойствами функциональной полноты. То есть это такая система функций, которая образует функционально-полную систему, и не содержит лишних функций. Если какая-то функция исключается из базиса, система перестает быть функционально-полной, а если добавляется лишняя функция, то система становится избыточной.</p><p>Например, система функций {И, ИЛИ} является базисом, так как с помощью этих функций можно выразить все булевы функции. А система функций {И, НЕ} также является базисом, так как можно выразить отсутствующую функцию ИЛИ через другие функции.</p><p>Таким образом, понятие функционально-полной системы элементарных функций и теорема Поста-Яблонского позволяют определить, какие наборы функций обладают свойством функциональной полноты, и каким образом можно выражать любую другую функцию с помощью данного базиса.</p></div>"],["Базисы Буля, Шеффера, Пирса, Жегалкина.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Базисы Буля, Шеффера, Пирса и Жегалкина - это четыре различных набора булевых функций, которые образуют функционально-полные системы, то есть с помощью них можно выразить любую другую булевую функцию. Давайте рассмотрим каждый из них:</p><ol><li><p>Базис Буля:\\nБазис Буля состоит из двух элементарных булевых функций: {И (логическое И), НЕ (логическое отрицание)}. Это один из самых простых базисов, так как он содержит всего две функции, которые легко комбинировать для построения любой другой булевой функции.</p></li><li><p>Базис Шеффера:\\nБазис Шеффера состоит всего из одной функции: {НЕХ (логическое НЕ-ИЛИ, также известное как стрелка Пирса)}. Функция Шеффера обладает следующим свойством: любая булева функция может быть выражена через функцию Шеффера. Это достаточно удивительное свойство одной функции.</p></li><li><p>Базис Пирса:\\nБазис Пирса состоит из одной функции: {НЕИ (логическое НЕ-И)}. Функция Пирса обладает аналогичным свойством, как и функция Шеффера: любая булева функция может быть выражена через функцию Пирса.</p></li><li><p>Базис Жегалкина:\\nБазис Жегалкина (также известный как полиномиальный базис) состоит из всех одночленов над булевыми переменными и операции сложения (исключающего ИЛИ). Это означает, что все одночлены вида x1 * x2 * ... * xn, где xi - это булева переменная, и операция сложения, которая соответствует операции исключающего ИЛИ, образуют функционально-полную систему.</p></li></ol><p>Эти базисы имеют важное значение в цифровой логике и теории алгоритмов, так как они демонстрируют, каким образом можно использовать ограниченное количество функций для построения любой другой булевой функции. Это позволяет разрабатывать компактные и эффективные схемы для выполнения логических операций в цифровых системах.</p></div>"],["Основные определения и способы задания. Определение графа. Ориентированные и неориентированные графы. Понятие мультиграфа, подграфа, дополнения, смежности, инцидентности","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Определение графа:</p><p>Граф - это абстрактная структура данных, которая состоит из двух основных элементов: множества вершин (или узлов) и множества рёбер (или связей). Граф представляет собой совокупность объектов (вершин), связанных отношениями (рёбрами). Графы широко используются для моделирования и представления различных сетей, систем и взаимосвязей в различных областях, таких как компьютерные сети, социальные сети, транспортные маршруты и т.д.</p><p>Ориентированные и неориентированные графы:</p><ol><li><p>Неориентированный граф: В неориентированном графе каждое ребро представляет собой неупорядоченную пару вершин. Это означает, что связь между двумя вершинами является взаимной и не имеет направления. В неориентированных графах рёбра представляют просто связи между вершинами, без учёта направления.</p></li><li><p>Ориентированный граф: В ориентированном графе каждое ребро имеет направление и представляет собой упорядоченную пару вершин. Это означает, что связь между двумя вершинами имеет определённое направление от одной вершины к другой.</p></li></ol><p>Понятие мультиграфа:</p><p>Мультиграф - это граф, который может содержать несколько рёбер, соединяющих одни и те же вершины. В обычных графах между двумя вершинами может быть только одно ребро, но в мультиграфе между ними может быть несколько параллельных рёбер.</p><p>Понятие подграфа:</p><p>Подграф - это граф, который является частью другого графа. Если у нас есть граф G с множеством вершин V и множеством рёбер E, и некоторое подмножество вершин V\' ⊆ V и подмножество рёбер E\' ⊆ E, то G\' = (V\', E\') называется подграфом графа G.</p><p>Понятие дополнения:</p><p>Дополнение графа - это граф, который содержит те же вершины, что и исходный граф, но все отсутствующие в исходном графе рёбра включаются в дополнение, и наоборот. Таким образом, если у исходного графа есть ребро между двумя вершинами, то в дополнении это ребро отсутствует, и наоборот.</p><p>Понятие смежности:</p><p>В графе вершины называются смежными (или соседними), если они соединены ребром. В ориентированном графе смежность означает, что ребро исходит из одной вершины и входит в другую. В неориентированном графе смежность означает, что ребро связывает две вершины без учёта направления.</p><p>Понятие инцидентности:</p><p>Ребро называется инцидентным вершине, если оно связывает данную вершину с другой вершиной. В ориентированных графах инцидентность имеет направление (ребро направлено от одной вершины к другой). В неориентированных графах ребро инцидентно двум вершинам, связывая их друг с другом.</p></div>"],["Структурные характеристики графов. Дать определение понятиям: цепь, цикл, путь, контур графа, длина пути. Привести примеры. Симметричные и ассиметричные графы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Структурные характеристики графов:</p><ol><li>Цепь:\\nЦепь в графе - это последовательность рёбер и вершин, такая что каждое ребро соединяет две соседние вершины в последовательности. В цепи все вершины могут быть различными, а рёбра могут повторяться. Цепь может быть как простой (каждое ребро встречается не более одного раза), так и не простой (когда рёбра повторяются).</li></ol><p>Пример цепи: В неориентированном графе цепь может быть представлена, например, как последовательность вершин A - B - C - D, соединённых рёбрами.</p><ol start=\\"2\\"><li>Цикл:\\nЦикл (или замкнутая цепь) - это цепь, в которой первая и последняя вершины совпадают. То есть цикл образует замкнутую петлю.</li></ol><p>Пример цикла: В неориентированном графе цикл может быть представлен, например, как последовательность вершин A - B - C - D - A, соединённых рёбрами.</p><ol start=\\"3\\"><li>Путь:\\nПуть в графе - это последовательность рёбер и вершин, такая что каждое ребро соединяет две соседние вершины в последовательности, и все вершины пути различны. Путь может быть простым или не простым.</li></ol><p>Пример пути: В неориентированном графе путь может быть представлен, например, как последовательность вершин A - B - C, соединённых рёбрами.</p><ol start=\\"4\\"><li>Контур графа:\\nКонтур (или цикл) графа - это замкнутый путь, в котором все вершины различны, кроме первой и последней вершин, которые совпадают.</li></ol><p>Пример контура: В неориентированном графе контур может быть представлен, например, как последовательность вершин A - B - C - D - A, соединённых рёбрами.</p><ol start=\\"5\\"><li>Длина пути:\\nДлина пути в графе - это количество рёбер в пути, т.е. число связанных рёбер, которые приводят от одной вершины к другой.</li></ol><p>Пример длины пути: В неориентированном графе длина пути между вершинами A и C равна 2, если существует путь A - B - C.</p><p>Симметричные и асимметричные графы:</p><ol><li><p>Симметричный граф:\\nСимметричный граф - это неориентированный граф, в котором для каждого ребра (u, v) существует также ребро (v, u). Таким образом, связь между вершинами в симметричном графе двусторонняя и не зависит от направления.</p></li><li><p>Асимметричный граф:\\nАсимметричный граф - это ориентированный граф, в котором для каждого ребра (u, v) не существует ребра (v, u). В асимметричном графе связь между вершинами зависит от направления, и ребра имеют строго определённое направление.</p></li></ol><p>Примеры:</p><ul><li>Неориентированный симметричный граф: граф дружбы в социальной сети, где связи между пользователями взаимные.</li><li>Ориентированный асимметричный граф: граф направлений движения транспортных маршрутов, где направление движения одностороннее.</li></ul></div>"],["Матричное представление графов. Четыре вида матриц. Привести пример.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Матричное представление графов:</p><p>Графы можно представить с помощью матриц, что облегчает их анализ и обработку. Существуют четыре основных вида матриц для представления графов:</p><ol><li>Матрица смежности:\\nМатрица смежности представляет граф в виде квадратной матрицы, где строки и столбцы соответствуют вершинам графа, а элементы матрицы указывают наличие (или отсутствие) рёбер между вершинами. Если между вершинами i и j есть ребро, то элемент матрицы a[i][j] принимает значение 1, в противном случае - 0.</li></ol><p>Пример матрицы смежности для неориентированного графа с вершинами A, B, C и D:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">    <span class=\\"hljs-selector-tag\\">A</span>  <span class=\\"hljs-selector-tag\\">B</span>  C  D\\n<span class=\\"hljs-selector-tag\\">A</span>   <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-selector-tag\\">B</span>   <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>\\nC   <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>\\nD   <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>\\n</code></div></div></pre><ol start=\\"2\\"><li>Матрица инцидентности:\\nМатрица инцидентности представляет граф в виде матрицы, где строки соответствуют вершинам, а столбцы - рёбрам. Элементы матрицы указывают, инцидентна ли вершина ребру. Если вершина i инцидентна ребру j, то элемент матрицы a[i][j] принимает значение 1, в противном случае - 0.</li></ol><p>Пример матрицы инцидентности для неориентированного графа с вершинами A, B, C и рёбрами a, b, c:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">    <span class=\\"hljs-selector-tag\\">a</span>  <span class=\\"hljs-selector-tag\\">b</span>  c\\n<span class=\\"hljs-selector-tag\\">A</span>   <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>\\n<span class=\\"hljs-selector-tag\\">B</span>   <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>\\nC   <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>\\n</code></div></div></pre><ol start=\\"3\\"><li>Матрица достижимости:\\nМатрица достижимости представляет ориентированный граф в виде матрицы, где элементы a[i][j] равны 1, если существует путь от вершины i к вершине j, и 0 в противном случае.</li></ol><p>Пример матрицы достижимости для ориентированного графа с вершинами A, B, C и рёбрами (A, B), (B, C), (C, A):</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">    <span class=\\"hljs-selector-tag\\">A</span>  <span class=\\"hljs-selector-tag\\">B</span>  C\\n<span class=\\"hljs-selector-tag\\">A</span>   <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-selector-tag\\">B</span>   <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">1</span>\\nC   <span class=\\"hljs-number\\">1</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">1</span>\\n</code></div></div></pre><ol start=\\"4\\"><li>Матрица весов:\\nМатрица весов используется взвешенных графах, где рёбрам присвоены числовые значения (веса). Элемент матрицы a[i][j] представляет вес ребра между вершинами i и j.</li></ol><p>Пример матрицы весов для взвешенного графа с вершинами A, B, C и рёбрами (A, B), (B, C), (C, A) с весами 2, 3 и 1 соответственно:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">    <span class=\\"hljs-selector-tag\\">A</span>  <span class=\\"hljs-selector-tag\\">B</span>  C\\n<span class=\\"hljs-selector-tag\\">A</span>   <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">2</span>  <span class=\\"hljs-number\\">1</span>\\n<span class=\\"hljs-selector-tag\\">B</span>   <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">3</span>\\nC   <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>  <span class=\\"hljs-number\\">0</span>\\n</code></div></div></pre><p>Эти матрицы предоставляют различные способы представления графов и позволяют выполнять различные операции с графами, такие как поиск путей, определение связности, и т.д.</p></div>"],["Задача определения путей и кратчайших путей на графах. Алгоритмы решения задачи.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Задача определения путей и кратчайших путей на графах:</p><p>Одной из важных задач в анализе графов является определение путей между вершинами и поиск кратчайших путей - путей с минимальной суммой весов рёбер. Эти задачи имеют много применений, например, в построении маршрутов в сетях, обработке данных и оптимизации.</p><p>Алгоритмы решения задачи:</p><ol><li>Поиск путей:</li></ol><ul><li><p>Глубина-первый поиск (Depth-First Search, DFS): Этот алгоритм начинает с одной из вершин и исследует как можно дальше по каждому ребру, пока не достигнет конечной вершины или не вернется к уже посещенной вершине. DFS обходит все возможные пути до тех пор, пока не будет найден путь между начальной и конечной вершинами.</p></li><li><p>Ширина-первый поиск (Breadth-First Search, BFS): В отличие от DFS, этот алгоритм исследует все соседние вершины перед тем, как переходить к следующей уровню графа. BFS находит кратчайший путь между вершинами, так как он исследует ближайшие вершины перед тем, как исследовать более удаленные.</p></li></ul><ol start=\\"2\\"><li>Поиск кратчайших путей:</li></ol><ul><li><p>Алгоритм Дейкстры (Dijkstra\'s algorithm): Этот алгоритм находит кратчайшие пути от одной из вершин графа до всех остальных вершин. Алгоритм Дейкстры работает с неотрицательными весами рёбер. Начиная с начальной вершины, он находит кратчайшие расстояния до всех других вершин, постепенно просматривая ближайшие вершины.</p></li><li><p>Алгоритм Флойда-Уоршелла (Floyd-Warshall algorithm): Этот алгоритм находит кратчайшие пути между всеми парами вершин в ориентированном или неориентированном графе, даже если рёбра могут иметь отрицательные веса (но не должны образовывать циклы отрицательного веса). Алгоритм Флойда-Уоршелла применяется для поиска кратчайших путей в плотных графах.</p></li></ul><p>Эти алгоритмы позволяют находить пути и кратчайшие пути в графах различных типов, что делает их важным инструментом в анализе и оптимизации различных систем и процессов, основанных на графовой структуре данных.</p></div>"],["Алгоритм Дейкстры.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Алгоритм Дейкстры - это алгоритм поиска кратчайшего пути от одной вершины графа до всех остальных вершин с неотрицательными весами рёбер. Он является одним из наиболее распространенных алгоритмов для решения задачи нахождения кратчайшего пути в графе.</p><p>Шаги алгоритма Дейкстры:</p><ol><li><p>Инициализация: Задать начальную вершину, для которой ищется кратчайший путь. Установить расстояние от начальной вершины до неё же равным 0, а все остальные расстояния до других вершин равны бесконечности.</p></li><li><p>Выбор ближайшей вершины: Выбрать вершину с минимальным расстоянием из множества вершин, для которых еще не найден кратчайший путь.</p></li><li><p>Релаксация: Для выбранной вершины пересчитать расстояние до соседних вершин. Если новое расстояние меньше текущего, то обновить его.</p></li><li><p>Повторение шагов 2 и 3: Повторять шаги 2 и 3 для всех оставшихся вершин, пока не будут найдены кратчайшие пути до всех вершин.</p></li></ol><p>Алгоритм Дейкстры гарантирует нахождение кратчайших путей в графе с неотрицательными весами. Однако он может работать неэффективно в графах с большим количеством рёбер и вершин, особенно в плотных графах. В таких случаях могут использоваться более оптимизированные алгоритмы, такие как алгоритм Флойда-Уоршелла или алгоритмы на основе структур данных \\"куча\\" (heap), например, алгоритм Дейкстры с использованием кучи (Dijkstra\'s algorithm with heap).</p><p>Пример работы алгоритма Дейкстры:</p><p>Рассмотрим следующий ориентированный граф с неотрицательными весами рёбер:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">   <span class=\\"hljs-selector-tag\\">A</span> --<span class=\\"hljs-number\\">2</span>--&gt; <span class=\\"hljs-selector-tag\\">B</span>\\n   |       ^\\n   |       |\\n   v       |\\n   C --<span class=\\"hljs-number\\">1</span>---+\\n</code></div></div></pre><p>Пусть начальная вершина - A. Запустим алгоритм Дейкстры:</p><ol><li>Начальное состояние:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">    Вершина    | Расстояние от <span class=\\"hljs-selector-tag\\">A</span>\\n    -----------------------------\\n    <span class=\\"hljs-selector-tag\\">A</span>          | <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-selector-tag\\">B</span>          | ∞\\n    C          | ∞\\n</code></div></div></pre><ol start=\\"2\\"><li><p>Выбор ближайшей вершины: Выбираем вершину A, так как она имеет минимальное расстояние (0).</p></li><li><p>Релаксация: Обновляем расстояния до соседних вершин:</p></li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">    Вершина    | Расстояние от <span class=\\"hljs-selector-tag\\">A</span>\\n    -----------------------------\\n    <span class=\\"hljs-selector-tag\\">A</span>          | <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-selector-tag\\">B</span>          | <span class=\\"hljs-number\\">2</span> (расстояние от <span class=\\"hljs-selector-tag\\">A</span> + вес ребра <span class=\\"hljs-selector-tag\\">A</span>-&gt;<span class=\\"hljs-selector-tag\\">B</span>)\\n    C          | <span class=\\"hljs-number\\">1</span> (расстояние от <span class=\\"hljs-selector-tag\\">A</span> + вес ребра <span class=\\"hljs-selector-tag\\">A</span>-&gt;C)\\n</code></div></div></pre><ol start=\\"4\\"><li><p>Выбор ближайшей вершины: Выбираем вершину C, так как она имеет минимальное расстояние (1).</p></li><li><p>Релаксация: Обновляем расстояния до соседних вершин:</p></li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>css</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-css\\">    Вершина    | Расстояние от <span class=\\"hljs-selector-tag\\">A</span>\\n    -----------------------------\\n    <span class=\\"hljs-selector-tag\\">A</span>          | <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-selector-tag\\">B</span>          | <span class=\\"hljs-number\\">2</span>\\n    C          | <span class=\\"hljs-number\\">1</span>\\n</code></div></div></pre><ol start=\\"6\\"><li><p>Выбор ближайшей вершины: Выбираем вершину B, так как она имеет минимальное расстояние (2).</p></li><li><p>Релаксация: Не нужно, так как все соседние вершины уже были рассмотрены.</p></li></ol><p>После завершения алгоритма Дейк</p></div>"],["Определение центра и периферийных вершин графа.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Центр и периферийные вершины графа - это характеристики, которые определяют степень важности и централизации вершин в графе.</p><ol><li><p>Центр графа:\\nЦентр графа - это вершина (или вершины), которая имеет минимальную сумму расстояний до всех остальных вершин в графе. В центре графа концентрируется наибольшее количество кратчайших путей от данной вершины ко всем остальным вершинам.</p></li><li><p>Периферийные вершины графа:\\nПериферийные вершины графа - это вершины, которые имеют максимальное расстояние от одной из вершин графа. Они являются наиболее удаленными вершинами от других вершин в графе.</p></li></ol><p>Определение центра и периферийных вершин является важным аспектом в анализе графов, так как они помогают понять структуру и свойства графа. Центральные вершины обычно имеют большую важность и влияние на граф, а периферийные вершины могут оказывать незначительное влияние на связность и доступность в графе. Определение центра и периферийных вершин может быть полезным, например, при проектировании сетей или при анализе социальных связей.</p></div>"]],"Математическая логика и теория алгоритмов":[["Высказывания и высказывательные функции. Логические связи, их логический смысл (как читаются на естественном языке) и порядок выполнения","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Высказывания и высказывательные функции:</p><ol><li><p>Высказывание:\\nВысказывание - это утверждение или утвердительное предложение, которое может быть истинным или ложным, но не одновременно истинным и ложным. Высказываниями могут быть простые утверждения, такие как \\"Солнце светит\\", \\"2 + 2 = 4\\", \\"Москва - столица России\\". Высказывание обозначается буквами p, q, r и т.д.</p></li><li><p>Высказывательная функция:\\nВысказывательная функция - это функция, которая принимает одно или несколько высказываний и возвращает другое высказывание. Высказывательные функции обозначаются символами ¬ (отрицание), ∧ (логическое \\"и\\"), ∨ (логическое \\"или\\"), → (импликация), ↔ (эквиваленция) и т.д.</p></li></ol><p>Логические связи, их логический смысл и порядок выполнения:</p><ol><li>Отрицание (¬):\\nОтрицание (¬) - это высказывательная функция, которая принимает одно высказывание и возвращает его отрицание. Если высказывание истинно, то его отрицание ложно, и наоборот.</li></ol><p>Логический смысл: Если p - \\"Сегодня солнечный день\\", то ¬p - \\"Сегодня не солнечный день\\".</p><ol start=\\"2\\"><li>Конъюнкция (логическое \\"и\\") (∧):\\nКонъюнкция (∧) - это высказывательная функция, которая принимает два высказывания и возвращает истину, если оба высказывания истинны, и ложь в противном случае.</li></ol><p>Логический смысл: Если p - \\"Температура выше нуля\\", а q - \\"Небо ясное\\", то p ∧ q - \\"Температура выше нуля и небо ясное\\".</p><ol start=\\"3\\"><li>Дизъюнкция (логическое \\"или\\") (∨):\\nДизъюнкция (∨) - это высказывательная функция, которая принимает два высказывания и возвращает истину, если хотя бы одно из высказываний истинно, и ложь, если оба высказывания ложны.</li></ol><p>Логический смысл: Если p - \\"Дождь идет\\", а q - \\"Температура ниже нуля\\", то p ∨ q - \\"Дождь идет или температура ниже нуля\\".</p><ol start=\\"4\\"><li>Импликация (→):\\nИмпликация (→) - это высказывательная функция, которая принимает два высказывания и возвращает ложь только в том случае, когда первое высказывание истинно, а второе ложно. В остальных случаях импликация истинна.</li></ol><p>Логический смысл: Если p - \\"Сегодня праздник\\", а q - \\"Магазины закрыты\\", то p → q - \\"Если сегодня праздник, то магазины закрыты\\".</p><ol start=\\"5\\"><li>Эквиваленция (↔):\\nЭквиваленция (↔) - это высказывательная функция, которая принимает два высказывания и возвращает истину, если оба высказывания имеют одинаковую истинность, и ложь в противном случае.</li></ol><p>Логический смысл: Если p - \\"Температура выше нуля\\", а q - \\"Температура не ниже нуля\\", то p ↔ q - \\"Температура выше нуля тогда и только тогда, когда температура не ниже нуля\\".</p><p>Порядок выполнения логических связей зависит от приоритета операций, который определяется стандартными правилами математической логики, такими как выполнение операций в скобках, отрицание, конъ</p></div>"],["Истинностные таблицы высказываний для основных логических операций.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Истинностные таблицы высказываний для основных логических операций:</p><p>Истинностные таблицы используются для представления и вычисления логических операций. В таблицах указываются все возможные комбинации значений исходных высказываний и результат соответствующей логической операции. Основные логические операции включают отрицание (¬), конъюнкцию (∧), дизъюнкцию (∨), импликацию (→) и эквиваленцию (↔).</p><p>Для каждой операции в таблице используются значения \\"Истина\\" (T) и \\"Ложь\\" (F). Количество строк в таблице зависит от числа исходных высказываний (пропозициональных переменных).</p><ol><li>Отрицание (¬):\\nТаблица отрицания имеет одну пропозициональную переменную и один столбец:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>r</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-r\\"><span class=\\"hljs-operator\\">|</span> P <span class=\\"hljs-operator\\">|</span> ¬P <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>  <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>  <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>\\n</code></div></div></pre><ol start=\\"2\\"><li>Конъюнкция (∧):\\nТаблица конъюнкции имеет две пропозициональные переменные и один столбец для результата:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>r</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-r\\"><span class=\\"hljs-operator\\">|</span> P <span class=\\"hljs-operator\\">|</span> Q <span class=\\"hljs-operator\\">|</span> P ∧ Q <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">F</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">F</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">F</span>   <span class=\\"hljs-operator\\">|</span>\\n</code></div></div></pre><ol start=\\"3\\"><li>Дизъюнкция (∨):\\nТаблица дизъюнкции имеет две пропозициональные переменные и один столбец для результата:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>r</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-r\\"><span class=\\"hljs-operator\\">|</span> P <span class=\\"hljs-operator\\">|</span> Q <span class=\\"hljs-operator\\">|</span> P ∨ Q <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">F</span>   <span class=\\"hljs-operator\\">|</span>\\n</code></div></div></pre><ol start=\\"4\\"><li>Импликация (→):\\nТаблица импликации имеет две пропозициональные переменные и один столбец для результата:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>r</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-r\\"><span class=\\"hljs-operator\\">|</span> P <span class=\\"hljs-operator\\">|</span> Q <span class=\\"hljs-operator\\">|</span> P → Q <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">F</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n</code></div></div></pre><ol start=\\"5\\"><li>Эквиваленция (↔):\\nТаблица эквиваленции имеет две пропозициональные переменные и один столбец для результата:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>r</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-r\\"><span class=\\"hljs-operator\\">|</span> P <span class=\\"hljs-operator\\">|</span> Q <span class=\\"hljs-operator\\">|</span> P ↔ Q <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">-</span><span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">F</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">T</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">F</span>   <span class=\\"hljs-operator\\">|</span>\\n<span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span> <span class=\\"hljs-built_in\\">F</span> <span class=\\"hljs-operator\\">|</span>   <span class=\\"hljs-built_in\\">T</span>   <span class=\\"hljs-operator\\">|</span>\\n</code></div></div></pre><p>Эти истинностные таблицы позволяют определить и понять результаты логических операций в зависимости от исходных значений высказываний.</p></div>"],["Формулы и формализация высказываний. Способы нахождения значений формулы","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Формулы и формализация высказываний:</p><ol><li>Формулы:\\nФормула - это последовательность символов, которая может быть составлена из пропозициональных переменных (переменных высказываний) и логических связок (¬ - отрицание, ∧ - конъюнкция, ∨ - дизъюнкция, → - импликация, ↔ - эквиваленция). Формула может быть составлена в соответствии с определенными правилами синтаксиса.</li></ol><p>Примеры формул:</p><ul><li>P ∧ Q</li><li>¬P ∨ (Q → R)</li><li>(P → Q) ↔ ¬R</li></ul><ol start=\\"2\\"><li>Формализация высказываний:\\nФормализация - это процесс перевода естественного языка в формулы математической логики. Высказывания в естественном языке могут быть нечеткими и многозначными, а формализация позволяет представить их в виде точных и четких формул.</li></ol><p>Примеры формализации:</p><ul><li>\\"Солнце светит\\" может быть формализовано как P, где P - пропозициональная переменная, представляющая утверждение \\"Солнце светит\\".</li><li>\\"Если завтра будет дождь, то я возьму зонтик\\" может быть формализовано как D → U, где D - пропозициональная переменная \\"Завтра будет дождь\\", а U - пропозициональная переменная \\"Я возьму зонтик\\".</li></ul><p>Способы нахождения значений формулы:</p><ol><li><p>Задание значений переменных: Для каждой пропозициональной переменной в формуле задаются значения \\"Истина\\" (T) или \\"Ложь\\" (F). Затем вычисляется значение всей формулы на основе значений переменных и логических связок.</p></li><li><p>Таблицы истинности: Составляются таблицы истинности для всех возможных комбинаций значений пропозициональных переменных в формуле. В таблице указываются значения высказывания при каждой комбинации значений переменных.</p></li><li><p>Правила вычисления: Используются правила логических связок для вычисления значения формулы. Например, значение конъюнкции P ∧ Q равно \\"Истина\\" (T) только если оба P и Q равны \\"Истина\\" (T).</p></li></ol><p>Способ нахождения значений формулы зависит от её сложности и конкретной ситуации. Например, для простых формул можно использовать метод задания значений переменных или таблицы истинности, а для более сложных формул могут применяться правила вычисления или более сложные методы анализа.</p></div>"],["Общезначимость (тождественность) формул в ИВ. Способы определения общезначимости формул.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Общезначимость (тождественность) формул в исчислении высказываний (ИВ):</p><p>Общезначимая формула (также называемая тождественно истинной формулой) - это такая формула, которая истинна при любых значениях пропозициональных переменных в ней, независимо от их значений. То есть, независимо от того, какие значения принимают пропозициональные переменные в формуле, сама формула всегда будет истинной.</p><p>Способы определения общезначимости формул:</p><ol><li><p>Таблица истинности: Составляется таблица истинности для формулы, где указываются все возможные комбинации значений пропозициональных переменных. Если в каждой строке таблицы формула принимает значение \\"Истина\\" (T), то она является общезначимой.</p></li><li><p>Метод отрицания: Если можно доказать, что отрицание формулы (¬Ф) является невозможной (необщезначимой) формулой, то сама формула Ф является общезначимой.</p></li><li><p>Аксиоматический метод: Применяются аксиомы и правила вывода для доказательства общезначимости формул. Если можно вывести формулу из системы аксиом, то она считается общезначимой.</p></li><li><p>Метод семантических деревьев: Применяется метод семантических деревьев для проверки всех возможных комбинаций значений пропозициональных переменных в формуле. Если для всех комбинаций формула истинна, то она является общезначимой.</p></li><li><p>Метод канонических дизъюнктивных нормальных форм (КДНФ) и канонических конъюнктивных нормальных форм (ККНФ): Формула считается общезначимой, если её КДНФ представляет собой тождественно истинное выражение или её ККНФ представляет собой тождественно ложное выражение.</p></li></ol><p>Общезначимость формул в ИВ имеет важное значение в математической логике и теоретической информатике, так как позволяет определить некоторые особенности и свойства логических выражений.</p></div>"],["Правила получения общезначимости формул в ИВ. Понятие негатива формулы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Правила получения общезначимости формул в исчислении высказываний (ИВ):</p><ol><li><p>Правило тождества (Idempotency):\\nФормула A ∨ A является общезначимой. Это правило утверждает, что дизъюнкция высказывания с самим собой всегда истинна.</p></li><li><p>Правило идемпотентности (Idempotency):\\nФормула A ∧ A является общезначимой. Это правило утверждает, что конъюнкция высказывания с самим собой всегда истинна.</p></li><li><p>Правило идемпотентности отрицания (Double Negation):\\nФормула ¬¬A эквивалентна формуле A и является общезначимой. Это правило утверждает, что двойное отрицание высказывания эквивалентно самому высказыванию.</p></li><li><p>Правило исключения третьего (Law of Excluded Middle):\\nФормула A ∨ ¬A является общезначимой. Это правило утверждает, что каждое высказывание или его отрицание является истинным.</p></li><li><p>Правило противоречия (Law of Contradiction):\\nФормула A ∧ ¬A является общезначимой. Это правило утверждает, что высказывание и его отрицание не могут быть одновременно истинными.</p></li><li><p>Правила дистрибутивности (Distributive Laws):\\nФормулы, удовлетворяющие законам дистрибутивности, являются общезначимыми:</p><ul><li>A ∧ (B ∨ C) = (A ∧ B) ∨ (A ∧ C)</li><li>A ∨ (B ∧ C) = (A ∨ B) ∧ (A ∨ C)</li></ul></li></ol><p>Понятие негатива формулы:</p><p>В контексте математической логики, негатив формулы относится к отрицанию самой формулы. Например, если дана формула А, то негативом этой формулы будет ¬A. В некоторых случаях, понятие негатива может также применяться к компонентам формулы, например, к отрицанию переменной в конъюнкции или дизъюнкции.</p><p>Правило идемпотентности отрицания (Double Negation) утверждает, что двойное отрицание формулы эквивалентно самой формуле. Это означает, что формула A и её негатив ¬¬A эквивалентны и имеют одинаковое значение истинности.</p></div>"],["Логическая равносильность. Основные равносильности (законы) в ИВ.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Логическая равносильность:</p><p>Логическая равносильность (также называемая эквивалентностью) - это отношение между двумя логическими высказываниями или формулами, которые имеют одинаковые значения истинности при всех возможных значениях пропозициональных переменных. Если две формулы A и B являются логически равносильными (A ≡ B), то это означает, что A и B истинны или ложны одновременно при всех значениях переменных.</p><p>Основные равносильности (законы) в исчислении высказываний (ИВ):</p><ol><li><p>Закон идемпотентности (Idempotent Law):</p><ul><li>A ∨ A ≡ A</li><li>A ∧ A ≡ A</li></ul></li><li><p>Закон коммутативности (Commutative Laws):</p><ul><li>A ∨ B ≡ B ∨ A</li><li>A ∧ B ≡ B ∧ A</li></ul></li><li><p>Закон ассоциативности (Associative Laws):</p><ul><li>(A ∨ B) ∨ C ≡ A ∨ (B ∨ C)</li><li>(A ∧ B) ∧ C ≡ A ∧ (B ∧ C)</li></ul></li><li><p>Закон дистрибутивности (Distributive Laws):</p><ul><li>A ∨ (B ∧ C) ≡ (A ∨ B) ∧ (A ∨ C)</li><li>A ∧ (B ∨ C) ≡ (A ∧ B) ∨ (A ∧ C)</li></ul></li><li><p>Закон идемпотентности отрицания (Double Negation):</p><ul><li>¬¬A ≡ A</li></ul></li><li><p>Закон противоречия (Law of Contradiction):</p><ul><li>A ∧ ¬A ≡ F (ложь)</li></ul></li><li><p>Закон исключения третьего (Law of Excluded Middle):</p><ul><li>A ∨ ¬A ≡ T (истина)</li></ul></li><li><p>Закон импликации (Implication Laws):</p><ul><li>A → B ≡ ¬A ∨ B</li><li>¬(A ∧ B) ≡ ¬A ∨ ¬B</li></ul></li><li><p>Закон эквиваленции (Equivalence Laws):</p><ul><li>A ↔ B ≡ (A → B) ∧ (B → A)</li></ul></li></ol><p>Законы логической равносильности используются для упрощения и преобразования логических выражений, и они играют важную роль в процессе доказательств и решения логических задач.</p></div>"],["Обратные и противоположные высказывания. Закон контрапозиции.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Обратные и противоположные высказывания:</p><ol><li>Обратное высказывание:\\nОбратное высказывание к утверждению \\"если A, то B\\" имеет вид \\"если B, то A\\". Обратное высказывание не обязательно является истинным, даже если исходное утверждение истинно.</li></ol><p>Пример:\\nИсходное утверждение: Если сегодня идет дождь, то улицы мокрые.\\nОбратное утверждение: Если улицы мокрые, то сегодня идет дождь.</p><ol start=\\"2\\"><li>Противоположное высказывание:\\nПротивоположное высказывание к утверждению \\"если A, то B\\" имеет вид \\"если не A, то не B\\". Противоположное высказывание всегда является ложным, если исходное утверждение истинно.</li></ol><p>Пример:\\nИсходное утверждение: Если я ем мороженое, то я счастлив.\\nПротивоположное утверждение: Если я не ем мороженое, то я не счастлив.</p><p>Закон контрапозиции:</p><p>Закон контрапозиции утверждает, что если утверждение \\"если A, то B\\" истинно, то утверждение \\"если не B, то не A\\" также истинно. Этот закон позволяет заменить исходное утверждение на его контрапозицию без потери истинности.</p><p>Математический вид закона контрапозиции:\\nЕсли A → B, то ¬B → ¬A</p><p>Пример:\\nИсходное утверждение: Если число четное, то оно делится на 2.\\nКонтрапозиция: Если число не делится на 2, то оно нечетное.</p><p>Закон контрапозиции часто применяется в математических доказательствах для упрощения логических выражений и установления эквивалентности различных утверждений.</p></div>"],["Логическое следование: аргумент, посылка, заключение. Формальная запись аргумента.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Логическое следование:</p><p>Логическое следование - это связь между посылкой (предпосылкой) и заключением в аргументе. Если из истинности посылки следует истинность заключения, то говорят, что заключение логически следует из посылки. Логическое следование обозначается символом \\"→\\" (импликация).</p><ul><li>Посылка: это высказывание или формула, которое служит предпосылкой для вывода заключения.</li><li>Заключение: это высказывание или формула, которое выводится на основе посылки.</li></ul><p>Формальная запись аргумента:</p><p>Аргумент - это логическая структура, состоящая из посылки и заключения. Аргументы могут быть представлены формально в виде:</p><p>Посылка → Заключение</p><p>Где \\"Посылка\\" представляет собой высказывание или формулу, которую мы принимаем как истинную, а \\"Заключение\\" - высказывание или формулу, которую мы выводим или заключаем на основе посылки.</p><p>Пример аргумента:</p><p>Посылка: Если сегодня идет дождь,\\nЗаключение: то улицы мокрые.</p><p>Формальная запись аргумента: Если сегодня идет дождь, то улицы мокрые.</p><p>Аргументы играют важную роль в логике, философии и математике, позволяя делать выводы на основе предпосылок и логических правил. Они помогают устанавливать отношения между утверждениями и рассуждать логически верно.</p></div>"],["Понятие предиката. Местность предиката. Тождественно истинные и тождественно ложные предикаты.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Понятие предиката:</p><p>В математической логике и математике предикат - это выражение, содержащее переменные, которое становится истинным или ложным в зависимости от значений, подставленных вместо переменных. Предикаты используются для выражения отношений между объектами или свойств, которые могут быть верны или ложны для различных значений переменных.</p><p>Примеры предикатов:</p><ul><li>P(x): \\"x больше 5\\".</li><li>Q(x, y): \\"x делится на y\\".</li></ul><p>Местность предиката:</p><p>Местность (арность) предиката - это количество аргументов (переменных), которые принимает предикат. Местность предиката определяет, сколько переменных нужно подставить в предикат, чтобы получить истинное или ложное высказывание.</p><p>Например:</p><ul><li>Предикат P(x) имеет местность 1, так как принимает один аргумент (x).</li><li>Предикат Q(x, y) имеет местность 2, так как принимает два аргумента (x и y).</li></ul><p>Тождественно истинные и тождественно ложные предикаты:</p><p>Тождественно истинный предикат (тавтология) - это предикат, который истинен для всех возможных значений переменных. Вне зависимости от значений аргументов, тождественно истинный предикат всегда будет принимать значение \\"Истина\\" (T).</p><p>Пример тождественно истинного предиката:\\nПредикат P(x): \\"x + 2 &gt; x\\".</p><p>Тождественно ложный предикат (контрадикция) - это предикат, который ложен для всех возможных значений переменных. Вне зависимости от значений аргументов, тождественно ложный предикат всегда будет принимать значение \\"Ложь\\" (F).</p><p>Пример тождественно ложного предиката:\\nПредикат Q(x): \\"x &lt; x\\".</p><p>Тождественно истинные и тождественно ложные предикаты представляют особый интерес в математической логике, так как они устанавливаются на основе логических свойств выражений и не зависят от конкретных значений переменных.</p></div>"],["Логические операции над предикатами. Понятие связанных и свободных переменных.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Логические операции над предикатами:</p><p>В математической логике выполняются различные логические операции над предикатами, такие как конъюнкция (логическое \\"и\\"), дизъюнкция (логическое \\"или\\"), отрицание (логическое \\"не\\") и импликация (логическое \\"если-то\\"). Эти операции позволяют строить более сложные высказывания на основе простых предикатов.</p><ol><li><p>Конъюнкция (AND): Обозначается символом \\"∧\\". Предикат A ∧ B истинен, если оба предиката A и B истинны.</p></li><li><p>Дизъюнкция (OR): Обозначается символом \\"∨\\". Предикат A ∨ B истинен, если хотя бы один из предикатов A или B истинен.</p></li><li><p>Отрицание (NOT): Обозначается символом \\"¬\\". Предикат ¬A истинен, если предикат A ложен.</p></li><li><p>Импликация (IF-THEN): Обозначается символом \\"→\\". Предикат A → B истинен, если из A следует B. Если A ложно, то предикат A → B всегда истинен.</p></li></ol><p>Понятие связанных и свободных переменных:</p><ol><li>Связанные переменные:\\nСвязанные переменные - это переменные в предикате, которые связаны кванторами и имеют определенную область действия внутри формулы. Кванторы, такие как \\"∀\\" (для всех) и \\"∃\\" (существует), связывают переменные и определяют, какие значения переменных рассматриваются внутри предиката.</li></ol><p>Пример:\\nВ предикате \\"∃x (x &gt; 0)\\" переменная \\"x\\" является связанной переменной, так как она связана квантором ∃ (существует) и имеет область действия ограниченную внутри предиката.</p><ol start=\\"2\\"><li>Свободные переменные:\\nСвободные переменные - это переменные в предикате, которые не связаны никакими кванторами и не имеют определенной области действия. Они могут принимать любые значения в контексте, в котором рассматривается предикат.</li></ol><p>Пример:\\nВ предикате \\"x &gt; 0\\" переменная \\"x\\" является свободной переменной, так как она не связана кванторами и может принимать любые значения.</p><p>Понимание связанных и свободных переменных важно для понимания кванторов и логических операций, так как они определяют область действия предикатов и правильное применение логических правил при работе с формулами.</p></div>"],["Язык предикатов первого порядка Синтаксис.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Язык предикатов первого порядка - это формальный язык, используемый в математической логике и математике для формулировки высказываний и математических утверждений с использованием предикатов, функций и кванторов. Он расширяет язык исчисления высказываний (пропозициональной логики) путем введения переменных и кванторов, что позволяет более точно описывать математические структуры и свойства объектов.</p><p>Синтаксис языка предикатов первого порядка включает следующие элементы:</p><ol><li>Предикаты: Предикаты представляют отношения или свойства объектов и описывают, когда они являются истинными или ложными. Предикаты могут зависеть от одной или нескольких переменных.</li></ol><p>Примеры предикатов: P(x), Q(x, y)</p><ol start=\\"2\\"><li>Функции: Функции описывают преобразования или операции над объектами и могут зависеть от одной или нескольких переменных.</li></ol><p>Примеры функций: f(x), g(x, y)</p><ol start=\\"3\\"><li>Константы: Константы - это имена, которые представляют некоторые конкретные объекты в предметной области.</li></ol><p>Примеры констант: a, b, c</p><ol start=\\"4\\"><li>Переменные: Переменные - это символы, которые представляют элементы или объекты, область значений которых может быть определена в контексте формулы.</li></ol><p>Примеры переменных: x, y, z</p><ol start=\\"5\\"><li><p>Логические связки: Логические связки (конъюнкция, дизъюнкция, отрицание, импликация) используются для объединения предикатов и выражений.</p></li><li><p>Кванторы: Кванторы (универсальный квантор ∀ и существенный квантор ∃) используются для выражения утверждений, которые верны для всех элементов (универсальный квантор) или для некоторых элементов (существенный квантор) в предметной области.</p></li></ol><p>Примеры выражений с кванторами:</p><ul><li>∀x P(x) (для всех x, P(x) истинно)</li><li>∃x Q(x) (существует x, для которого Q(x) истинно)</li></ul><p>Синтаксис языка предикатов первого порядка позволяет формулировать сложные математические утверждения и рассуждения, что делает его мощным инструментом для работы с формальными математическими структурами.</p></div>"],["Язык предиката первого порядка. Семантика.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Язык предикатов первого порядка имеет синтаксис, как описано в предыдущем вопросе (вопрос №11), и также имеет семантику. Семантика языка предикатов первого порядка определяет значения выражений этого языка и их интерпретацию в различных моделях. Она связывает синтаксические конструкции языка с их смысловыми значениями.</p><p>Элементы семантики языка предикатов первого порядка:</p><ol><li><p>Модель:\\nМодель - это математическая структура, которая определяет интерпретацию элементов языка предикатов первого порядка. В модели определены область объектов (универсум), значения предикатов и функций, а также значения констант и переменных.</p></li><li><p>Интерпретация предикатов и функций:\\nМодель определяет, каким образом интерпретируются предикаты (отношения) и функции (операции) языка. Каждому предикату приписывается набор элементов из универсума, для которых предикат истинен, а каждой функции - соответствующее правило вычисления значений.</p></li><li><p>Значения переменных:\\nМодель также определяет значения переменных внутри формулы. При оценке выражений с кванторами (универсальный и существенный) модель указывает, какие значения принимают переменные.</p></li><li><p>Истинность формул:\\nСемантика языка предикатов первого порядка позволяет определить, когда формула является истинной или ложной в данной модели. Истинность формулы зависит от значений предикатов, функций и переменных, заданных в модели.</p></li></ol><p>Семантика языка предикатов первого порядка играет ключевую роль в математической логике, так как она позволяет формально определить смысл высказываний и доказательств в этом языке. Это важно для корректного применения логических правил, рассуждений и доказательств в математике и других областях, где используется формальное логическое мышление.</p></div>"],["Интерпретация в логике предикатов первого порядка. Понятие универсума. Двойственность формул с кванторами общности и существования.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Интерпретация в логике предикатов первого порядка:</p><p>Интерпретация в логике предикатов первого порядка - это процесс присвоения смысла (значения) элементам языка предикатов первого порядка в рамках конкретной модели. Она определяет, каким образом интерпретируются предикаты, функции, константы и переменные, а также определяет истинность формулы в этой модели.</p><p>Понятие универсума:</p><p>Универсум (также называемый доменом или областью предметной интерпретации) - это множество всех объектов, для которых определены предикаты и функции языка предикатов первого порядка в данной модели. Универсум представляет собой основное множество, в котором выполняются операции и отношения. Это может быть любое множество объектов, такое как множество натуральных чисел, множество людей или множество всех точек в пространстве.</p><p>Двойственность формул с кванторами общности и существования:</p><p>Кванторы общности (∀ - \\"для всех\\") и существования (∃ - \\"существует\\") являются основными кванторами языка предикатов первого порядка и позволяют выражать утверждения, относящиеся к множествам элементов.</p><p>Двойственность формул с кванторами общности и существования заключается в следующем:</p><ol><li>Формула с квантором общности (∀x) утверждает, что утверждение верно для всех элементов универсума. Если формула с квантором общности истинна, это означает, что утверждение верно для каждого элемента из универсума.</li></ol><p>Пример: ∀x (x &gt; 0) - \\"Для всех x верно, что x больше 0.\\"</p><ol start=\\"2\\"><li>Формула с квантором существования (∃x) утверждает, что утверждение верно хотя бы для одного элемента универсума. Если формула с квантором существования истинна, это означает, что существует хотя бы один элемент, для которого утверждение истинно.</li></ol><p>Пример: ∃x (x &gt; 0) - \\"Существует x, такой что x больше 0.\\"</p><p>Таким образом, двойственность кванторов общности и существования выражает различные виды утверждений относительно множества элементов универсума: либо для всех, либо хотя бы для одного.</p></div>"],["Определение формулы в исчислении предикатов первого порядка: простые и составные (термы, атомы, формулы)","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>В исчислении предикатов первого порядка формулы могут быть простыми или составными. Давайте определим каждый из этих типов формул:</p><ol><li>Простые формулы:\\nПростые формулы включают в себя термы и атомы.</li></ol><ul><li>Терм: Терм представляет собой выражение, которое обозначает объект или значение в предметной области. Термы могут быть переменными, константами или результатами функций, примененных к аргументам. Термы не содержат логических связок.</li></ul><p>Примеры термов:\\na (константа)\\nx (переменная)\\nf(x, y) (функция с аргументами x и y)</p><ul><li>Атом: Атом - это предикат, примененный к аргументам (термам). Он представляет собой утверждение или отношение между объектами. Атомы могут быть истинными или ложными в зависимости от значений аргументов и интерпретации предикатов.</li></ul><p>Примеры атомов:\\nP(x) (Предикат P с аргументом x)\\nQ(x, y) (Предикат Q с аргументами x и y)</p><ol start=\\"2\\"><li>Составные формулы:\\nСоставные формулы строятся с использованием логических связок (конъюнкция, дизъюнкция, отрицание, импликация) и кванторов (общности и существования) над простыми формулами. Они позволяют строить более сложные высказывания и утверждения.</li></ol><p>Примеры составных формул:</p><ul><li>P(x) ∧ Q(y) (конъюнкция атомов P(x) и Q(y))</li><li>∀x P(x) (утверждение, что P(x) истинно для всех значений x)</li><li>∃y Q(y) (утверждение, что существует значение y, для которого Q(y) истинно)</li></ul><p>В исчислении предикатов первого порядка формулы позволяют формально описывать свойства, отношения и действия в математике и других областях, используя логические операции и кванторы для выражения утверждений о множествах объектов и их свойствах.</p></div>"],["Машина Поста и машина Тьюринга, отличительные особенности. Связь с определением алгоритма (свойства, параметры)","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Машина Поста и машина Тьюринга являются формальными моделями вычислений, которые имеют свои отличительные особенности. Обе модели связаны с определением алгоритма и представляют абстрактные устройства для решения вычислительных задач.</p><p>Машина Поста:</p><ol><li>Особенности:</li></ol><ul><li>Машина Поста - это простая абстрактная модель, представляющая собой ленту с бесконечным количеством ячеек и головку, которая может перемещаться влево или вправо по ленте.</li><li>В каждой ячейке ленты может быть символ из некоторого алфавита.</li><li>Машина Поста имеет ограниченное количество внутренних состояний, которые определяют ее поведение.</li><li>Правила перехода определяют, как машина изменяет свое состояние и символы на ленте в зависимости от текущего состояния и символа под головкой.</li></ul><ol start=\\"2\\"><li>Связь с определением алгоритма:</li></ol><ul><li>Машина Поста представляет абстрактную модель вычислений и позволяет формализовать простые алгоритмические процессы.</li><li>Правила перехода в машине Поста эквивалентны шагам алгоритма, которые изменяют состояние и данные на каждом шаге выполнения.</li></ul><p>Машина Тьюринга:</p><ol><li>Особенности:</li></ol><ul><li>Машина Тьюринга - это более мощная абстрактная модель вычислений, представляющая собой ленту с бесконечным количеством ячеек и головку, которая может перемещаться влево или вправо по ленте.</li><li>Каждая ячейка ленты может содержать символ из некоторого алфавита.</li><li>Машина Тьюринга также имеет внутреннее состояние, которое определяет ее поведение.</li><li>Правила перехода определяют, как машина изменяет свое состояние и символы на ленте в зависимости от текущего состояния и символа под головкой.</li></ul><ol start=\\"2\\"><li>Связь с определением алгоритма:</li></ol><ul><li>Машина Тьюринга является универсальной абстрактной моделью вычислений, что означает, что она может моделировать любой алгоритм или вычислительный процесс.</li><li>Машина Тьюринга связана с определением алгоритма в том смысле, что любой алгоритм, который можно выполнить на компьютере или в программировании, может быть смоделирован с помощью машины Тьюринга. Это свойство называется тезисом Чёрча-Тьюринга.</li></ul><p>В целом, как машина Поста, так и машина Тьюринга представляют универсальные абстрактные модели вычислений и играют важную роль в теории вычислимости и формальных основах алгоритмов. Однако машина Тьюринга, благодаря своей универсальности, является более широко используемой в теоретическом анализе алгоритмов и компьютерных наук.</p></div>"],["Нормальные алгоритм Маркова. Связь с определением алгоритма (свойства, параметры).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Нормальные алгоритмы Маркова (НАМ) - это универсальные вычислительные устройства, представляющие собой абстрактные модели вычислений, которые состоят из конечного набора правил или инструкций для изменения состояния некоторой конфигурации данных. НАМ являются разновидностью машин Тьюринга и были предложены Андреем Марковым в 1961 году.</p><p>Особенности нормальных алгоритмов Маркова:</p><ol><li><p>Конфигурация: Конфигурация НАМ представляет собой последовательность символов (например, из некоторого алфавита) на ленте и текущее состояние (внутреннее состояние) машины.</p></li><li><p>Правила перехода: Нормальные алгоритмы Маркова имеют конечный набор правил перехода, каждое из которых состоит из двух частей - шаблона и замены. Шаблон представляет собой последовательность символов, которую нужно найти на ленте, и текущее состояние машины. Замена определяет, как изменить найденный шаблон и состояние на ленте. При выполнении правила, машина находит первое вхождение шаблона на ленте, заменяет его согласно правилу и переходит в новое состояние.</p></li><li><p>Остановка: Нормальный алгоритм Маркова завершает работу, когда не существует правила, которое применимо к текущей конфигурации. Таким образом, НАМ всегда останавливается после конечного числа шагов.</p></li></ol><p>Связь с определением алгоритма:</p><ul><li>Нормальные алгоритмы Маркова, как и машины Тьюринга, являются универсальными моделями вычислений, то есть они могут моделировать любой вычислительный процесс.</li><li>НАМ демонстрируют связь с определением алгоритма через конечный набор правил и инструкций для изменения состояния данных. Такие правила могут формировать последовательности шагов, которые представляют алгоритмическую логику для решения задачи.</li></ul><p>Нормальные алгоритмы Маркова обладают уникальными математическими свойствами и находят применение в теоретической информатике, теории формальных языков и исследованиях по вычислимости. Они представляют собой интересный объект изучения для исследователей, изучающих фундаментальные аспекты алгоритмов и вычислений.</p></div>"]],"Теория автоматов и формальных языков":[["Автоматы с магазинной памятью","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автоматы с магазинной памятью (МП-автоматы) - это абстрактные вычислительные устройства, которые являются расширением конечных автоматов и обладают более высокой вычислительной мощностью. МП-автоматы используются в теории формальных языков и являются одним из типов автоматов, используемых для определения и распознавания контекстно-свободных языков.</p><p>Основные характеристики МП-автоматов:</p><ol><li><p>Магазинная память: Магазин представляет собой абстрактное устройство, которое может читать, записывать и хранить информацию в виде символов в стеке. Магазин используется для хранения промежуточных результатов и управления вычислениями автомата.</p></li><li><p>Состояния: МП-автоматы, как и конечные автоматы, имеют набор состояний, из которых одно состояние является начальным, и может быть также определено несколько конечных состояний.</p></li><li><p>Входной алфавит: Как и в конечных автоматах, МП-автомат работает с входными символами из некоторого входного алфавита.</p></li><li><p>Таблица переходов: В отличие от конечных автоматов, МП-автоматы используют таблицу переходов, которая определяет правила перехода из одного состояния в другое в зависимости от текущего символа на входе и символа на вершине стека. При переходе автомат может читать входной символ, изменять состояние и выполнять операции со стеком, такие как добавление, удаление или замена символов в магазине.</p></li><li><p>Принятие языков: МП-автоматы используются для определения и распознавания контекстно-свободных языков. Язык принимается МП-автоматом, если существует последовательность переходов и операций со стеком, которая позволяет автомату прочитать входное слово и опустошить магазин, достигнув одного из конечных состояний.</p></li></ol><p>МП-автоматы обладают более высокой вычислительной мощностью по сравнению с конечными автоматами и могут определять и распознавать широкий класс контекстно-свободных языков, что делает их важными в теории формальных языков и компиляторостроении. Однако они также сложнее в анализе и имеют некоторые ограничения в сравнении с машинами Тьюринга.</p></div>"],["Алгоритм абстрактного синтеза автоматов по графу регулярных выражений","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Алгоритм абстрактного синтеза автоматов по графу регулярных выражений - это алгоритм, который позволяет построить конечный автомат (конечный детерминированный автомат или КДА) по заданному графу регулярного выражения.</p><p>Основные шаги алгоритма абстрактного синтеза автоматов по графу регулярных выражений:</p><ol><li><p>Построение графа регулярного выражения: Изначально заданное регулярное выражение преобразуется в ориентированный граф, где вершины представляют состояния автомата, а ребра - переходы между состояниями, соответствующими символам регулярного выражения.</p></li><li><p>Преобразование графа: Производятся необходимые преобразования над графом регулярного выражения для оптимизации и упрощения автомата. Это может включать удаление лишних вершин, объединение эквивалентных состояний или другие оптимизации.</p></li><li><p>Построение КДА: На основе преобразованного графа регулярного выражения строится КДА, то есть конечный автомат с детерминированным управлением. Для этого используются алгоритмы, основанные на теории автоматов.</p></li><li><p>Минимизация КДА (опционально): В полученном КДА можно произвести минимизацию, которая позволяет уменьшить число состояний автомата, сохраняя при этом эквивалентность исходного автомата и языка, который он распознает.</p></li><li><p>Завершение: В результате работы алгоритма получается КДА, который распознает язык, соответствующий заданному регулярному выражению.</p></li></ol><p>Алгоритм абстрактного синтеза автоматов по графу регулярных выражений является важным инструментом в теории формальных языков и компиляторостроении. Он позволяет автоматически получать автоматы для распознавания различных языков на основе заданных регулярных выражений, что упрощает разработку программных средств для обработки текстовых данных и поиска шаблонов.</p></div>"],["Анализ сетей Петри","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Анализ сетей Петри - это метод и техника анализа дискретных систем, основанных на использовании графической нотации сетей Петри. Сети Петри были предложены Карлом Адамом Петри в 1962 году как формальная модель для описания и анализа параллельных процессов и дискретных систем.</p><p>Основные понятия и элементы сетей Петри:</p><ol><li><p>Позиции (Place): Позиции представляют состояния системы и обозначаются кругами. Они хранят и управляют некоторым количеством \\"маркеров\\" (токенов) и представляют различные состояния системы.</p></li><li><p>Переходы (Transition): Переходы обозначаются прямоугольниками и представляют события или действия, которые могут изменять состояние системы. Переходы могут быть активированы, если все входные позиции имеют достаточное количество маркеров (токенов).</p></li><li><p>Дуги (Arc): Дуги представляют связи между позициями и переходами, а также между переходами и позициями. Они определяют поток токенов между элементами сети.</p></li><li><p>Маркеры (Token): Маркеры представляются на позициях и представляют количественную информацию о состоянии системы.</p></li></ol><p>Основные методы анализа сетей Петри:</p><ol><li><p>Определение ограничений: Сети Петри позволяют выразить ограничения и зависимости между состояниями системы и исследовать их свойства.</p></li><li><p>Определение живости и ограниченности: Анализ сетей Петри позволяет определить, существуют ли такие последовательности переходов, которые могут быть выполнены бесконечное число раз (живость) или количество маркеров в системе ограничено (ограниченность).</p></li><li><p>Поиск мертвых блоков: Мертвые блоки - это состояния, из которых нет возможности достичь других состояний. Анализ сетей Петри позволяет выявить такие блоки и устранить их.</p></li><li><p>Анализ сети на предмет возникновения взаимоблокировок и взаимоисключений: Взаимоблокировки возникают, когда система находится в состоянии, из которого нет возможности выполнить переходы. Взаимоисключения - это ситуация, когда одновременно активируются два перехода, требующих одних и тех же ресурсов.</p></li></ol><p>Анализ сетей Петри является мощным инструментом для моделирования и анализа различных систем и процессов. Он находит применение в различных областях, таких как производственные системы, программирование, параллельные вычисления, дизайн аппаратуры и многое другое.</p></div>"],["Грамматика типа 3 и КА. Построение автомата по левосторонней грамматике","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Грамматика типа 3 (регулярная грамматика) и Конечный автомат (КА) - это два важных понятия в теории формальных языков и теории автоматов.</p><ol><li>Грамматика типа 3 (регулярная грамматика):\\nГрамматика типа 3 - это формальная система, которая определяет структуру регулярных языков. Она состоит из четырех компонентов: множества терминальных символов (алфавита), множества нетерминальных символов, стартового символа (один из нетерминалов) и набора правил вывода. Правила вывода задают, как нетерминальные символы заменяются на строки терминальных и нетерминальных символов.</li></ol><p>Грамматика типа 3 обладает следующими ограничениями:</p><ul><li>Правила вывода имеют вид A → aB или A → a, где A и B - нетерминальные символы, а a - терминальный символ.</li><li>Левая часть правила состоит только из одного нетерминала.</li></ul><ol start=\\"2\\"><li>Конечный автомат (КА):\\nКонечный автомат - это абстрактная вычислительная модель, которая состоит из конечного числа состояний и переходов между этими состояниями. КА используется для распознавания и обработки регулярных языков. Он может быть представлен как граф, где вершины - это состояния, а ребра - это переходы между состояниями, обозначающие символы алфавита.</li></ol><p>Построение КА по левосторонней грамматике:\\nДля построения Конечного автомата по левосторонней грамматике можно использовать следующий подход:</p><ol><li>Начальное состояние КА соответствует стартовому символу левосторонней грамматики.</li><li>Для каждого правила вывода вида A → αB, где A и B - нетерминалы, а α - строка терминальных и нетерминальных символов, добавить переход из состояния A в состояние B по символу α.</li><li>Для каждого правила вывода вида A → α, где A - нетерминал, а α - строка терминальных и нетерминальных символов, добавить переход из состояния A в новое состояние по символу α.</li><li>Если стартовый символ A является также и завершающим символом, то состояние A считается завершающим состоянием КА.</li></ol><p>Полученный КА будет распознавать язык, порождаемый левосторонней грамматикой. Таким образом, построение КА по левосторонней грамматике позволяет представить регулярный язык в виде конечного автомата и использовать автоматические методы для его обработки и анализа.</p></div>"],["Грамматика типа 3 и КА. Построение автомата по правосторонней грамматике","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Построение автомата по правосторонней грамматике может быть выполнено с использованием конечного автомата (КА), который будет распознавать язык, порождаемый правосторонней грамматикой (регулярный язык). Вот шаги построения КА по правосторонней грамматике:</p><ol><li>Начальное состояние КА соответствует стартовому символу правосторонней грамматики.</li><li>Для каждого правила вывода вида A → β, где A - нетерминал, а β - строка терминальных и нетерминальных символов, добавить переход из состояния A в новое состояние по символу β.</li><li>Для каждого правила вывода вида A → αB, где A и B - нетерминалы, а α - строка терминальных и нетерминальных символов, добавить переход из состояния B в состояние A по символу α.</li><li>Если стартовый символ A является также и завершающим символом, то состояние A считается завершающим состоянием КА.</li></ol><p>После выполнения этих шагов получим конечный автомат, который будет распознавать язык, порождаемый правосторонней грамматикой. Таким образом, построение автомата по правосторонней грамматике позволяет представить регулярный язык в виде конечного автомата и использовать его для распознавания и обработки строк, принадлежащих этому языку.</p></div>"],["Дерево разбора цепочек КС-языков","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Дерево разбора цепочки в контекстно-свободных (КС) языках - это структура данных, которая представляет собой дерево, используемое для анализа и разбора цепочек, принадлежащих КС-языку. КС-языки определяются контекстно-свободными грамматиками, и дерево разбора представляет собой структуру, которая показывает, какие правила грамматики были использованы для вывода данной цепочки.</p><p>Шаги построения дерева разбора для цепочки в КС-языках:</p><ol><li>Начните с корневого узла, который будет соответствовать стартовому символу грамматики.</li><li>Проанализируйте входную цепочку, начиная с первого символа.</li><li>Применяйте правила вывода грамматики для замены нетерминальных символов на соответствующие строки терминальных и нетерминальных символов.</li><li>Продолжайте разбор цепочки, заменяя нетерминальные символы, пока не получите исходную цепочку.</li><li>Стройте дерево разбора, добавляя новые узлы и связи для каждого применения правила вывода.</li><li>Повторяйте шаги 2-5 для каждой возможной альтернативы вывода, если они есть.</li></ol><p>В результате, дерево разбора представит структуру вывода данной цепочки в КС-языке. От каждого узла в дереве будут идти дуги к его дочерним узлам, отображающим применение правил грамматики. В итоге, дерево разбора будет показывать структуру предложения и то, как оно может быть получено из грамматики.</p></div>"],["Детерминированный и недетерминированный конечные автоматы. Построение ДКА по НДКА","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Детерминированный конечный автомат (ДКА) и недетерминированный конечный автомат (НДКА) - это два различных типа конечных автоматов, которые используются в теории автоматов и формальных языков.</p><ol><li>Детерминированный конечный автомат (ДКА):\\nДКА - это автомат, у которого для каждого состояния и каждого символа в алфавите есть ровно один переход в другое состояние. ДКА представляет собой пятерку (Q, Σ, δ, q₀, F), где:</li></ol><ul><li>Q - множество состояний.</li><li>Σ - алфавит, множество входных символов.</li><li>δ - функция переходов, определяющая, какие состояния будут достигнуты из текущего состояния при входе определенного символа.</li><li>q₀ - начальное состояние, из которого начинается обработка входной цепочки.</li><li>F - множество завершающих (принимающих) состояний.</li></ul><ol start=\\"2\\"><li>Недетерминированный конечный автомат (НДКА):\\nНДКА - это автомат, у которого для каждого состояния и символа в алфавите может быть несколько возможных переходов, и выбор перехода осуществляется недетерминированным образом. НДКА представляет собой пятерку (Q, Σ, δ, q₀, F) с теми же компонентами, что и ДКА.</li></ol><p>Построение ДКА по НДКА (процедура детерминизации):\\nДля построения ДКА по НДКА можно использовать алгоритм под названием \\"подмножества состояний\\". Шаги алгоритма следующие:</p><ol><li>Начальное состояние ДКА - это ε-замыкание (epsilon-closure) начального состояния НДКА.</li><li>Строим таблицу переходов для ДКА. Для каждого символа в алфавите и каждого состояния из ДКА:<ul><li>Находим ε-замыкание всех состояний НДКА, которые достижимы из текущего состояния ДКА по символу.</li><li>Это и будет переходом для данного символа и текущего состояния в ДКА.</li></ul></li><li>Повторяем шаг 2 до тех пор, пока у нас не возникнут новые состояния в ДКА.</li></ol><p>В результате выполнения алгоритма, мы получим ДКА, который распознает тот же язык, что и исходный НДКА. Таким образом, построение ДКА по НДКА позволяет переходить от недетерминированного представления автомата к детерминированному, что упрощает его реализацию и анализ.</p></div>"],["Задание регулярных выражений в форме графов. Правила","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Задание регулярных выражений в форме графов можно выполнить с использованием конечных автоматов. Конечные автоматы позволяют представить регулярные выражения в графической форме, где узлы представляют состояния, а ребра - переходы между состояниями по определенным символам.</p><p>Правила задания регулярных выражений в форме графов следующие:</p><ol><li><p>Начальное состояние обозначается одним входящим ребром, не имеющим исходящих ребер. Оно соответствует началу регулярного выражения.</p></li><li><p>Завершающее состояние или состояния обозначаются двойным кружком (или другой маркировкой) и соответствуют концу регулярного выражения.</p></li><li><p>Ребра, исходящие из состояний, помечаются символами из алфавита языка.</p></li><li><p>Каждое ребро помечается символом, который соответствует переходу из одного состояния в другое.</p></li><li><p>Дополнительные состояния могут использоваться для обозначения операций над регулярными выражениями, такими как объединение, конкатенация или звезда Клини.</p></li><li><p>Состояния могут быть объединены посредством ε-переходов (пустых переходов).</p></li><li><p>Каждая часть регулярного выражения (например, символы, операции, группировки) может быть представлена отдельным подграфом.</p></li><li><p>Для обозначения звезды Клини используется замкнутый контур.</p></li></ol><p>После того, как регулярное выражение представлено в форме графа, можно выполнить алгоритмы минимизации или преобразования конечных автоматов для оптимизации структуры регулярного выражения и реализации соответствующего языка. Таким образом, представление регулярных выражений в форме графов предоставляет наглядную и интуитивно понятную визуализацию регулярных языков.</p></div>"],["Классификация языков по Хомскому","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Классификация языков по Хомскому основана на иерархии четырех типов формальных грамматик, предложенной американским лингвистом Ноамом Хомским в 1956 году. Эта иерархия включает в себя четыре основных класса языков, которые отличаются по степени сложности и выразительной мощности.</p><ol><li><p>Тип 0: Рекурсивно перечислимые языки (Recursively Enumerable Languages):</p><ul><li>Определяются с помощью машин Тьюринга.</li><li>Могут быть описаны неразрешимыми алгоритмами.</li><li>Включают все языки, которые могут быть распознаны машиной Тьюринга с возможностью остановки, но без ограничений на количество шагов.</li></ul></li><li><p>Тип 1: Контекстно-зависимые языки (Context-Sensitive Languages):</p><ul><li>Определяются с помощью контекстно-зависимых грамматик.</li><li>Правила замены имеют вид α -&gt; β, где α - нетерминал, а β - цепочка символов, включающая α.</li><li>Языки этого типа являются более ограниченными, чем рекурсивно перечислимые, но более выразительными, чем контекстно-свободные.</li></ul></li><li><p>Тип 2: Контекстно-свободные языки (Context-Free Languages):</p><ul><li>Определяются с помощью контекстно-свободных грамматик.</li><li>Правила замены имеют вид A -&gt; γ, где A - нетерминал, а γ - цепочка символов, не зависящая от контекста.</li><li>Включают множество языков, которые используются для описания синтаксиса программ и языков разметки.</li></ul></li><li><p>Тип 3: Регулярные языки (Regular Languages):</p><ul><li>Определяются с помощью регулярных выражений или конечных автоматов.</li><li>Языки этого типа обладают наименьшей выразительной мощностью в иерархии.</li><li>Включают простые языки, такие как регулярные выражения для поиска шаблонов в тексте.</li></ul></li></ol><p>Эта иерархия часто используется в теории формальных языков и компьютерных науках для классификации и изучения различных типов языков и их грамматик.</p></div>"],["Магазинные автоматы и КС-языки","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Магазинный автомат (PDA - Pushdown Automaton) - это тип абстрактного вычислительного устройства, который обладает дополнительной магазинной (стековой) памятью. Он является более мощным, чем конечные автоматы, и используется для распознавания контекстно-свободных языков (КС-языков).</p><p>Основные компоненты магазинного автомата:</p><ol><li>Входной алфавит: Множество символов, на которых определен автомат.</li><li>Магазин (стек): Абстрактная память с LIFO (Last-In-First-Out) структурой. В него можно добавлять и извлекать элементы с вершины.</li><li>Контрольное устройство (конечный автомат): Определяет, какие символы считывать с входа и какие переходы выполнять на основе символов входа и текущего состояния.</li><li>Правила переходов (инструкции): Определяют, какие переходы выполнить, основываясь на символах входа, текущем состоянии и содержимом магазина.</li></ol><p>Распознавание КС-языков магазинным автоматом осуществляется следующим образом:</p><ol><li>На вход подается цепочка символов.</li><li>Магазин используется для запоминания информации о структуре цепочки (например, скобки или теги разметки).</li><li>Магазинный автомат может переходить из одного состояния в другое, считывая символы из входа и оперируя содержимым магазина по правилам переходов.</li><li>Если автомат завершает работу в завершающем состоянии и магазин пуст, то цепочка принадлежит языку, иначе она отвергается.</li></ol><p>Магазинные автоматы могут распознавать контекстно-свободные языки, которые не могут быть обработаны конечными автоматами. Они широко используются в компиляторах, обработке языков, синтаксическом анализе и других областях, где требуется работа с более сложными структурами языков.</p></div>"],["Машина Тьюринга и языки типа 0","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Машина Тьюринга (Тьюрингова машина) - это абстрактная модель вычислений, предложенная Аланом Тьюрингом в 1936 году. Она является универсальным вычислительным устройством, способным моделировать работу любого алгоритма, который может быть представлен в алгоритмической форме. Машина Тьюринга состоит из бесконечной ленты разделенной на ячейки, головки чтения/записи, алфавита символов, и набора правил перехода.</p><p>Основные компоненты машины Тьюринга:</p><ol><li>Бесконечная лента: Лента разделена на ячейки, каждая из которых может содержать символ из заданного алфавита, включая пустой символ (пустая ячейка).</li><li>Головка чтения/записи: Позиция головки определяет текущую ячейку на ленте, и она может считывать и записывать символы на ленту.</li><li>Алфавит: Множество символов, которые могут быть использованы на ленте, включая символ пустой ячейки.</li><li>Состояния: Конечное множество состояний, в которых может находиться машина. У каждого состояния есть ассоциированные правила перехода.</li><li>Правила перехода: Определяют, как машина должна изменить свое состояние и переместить головку чтения/записи на ленте в зависимости от текущего состояния и символа на ленте, который она считывает.</li></ol><p>Машина Тьюринга может решать различные вычислительные задачи, и ее вычислительная мощность является эквивалентной другим формальным моделям, таким как рекурсивно перечислимые языки (тип 0) или контекстно-свободные языки (тип 2).</p><p>Языки типа 0 - это самый общий класс формальных языков и включают в себя все языки, которые могут быть распознаны машиной Тьюринга. Они также называются рекурсивно перечислимыми языками. Языки типа 0 могут быть заданы с помощью грамматик, машин Тьюринга или других формальных устройств.</p><p>Машина Тьюринга является фундаментальной моделью в теории вычислений и лежит в основе понятий, связанных с вычислимостью и алгоритмами.</p></div>"],["Назначение и общая характеристика сетей Петри","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Сети Петри - это формальная модель, используемая для описания и анализа параллельных и конкурентных систем. Они были предложены Карлом Адамом Петри в 1962 году и нашли широкое применение в различных областях, таких как моделирование и анализ систем управления, параллельных вычислений, производственных процессов, компьютерных сетей, и др.</p><p>Назначение сетей Петри:</p><ol><li>Моделирование: Сети Петри позволяют описывать системы с распределенными и параллельными процессами, отображая взаимодействие компонентов системы.</li><li>Анализ: Сети Петри позволяют анализировать динамическое поведение системы, выявлять возможные конфликты и взаимные блокировки.</li><li>Проверка свойств: С помощью сетей Петри можно проверять различные свойства системы, такие как ограниченность ресурсов, достижимость состояний, сохранение свойств и др.</li></ol><p>Общая характеристика сетей Петри:</p><ol><li>Состояния: Сеть Петри состоит из состояний, которые представляют возможные конфигурации системы в различные моменты времени.</li><li>Переходы: Переходы отображают события или операции, которые могут изменять состояние системы.</li><li>Переходные условия: Переходы связаны с условиями, которые должны быть выполнены для их активации.</li><li>Маркировки: Маркировки указывают на текущее состояние системы и представляют распределение ресурсов.</li><li>Дуги: Дуги соединяют состояния с переходами и переходы с состояниями, определяя возможные переходы между состояниями.</li></ol><p>Сети Петри являются удобным инструментом для анализа сложных систем с параллельными и конкурентными процессами. Их простота и наглядность делает их популярным средством для моделирования и анализа различных системных процессов.</p></div>"],["НС-языки. Линейно-ограниченные автоматы","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>НС-языки (недетерминированные контекстно-свободные языки) - это класс формальных языков, которые могут быть распознаны недетерминированными контекстно-свободными грамматиками. Этот класс языков находится между контекстно-свободными языками и рекурсивно перечислимыми языками по иерархии Хомского.</p><p>НС-грамматика - это формальная система, состоящая из четверки G = (N, Σ, P, S), где:</p><ul><li>N - конечное множество нетерминальных символов,</li><li>Σ - конечное множество терминальных символов (алфавит),</li><li>P - конечное множество правил продукции вида α -&gt; β, где α и β - строки символов из множества N ∪ Σ,</li><li>S - начальный нетерминал, который принадлежит множеству N.</li></ul><p>Линейно-ограниченные автоматы (ЛО-автоматы) - это модель вычислений, которая работает с лентой фиксированной длины. ЛО-автомат является расширением конечного автомата, где лента ограничена, и головка чтения/записи не может двигаться за пределы этой ленты. Ограничение ленты делает эту модель вычислений мощнее конечных автоматов, но менее мощной по сравнению с машинами Тьюринга или НДКА.</p><p>Основные характеристики ЛО-автоматов:</p><ol><li>Ограниченная лента: Лента ограничена и имеет фиксированную длину.</li><li>Головка чтения/записи: Головка может перемещаться только в пределах ленты.</li><li>Правила перехода: Автомат имеет набор правил перехода, которые определяют, как он изменяет своё состояние в зависимости от символа на ленте и текущего состояния.</li></ol><p>Линейно-ограниченные автоматы обладают ограниченной вычислительной мощностью по сравнению с машинами Тьюринга, но они все ещё могут распознавать некоторые интересные классы языков, такие как некоторые контекстно-зависимые языки и языки, которые не являются контекстно-свободными.</p></div>"],["Основные определения теория формальных грамматик","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные определения в теории формальных грамматик:</p><ol><li><p>Грамматика: Формальная система, состоящая из набора правил, которые определяют, как образовывать строки символов из заданного алфавита. Грамматика используется для задания языка, который представляет собой набор допустимых строк из этого алфавита.</p></li><li><p>Алфавит: Конечное непустое множество символов. Эти символы могут быть буквами, цифрами, знаками пунктуации или любыми другими элементами, которые образуют язык.</p></li><li><p>Строка (цепочка): Последовательность символов из алфавита. Строка может быть пустой (не содержащей символов) или состоять из одного или более символов.</p></li><li><p>Нетерминальный символ: Символ в грамматике, который может заменяться другой строкой (составной символ) согласно правилам грамматики.</p></li><li><p>Терминальный символ: Символ в грамматике, который не может быть заменен другой строкой и является одной из составляющих конечных строк языка.</p></li><li><p>Правило продукции: Правило, определяющее замену нетерминального символа (одной или более нетерминальных символов) на строку, состоящую из терминальных и/или нетерминальных символов. Например, A -&gt; XYZ, где A - нетерминальный символ, а XYZ - строка.</p></li><li><p>Контекстно-свободная грамматика (КС-грамматика): Это тип формальной грамматики, в которой каждое правило продукции состоит из одного нетерминального символа на левой стороне и строки из терминальных и/или нетерминальных символов на правой стороне. Наиболее часто используется для описания контекстно-свободных языков.</p></li><li><p>Контекстно-зависимая грамматика (КЗ-грамматика): Это тип формальной грамматики, в которой правила продукции могут зависеть от контекста, то есть содержания строки слева или справа от заменяемого нетерминала.</p></li><li><p>Регулярная грамматика: Это тип формальной грамматики, где правила продукции имеют ограничения на вид и порядок замены нетерминальных символов, что позволяет описывать регулярные языки.</p></li></ol><p>Эти определения являются основой для изучения формальных грамматик и различных классов языков, которые они могут описывать и порождать.</p></div>"],["Понятие автомата. Модель автомата Мили, Мура","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Автомат - это устройство или вычислительная модель, способная принимать входные данные (символы, последовательности символов) и выполнять определенные действия на основе этих данных согласно заданным правилам. Автоматы широко используются в теории автоматов и формальных языков для описания и распознавания различных языков.</p><p>Модель автомата определяется тремя основными компонентами:</p><ol><li><p>Входной алфавит (Input Alphabet): Это конечное непустое множество символов, которые могут быть прочитаны автоматом.</p></li><li><p>Множество состояний (Set of States): Это конечное множество состояний, в которых может находиться автомат в определенный момент времени.</p></li><li><p>Переходы (Transitions): Это функция, которая определяет, как автомат переходит из одного состояния в другое при чтении входных символов. Переходы определяются для каждой комбинации состояния и символа входного алфавита.</p></li></ol><p>На основе различных характеристик переходов и выходных значений, существуют две основные модели автоматов: автомат Мили и автомат Мура.</p><p>Автомат Мили (Mealy Automaton):</p><ul><li>В автомате Мили, выходные значения (ответы) зависят не только от текущего состояния, но и от входного символа.</li><li>Каждый переход имеет связанный с ним выходной символ, который определяется входным символом и текущим состоянием.</li><li>Формально, автомат Мили представляется как кортеж (Q, Σ, δ, λ, q0), где:\\nQ - множество состояний,\\nΣ - входной алфавит,\\nδ - функция переходов, δ: Q × Σ → Q,\\nλ - функция выходов, λ: Q × Σ → Λ, где Λ - множество выходных символов,\\nq0 - начальное состояние.</li></ul><p>Автомат Мура (Moore Automaton):</p><ul><li>В автомате Мура, выходные значения (ответы) зависят только от текущего состояния, независимо от входного символа.</li><li>Каждое состояние имеет связанный с ним выходной символ, который определяет выходное значение для данного состояния.</li><li>Формально, автомат Мура представляется как кортеж (Q, Σ, δ, λ, q0), где:\\nQ - множество состояний,\\nΣ - входной алфавит,\\nδ - функция переходов, δ: Q × Σ → Q,\\nλ - функция выходов, λ: Q → Λ, где Λ - множество выходных символов,\\nq0 - начальное состояние.</li></ul><p>Оба вида автоматов, Мили и Мура, имеют свои особенности и применения в различных областях, таких как распознавание языков, управление системами и другие задачи, связанные с обработкой информации.</p></div>"],["Примеры сетей Петри","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Примеры сетей Петри:</p><ol><li><p>Производственная система: Сеть Петри может использоваться для моделирования производственных систем, где места представляют состояния системы, а переходы отражают операции и переходы между состояниями производственного процесса.</p></li><li><p>Протоколы связи: Сети Петри применяются для анализа и проектирования протоколов связи в компьютерных сетях. Места представляют состояния системы, а переходы моделируют передачу данных или события в сети.</p></li><li><p>Параллельные вычисления: Сети Петри могут использоваться для моделирования параллельных вычислений и распределенных систем. Места могут представлять состояния процессов, а переходы — события или смену состояний.</p></li><li><p>Системы массового обслуживания: Сети Петри могут быть использованы для анализа производительности и оптимизации систем массового обслуживания, таких как телефонные сети или компьютерные серверы.</p></li><li><p>Программное обеспечение: Сети Петри можно применять для анализа и верификации программного обеспечения, моделирования последовательности действий и возможных состояний программы.</p></li></ol><p>Это лишь некоторые примеры, и сети Петри находят применение в различных областях, где необходимо анализировать состояния и переходы между ними.</p></div>"],["Регулярные выражения","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Регулярные выражения (Regular expressions) — это формальный язык для описания текстовых шаблонов. Они используются для поиска, сопоставления и обработки текстовой информации. В регулярных выражениях символы представляют определенные классы символов или операции, позволяющие выполнять сложные операции со строками.</p><p>Примеры регулярных выражений:</p><ol><li><p><strong>Простой текст:</strong> Простейшее регулярное выражение — это просто последовательность символов, которую оно ищет в тексте. Например, регулярное выражение \\"hello\\" найдет в тексте строку \\"hello\\".</p></li><li><p><strong>Символы-метасимволы:</strong> В регулярных выражениях некоторые символы имеют специальное значение и называются метасимволами. Например, символ \\".\\" соответствует любому одиночному символу, а символ \\"^\\" обозначает начало строки.</p></li><li><p><strong>Классы символов:</strong> Классы символов позволяют задавать группы символов, из которых должен выбираться один символ. Например, выражение \\"[aeiou]\\" найдет любую гласную букву в тексте.</p></li><li><p><strong>Квантификаторы:</strong> Квантификаторы определяют количество повторений предыдущего элемента. Например, выражение \\"a{2,4}\\" найдет последовательность из 2, 3 или 4 букв \\"a\\".</p></li><li><p><strong>Инвертированные классы символов:</strong> Инвертированные классы символов позволяют искать любой символ, не входящий в указанный класс. Например, выражение \\"[^0-9]\\" найдет любой символ, не являющийся цифрой.</p></li><li><p><strong>Альтернативы:</strong> Альтернативы позволяют задать несколько вариантов для поиска. Например, выражение \\"cat|dog\\" найдет либо \\"cat\\", либо \\"dog\\".</p></li><li><p><strong>Якоря:</strong> Якоря указывают позиции в тексте, например, начало строки \\"^\\" или конец строки \\"$\\". Выражение \\"^hello\\" найдет строку, которая начинается с \\"hello\\".</p></li></ol><p>Регулярные выражения являются мощным инструментом для работы с текстом и позволяют выполнять разнообразные операции, такие как поиск, замена, извлечение информации и многое другое. Они широко используются в программировании, редакторах текста, поисковых системах и других приложениях, где требуется работа с текстовыми данными.</p></div>"],["Регулярные грамматики и конечные автоматы","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Регулярные грамматики и конечные автоматы связаны между собой и используются для описания и обработки регулярных языков. Рассмотрим связь между ними:</p><p><strong>Регулярная грамматика:</strong>\\nРегулярная грамматика является типом формальной грамматики, определяющей регулярный язык. Регулярные грамматики состоят из продукций (правил вывода), которые имеют простую форму и позволяют порождать строки определенного формата.</p><p>Пример регулярной грамматики:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>rust</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-rust\\">S <span class=\\"hljs-punctuation\\">-&gt;</span> <span class=\\"hljs-number\\">0</span>A | <span class=\\"hljs-number\\">1</span>B | ε\\nA <span class=\\"hljs-punctuation\\">-&gt;</span> <span class=\\"hljs-number\\">0</span>A | <span class=\\"hljs-number\\">1</span>A | <span class=\\"hljs-number\\">0</span>\\nB <span class=\\"hljs-punctuation\\">-&gt;</span> <span class=\\"hljs-number\\">0</span>B | <span class=\\"hljs-number\\">1</span>B | <span class=\\"hljs-number\\">1</span>\\n</code></div></div></pre><p>Здесь <code>S</code>, <code>A</code> и <code>B</code> - нетерминальные символы, а <code>0</code>, <code>1</code> и <code>ε</code> - терминальные символы (терминалы представляют собой символы из алфавита языка, а <code>ε</code> обозначает пустую строку). Эта грамматика порождает регулярный язык, состоящий из всех строк, составленных из нулей и единиц, которые заканчиваются на <code>0</code> или <code>1</code>.</p><p><strong>Конечный автомат:</strong>\\nКонечный автомат (или конечный автомат без хранилища - DFA) - это абстрактная вычислительная машина, которая может находиться в одном из конечного числа состояний и переходить между состояниями в соответствии с входными символами. Конечный автомат может быть представлен как ориентированный граф, где вершины представляют состояния, а переходы между состояниями обозначаются символами из алфавита языка.</p><p>Пример конечного автомата для регулярного языка 0*1:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>scss</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-scss\\">   --- <span class=\\"hljs-number\\">0</span> --&gt; (q1)\\n  |        /\\n  |       / \\n  |      /\\n  |     / <span class=\\"hljs-number\\">1</span>\\n  V   V\\n (start)-----&gt; (accepting)\\n</code></div></div></pre><p>В этом примере, автомат имеет два состояния: <code>start</code> - начальное состояние и <code>accepting</code> - принимающее состояние. Он может переходить из начального состояния в принимающее состояние только по символу <code>1</code>, а по символу <code>0</code> остается в начальном состоянии.</p><p><strong>Связь между регулярными грамматиками и конечными автоматами:</strong>\\nРегулярные грамматики и конечные автоматы эквивалентны в том смысле, что для любого регулярного языка существует соответствующая регулярная грамматика и эквивалентный конечный автомат, и наоборот. Это свойство называется <strong>теоремой Клини</strong>.</p><p>Таким образом, регулярные грамматики и конечные автоматы являются двумя формальными способами описания одной и той же класса языков - регулярных языков. Они часто используются в теории формальных языков, компиляторах, лексическом анализе и других областях информатики для работы с регулярными языками и текстовыми шаблонами.</p></div>"],["Соединение автоматов. Параллельное соединение","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Соединение автоматов</strong> - это процесс объединения двух или более автоматов для получения нового автомата, который обладает свойствами составных автоматов. Соединение автоматов позволяет комбинировать функциональность различных автоматов для решения более сложных задач.</p><p><strong>Параллельное соединение</strong> - это один из методов соединения автоматов, при котором два или более автомата работают независимо друг от друга, их входы и выходы объединяются, а переходы и состояния остаются независимыми. Результатом параллельного соединения является автомат, который выполняет операции сразу над несколькими автоматами, обрабатывая входы параллельно.</p><p><strong>Пример параллельного соединения:</strong></p><p>Предположим, у нас есть два автомата A и B, которые распознают языки L1 и L2 соответственно.</p><p><strong>Автомат A:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>yaml</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-yaml\\"><span class=\\"hljs-attr\\">Alphabet:</span> {<span class=\\"hljs-string\\">a</span>, <span class=\\"hljs-string\\">b</span>}\\n<span class=\\"hljs-attr\\">States:</span> {<span class=\\"hljs-string\\">q0</span>, <span class=\\"hljs-string\\">q1</span>}\\n<span class=\\"hljs-attr\\">Start state:</span> <span class=\\"hljs-string\\">q0</span>\\n<span class=\\"hljs-attr\\">Accepting state:</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-attr\\">Transitions:</span>\\n<span class=\\"hljs-string\\">(q0,</span> <span class=\\"hljs-string\\">a)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-string\\">(q0,</span> <span class=\\"hljs-string\\">b)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q0</span>\\n<span class=\\"hljs-string\\">(q1,</span> <span class=\\"hljs-string\\">a)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-string\\">(q1,</span> <span class=\\"hljs-string\\">b)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q0</span>\\n</code></div></div></pre><p><strong>Автомат B:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>yaml</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-yaml\\"><span class=\\"hljs-attr\\">Alphabet:</span> {<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>}\\n<span class=\\"hljs-attr\\">States:</span> {<span class=\\"hljs-string\\">s0</span>, <span class=\\"hljs-string\\">s1</span>}\\n<span class=\\"hljs-attr\\">Start state:</span> <span class=\\"hljs-string\\">s0</span>\\n<span class=\\"hljs-attr\\">Accepting state:</span> <span class=\\"hljs-string\\">s1</span>\\n<span class=\\"hljs-attr\\">Transitions:</span>\\n<span class=\\"hljs-string\\">(s0,</span> <span class=\\"hljs-number\\">0</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s0</span>\\n<span class=\\"hljs-string\\">(s0,</span> <span class=\\"hljs-number\\">1</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s1</span>\\n<span class=\\"hljs-string\\">(s1,</span> <span class=\\"hljs-number\\">0</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s0</span>\\n<span class=\\"hljs-string\\">(s1,</span> <span class=\\"hljs-number\\">1</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s1</span>\\n</code></div></div></pre><p>Теперь соединим автоматы A и B параллельно, чтобы получить новый автомат C.</p><p><strong>Параллельное соединение C:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>rust</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-rust\\">Alphabet: {a, b, <span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>}\\nStates: {(q0, s0), (q0, s1), (q1, s0), (q1, s1)}\\nStart state: (q0, s0)\\nAccepting states: {(q1, s1)}\\nTransitions:\\n((q0, s0), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q0, s0), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s0), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s0), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q0, s1), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q0, s1), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s1), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s1), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q1, s0), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q1, s0), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q1, s0), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q1, s0), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q1, s1), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q1, s1), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q1, s1), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q1, s1), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n</code></div></div></pre><p>Таким образом, автомат C получен путем параллельного соединения автоматов A и B. Он может обрабатывать входные символы из объединенных алфавитов и выполнять операции, которые происходят независимо друг от друга в автоматах A и B.</p></div>"],["Способы задания абстрактных автоматов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Существует несколько способов задания абстрактных автоматов, каждый из которых предоставляет формальный способ описания структуры и поведения автомата. Вот некоторые из способов задания абстрактных автоматов:</p><ol><li><p><strong>Конечные автоматы (Finite Automata):</strong> Конечные автоматы могут быть заданы с помощью:</p><ul><li>Диаграмм переходов (Transition diagrams): Графическое представление состояний и переходов автомата с помощью вершин и стрелок.</li><li>Таблиц переходов (Transition tables): Таблицы, которые описывают состояния и переходы автомата в виде матрицы.</li><li>Регулярные выражения (Regular expressions): Описывают язык, распознаваемый автоматом, в виде шаблона из регулярных операций.</li></ul></li><li><p><strong>Конечные автоматы с магазинной памятью (Pushdown Automata):</strong> Конечные автоматы с магазинной памятью описываются с помощью:</p><ul><li>Диаграмм переходов с магазином (Pushdown Transition diagrams): Графическое представление с добавлением стека или магазина для хранения символов.</li><li>Таблиц переходов с магазином (Pushdown Transition tables): Таблицы переходов, в которых также учитывается состояние стека.</li></ul></li><li><p><strong>Машины Тьюринга (Turing Machines):</strong> Машины Тьюринга задаются с помощью:</p><ul><li>Таблиц переходов Тьюринга (Turing Transition tables): Таблицы, которые определяют правила перехода машины Тьюринга из одного состояния в другое на основе текущего символа и внутреннего состояния.</li><li>Функции переходов (Transition functions): Математические функции, определяющие переходы в зависимости от текущего состояния и символа на ленте.</li></ul></li><li><p><strong>Другие формальные языки:</strong> Абстрактные автоматы могут быть заданы с помощью различных формальных языков, таких как регулярные грамматики, контекстно-свободные грамматики и другие, которые определяют правила для обработки символов или строк.</p></li></ol><p>Каждый из этих способов задания предоставляет удобные инструменты для описания различных классов автоматов и их функциональности. Выбор конкретного способа зависит от конкретной задачи, которую нужно решить, и требований к модели автомата.</p></div>"],["Способы задания сетей Петри","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Сети Петри — это графические модели, используемые для представления параллельных и распределенных систем, производственных процессов, протоколов связи и других систем, которые включают в себя параллельные процессы и взаимодействия. Существуют различные способы задания сетей Петри, позволяющие создавать и анализировать такие модели. Ниже представлены основные способы задания сетей Петри:</p><ol><li><p><strong>Графический способ:</strong> Сети Петри могут быть изображены в виде графических диаграмм, которые состоят из двух основных элементов: переходов и позиций. Позиции представляют состояния системы, а переходы — события или операции, которые могут изменять состояние системы. Дуги связывают переходы с позициями и определяют потоки ресурсов или событий между ними.</p></li><li><p><strong>Матричный способ:</strong> В матричном способе задания сетей Петри используются матрицы для представления множества переходов, позиций и дуг. Например, можно использовать матрицу инцидентности для отображения связей между переходами и позициями, матрицу маркировки для представления текущего состояния системы и т.д.</p></li><li><p><strong>Эквивалентный язык программирования:</strong> Существуют специальные языки программирования, такие как CPN (Coloured Petri Nets), язык Petri Nets Markup Language (PNML) и др., которые позволяют описывать сети Петри в текстовом формате. Эти языки предоставляют стандартные синтаксисы для описания сетей Петри и их свойств.</p></li><li><p><strong>Интерактивные инструменты:</strong> Существуют программные инструменты и программы для создания сетей Петри с помощью интерактивных средств. В таких инструментах пользователи могут создавать сети Петри с помощью графических элементов и настраивать их свойства.</p></li><li><p><strong>Фреймворки моделирования:</strong> Сети Петри могут быть заданы с использованием фреймворков моделирования, таких как CPN Tools, PIPE (Platform Independent Petri Net Editor) и другие. Эти фреймворки предоставляют средства для создания, анализа и визуализации сетей Петри.</p></li></ol><p>Выбор способа задания сетей Петри зависит от предпочтений пользователя, сложности модели и доступных инструментов для анализа и работы с сетью Петри. Графический способ обычно более понятен для начинающих пользователей, в то время как использование языков программирования и фреймворков предоставляет большую гибкость и возможности для анализа и симуляции.</p></div>"],["Способы соединения конечных автоматов. Параллельное соединение","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Существует несколько способов соединения конечных автоматов, которые позволяют комбинировать несколько автоматов в один для выполнения более сложных задач. Один из таких способов - <strong>параллельное соединение</strong> конечных автоматов.</p><p><strong>Параллельное соединение (Parallel Composition):</strong>\\nПараллельное соединение - это один из методов соединения конечных автоматов, при котором два или более автомата работают независимо друг от друга, их входы и выходы объединяются, а переходы и состояния остаются независимыми.</p><p>Предположим, у нас есть два конечных автомата A и B:</p><p><strong>Автомат A:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>yaml</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-yaml\\"><span class=\\"hljs-attr\\">Alphabet:</span> {<span class=\\"hljs-string\\">a</span>, <span class=\\"hljs-string\\">b</span>}\\n<span class=\\"hljs-attr\\">States:</span> {<span class=\\"hljs-string\\">q0</span>, <span class=\\"hljs-string\\">q1</span>}\\n<span class=\\"hljs-attr\\">Start state:</span> <span class=\\"hljs-string\\">q0</span>\\n<span class=\\"hljs-attr\\">Accepting state:</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-attr\\">Transitions:</span>\\n<span class=\\"hljs-string\\">(q0,</span> <span class=\\"hljs-string\\">a)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-string\\">(q0,</span> <span class=\\"hljs-string\\">b)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q0</span>\\n<span class=\\"hljs-string\\">(q1,</span> <span class=\\"hljs-string\\">a)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-string\\">(q1,</span> <span class=\\"hljs-string\\">b)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q0</span>\\n</code></div></div></pre><p><strong>Автомат B:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>yaml</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-yaml\\"><span class=\\"hljs-attr\\">Alphabet:</span> {<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>}\\n<span class=\\"hljs-attr\\">States:</span> {<span class=\\"hljs-string\\">s0</span>, <span class=\\"hljs-string\\">s1</span>}\\n<span class=\\"hljs-attr\\">Start state:</span> <span class=\\"hljs-string\\">s0</span>\\n<span class=\\"hljs-attr\\">Accepting state:</span> <span class=\\"hljs-string\\">s1</span>\\n<span class=\\"hljs-attr\\">Transitions:</span>\\n<span class=\\"hljs-string\\">(s0,</span> <span class=\\"hljs-number\\">0</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s0</span>\\n<span class=\\"hljs-string\\">(s0,</span> <span class=\\"hljs-number\\">1</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s1</span>\\n<span class=\\"hljs-string\\">(s1,</span> <span class=\\"hljs-number\\">0</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s0</span>\\n<span class=\\"hljs-string\\">(s1,</span> <span class=\\"hljs-number\\">1</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">s1</span>\\n</code></div></div></pre><p>Теперь объединим автоматы A и B параллельно, чтобы получить новый автомат C.</p><p><strong>Параллельное соединение C:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>rust</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-rust\\">Alphabet: {a, b, <span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>}\\nStates: {(q0, s0), (q0, s1), (q1, s0), (q1, s1)}\\nStart state: (q0, s0)\\nAccepting states: {(q1, s1)}\\nTransitions:\\n((q0, s0), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q0, s0), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s0), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s0), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q0, s1), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q0, s1), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s1), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q0, s1), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q1, s0), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q1, s0), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q1, s0), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q1, s0), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q1, s1), a) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n((q1, s1), b) <span class=\\"hljs-punctuation\\">-&gt;</span> (q0, s0)\\n((q1, s1), <span class=\\"hljs-number\\">0</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s0)\\n((q1, s1), <span class=\\"hljs-number\\">1</span>) <span class=\\"hljs-punctuation\\">-&gt;</span> (q1, s1)\\n</code></div></div></pre><p>Таким образом, автомат C получен путем параллельного соединения автоматов A и B. Он может обрабатывать входные символы из объединенных алфавитов и выполнять операции, которые происходят независимо друг от друга в автоматах A и B.</p></div>"],["Способы соединения конечных автоматов. Соединение с обратной связью","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Соединение с обратной связью (Feedback Concatenation):</strong></p><p>Соединение с обратной связью - это метод соединения конечных автоматов, который позволяет создавать автоматы с циклическим поведением или обратной связью. При таком соединении выход автомата подается на его вход, что позволяет автомату \\"запоминать\\" предыдущие состояния и, таким образом, обрабатывать последовательности символов с более сложным поведением.</p><p>Процесс соединения с обратной связью можно представить следующим образом:</p><ol><li>Берется исходный конечный автомат (назовем его автоматом A).</li><li>К выходу автомата A подключается его вход, создавая тем самым обратную связь.</li><li>Автоматы A и его копия (обратная связь) работают совместно, обрабатывая входные символы и передавая состояния друг другу.</li></ol><p>Такой подход позволяет создавать автоматы, способные распознавать или генерировать более сложные языки, включая контекстно-зависимые языки.</p><p>Пример соединения с обратной связью:</p><p>Допустим, у нас есть автомат A, который распознает язык L1, состоящий из нулей и единиц, где каждая последовательность начинается с 0 и заканчивается 1:</p><p><strong>Автомат A:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>yaml</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-yaml\\"><span class=\\"hljs-attr\\">Alphabet:</span> {<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>}\\n<span class=\\"hljs-attr\\">States:</span> {<span class=\\"hljs-string\\">q0</span>, <span class=\\"hljs-string\\">q1</span>}\\n<span class=\\"hljs-attr\\">Start state:</span> <span class=\\"hljs-string\\">q0</span>\\n<span class=\\"hljs-attr\\">Accepting state:</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-attr\\">Transitions:</span>\\n<span class=\\"hljs-string\\">(q0,</span> <span class=\\"hljs-number\\">0</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q1</span>\\n<span class=\\"hljs-string\\">(q1,</span> <span class=\\"hljs-number\\">1</span><span class=\\"hljs-string\\">)</span> <span class=\\"hljs-string\\">-&gt;</span> <span class=\\"hljs-string\\">q0</span>\\n</code></div></div></pre><p>Теперь объединим автомат A с его копией через обратную связь, чтобы получить новый автомат B:</p><p><strong>Соединение с обратной связью B:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>vbnet</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-vbnet\\"><span class=\\"hljs-symbol\\">Alphabet:</span> {<span class=\\"hljs-number\\">0</span>, <span class=\\"hljs-number\\">1</span>}\\n<span class=\\"hljs-symbol\\">States:</span> {(q0, q0<span class=\\"hljs-comment\\">\'), (q0, q1\'), (q1, q0\'), (q1, q1\')}</span>\\nStart state: (q0, q0<span class=\\"hljs-comment\\">\')</span>\\nAccepting state: (q0, q1<span class=\\"hljs-comment\\">\')</span>\\n<span class=\\"hljs-symbol\\">Transitions:</span>\\n((q0, q0<span class=\\"hljs-comment\\">\'), 0) -&gt; (q1, q0\')   (автомат A)</span>\\n((q0, q0<span class=\\"hljs-comment\\">\'), 1) -&gt; (q0, q0\')</span>\\n((q0, q1<span class=\\"hljs-comment\\">\'), 0) -&gt; (q1, q0\')   (обратная связь)</span>\\n((q0, q1<span class=\\"hljs-comment\\">\'), 1) -&gt; (q0, q1\')</span>\\n((q1, q0<span class=\\"hljs-comment\\">\'), 0) -&gt; (q1, q0\')</span>\\n((q1, q0<span class=\\"hljs-comment\\">\'), 1) -&gt; (q0, q0\')</span>\\n((q1, q1<span class=\\"hljs-comment\\">\'), 0) -&gt; (q1, q0\')</span>\\n((q1, q1<span class=\\"hljs-comment\\">\'), 1) -&gt; (q0, q1\')</span>\\n</code></div></div></pre><p>В результате автомат B будет способен обрабатывать последовательности символов, принадлежащие языку L1, так как он содержит обратную связь, позволяющую \\"запомнить\\" состояние и продолжить обработку входных данных.</p></div>"],["Типы КС-языков. Нисходящие и восходящие распознаватели","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Типы контекстно-свободных (КС) языков:</strong></p><p>Контекстно-свободные языки - это класс формальных языков, которые могут быть заданы с помощью контекстно-свободной грамматики. Они обладают более высокой выразительной мощностью, чем регулярные языки, и используются для описания более сложных структур и синтаксических правил. Важным свойством КС-языков является наличие контекстно-свободной грамматики, которая определяет их синтаксис.</p><p><strong>Нисходящие (Top-Down) распознаватели:</strong></p><p>Нисходящие распознаватели - это метод анализа синтаксиса, при котором анализатор начинает с верхнего уровня структуры (например, с символа стартового нетерминала) и рекурсивно спускается вниз по грамматике, пытаясь разобрать входную строку. Они строят вывод дерева разбора сверху вниз и используют различные правила для разбора и распознавания языка. Примечательными нисходящими анализаторами являются рекурсивный спуск и метод предсказывающего анализа (Predictive Parsing).</p><p><strong>Восходящие (Bottom-Up) распознаватели:</strong></p><p>Восходящие распознаватели - это метод анализа синтаксиса, при котором анализатор начинает с токенов входной строки и пытается построить дерево разбора, двигаясь \\"снизу вверх\\" по грамматике. Они строят вывод дерева разбора от листьев к корню и используют правила свертки для обработки входных данных и определения их соответствия грамматике. Примечательными восходящими анализаторами являются метод LR (слева направо, правое выводимое) и метод LALR (Look-Ahead LR).</p><p>Оба типа распознавателей (нисходящие и восходящие) используются для синтаксического анализа, чтобы определить, соответствует ли входная строка заданной грамматике, и в случае успешного разбора, построить структуру вывода, такую как дерево разбора. Выбор между ними зависит от структуры грамматики и особенностей языка, который требуется разобрать.</p></div>"],["Формальные языки и формальные грамматики","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Формальные языки и формальные грамматики:</strong></p><p><strong>Формальные языки</strong> - это абстрактные множества символов, которые определяются с помощью формальных правил. Они широко используются в информатике, лингвистике и других дисциплинах для описания и анализа языковых структур и систем.</p><p><strong>Формальные грамматики</strong> - это формальные системы правил, которые определяют формальные языки. Формальная грамматика состоит из конечного набора правил, которые определяют, какие строки могут быть считаны входным языком, а какие нет.</p><p>Формальные грамматики обычно состоят из четырех компонентов:</p><ol><li><p><strong>Алфавит (Alphabet):</strong> Это конечное множество символов, которые могут использоваться для создания строк языка.</p></li><li><p><strong>Набор нетерминалов (Non-terminals):</strong> Это конечное множество символов, которые представляют собой абстрактные единицы или \\"переменные\\" в правилах грамматики. Нетерминалы заменяются на строки символов с помощью правил вывода.</p></li><li><p><strong>Начальный символ (Start symbol):</strong> Это один нетерминал из множества нетерминалов, который представляет начальное состояние грамматики. Процесс вывода строки начинается с этого символа.</p></li><li><p><strong>Правила вывода (Production rules):</strong> Это набор правил, которые определяют замену нетерминалов на строки символов. Правила задают, как одни символы заменяются другими в процессе вывода строки.</p></li></ol><p>Формальные грамматики классифицируются на различные типы, включая:</p><ul><li><p><strong>Регулярные грамматики:</strong> Определяют регулярные языки и используются для описания последовательностей символов с ограниченным контекстом, которые могут быть распознаны конечными автоматами.</p></li><li><p><strong>Контекстно-свободные грамматики:</strong> Определяют контекстно-свободные языки и используются для описания структурных характеристик языков, таких как вложенные скобки и синтаксические правила.</p></li><li><p><strong>Контекстно-зависимые грамматики:</strong> Определяют контекстно-зависимые языки и используются для описания языков с более сложными структурами, зависящими от контекста.</p></li><li><p><strong>Рекурсивно перечислимые грамматики:</strong> Определяют рекурсивно перечислимые языки, которые могут быть распознаны машиной Тьюринга.</p></li></ul><p>Формальные грамматики представляют собой мощный инструмент для описания языков и их синтаксиса, и они широко используются в компиляторах, обработке естественного языка, лингвистике и других областях информатики и науки о языке.</p></div>"]],"Исследование операций":[["Графический способ решения задач линейного программирования.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Графический способ решения задач линейного программирования:</strong></p><p>Графический способ решения задач линейного программирования используется для нахождения оптимального решения в задачах оптимизации с линейной целевой функцией и линейными ограничениями. Он применим только для задач с двумя переменными, так как он представляет решение на плоскости.</p><p>Шаги графического решения задачи линейного программирования:</p><ol><li><p><strong>Составление ограничений:</strong> Сначала необходимо записать ограничения задачи линейного программирования в виде системы линейных уравнений или неравенств.</p></li><li><p><strong>Построение координатной системы:</strong> На плоскости строится координатная система, где оси представляют значения переменных (x и y).</p></li><li><p><strong>Построение линий ограничений:</strong> Для каждого ограничения находим его уравнение или неравенство и строим соответствующую линию на графике.</p></li><li><p><strong>Определение допустимой области:</strong> Допустимая область представляет собой область на плоскости, которая удовлетворяет всем ограничениям задачи. Это область, которая ограничена пересечением линий ограничений.</p></li><li><p><strong>Построение линии уровня целевой функции:</strong> Целевая функция также представляется линией на графике. Эта линия называется линией уровня. Если задача является задачей на максимум, линия уровня обозначает направление роста значения целевой функции, и наилучшее решение будет находиться на самой высокой точке допустимой области. Если задача является задачей на минимум, линия уровня обозначает направление убывания значения целевой функции, и наилучшее решение будет находиться на самой низкой точке допустимой области.</p></li><li><p><strong>Нахождение оптимального решения:</strong> Оптимальное решение задачи будет точкой на допустимой области, где линия уровня целевой функции достигает наибольшего значения (в задачах на максимум) или наименьшего значения (в задачах на минимум).</p></li></ol><p>Графический метод предоставляет интуитивное представление решения задачи линейного программирования и может быть полезен для простых задач с двумя переменными. Однако для более сложных задач с большим количеством переменных чаще используются более эффективные методы, такие как симплекс-метод.</p></div>"],["Динамическое программирование.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Динамическое программирование:</strong></p><p>Динамическое программирование - это метод решения оптимизационных задач, который использует принцип оптимальности и повторное использование промежуточных результатов для сокращения времени выполнения. Этот подход применяется в ситуациях, когда задача может быть разбита на подзадачи, и оптимальное решение для исходной задачи может быть получено путем комбинирования оптимальных решений для подзадач.</p><p>Основные черты динамического программирования:</p><ol><li><p><strong>Мемоизация:</strong> Для избежания повторных вычислений и повышения эффективности, динамическое программирование использует мемоизацию (или запоминание). Результаты решения подзадач сохраняются в памяти, и если эти результаты понадобятся снова, они могут быть получены непосредственно из памяти без повторных вычислений.</p></li><li><p><strong>Рекурсия или итерация:</strong> Динамическое программирование может быть реализовано с использованием рекурсии или итерации (циклическим подходом). В рекурсивной форме, задача разбивается на подзадачи, и функция решения вызывает саму себя для решения каждой подзадачи. В итеративной форме, решение строится последовательно, начиная с меньших подзадач и постепенно переходя к исходной задаче.</p></li><li><p><strong>Оптимальная подструктура:</strong> Для успешного применения динамического программирования, задача должна обладать оптимальной подструктурой. Это означает, что оптимальное решение для исходной задачи может быть получено из оптимальных решений ее подзадач.</p></li><li><p><strong>Перекрытие подзадач:</strong> Динамическое программирование решает множество подзадач, и эти подзадачи могут иметь общие части. Задачи перекрываются, что позволяет избежать повторных вычислений и ускоряет процесс решения.</p></li></ol><p>Динамическое программирование находит широкое применение в различных областях, таких как оптимизация, алгоритмы, экономика, биоинформатика, и т.д. Оно позволяет эффективно решать сложные задачи, которые могут быть разложены на меньшие, независимые подзадачи.</p></div>"],["Классификация систем массового обслуживания.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Классификация систем массового обслуживания:</strong></p><p>Системы массового обслуживания (СМО) - это системы, в которых поступают заявки (запросы, клиенты) на обслуживание, и они обслуживаются определенными обслуживающими устройствами (серверами). Классификация СМО базируется на различных характеристиках системы и ее элементов:</p><ol><li><p><strong>Число каналов обслуживания (серверов):</strong></p><ul><li>Одноканальные СМО: В системе есть только один канал обслуживания (один сервер).</li><li>Многоканальные СМО: В системе есть несколько параллельных каналов обслуживания (несколько серверов).</li></ul></li><li><p><strong>Число очередей:</strong></p><ul><li>Системы с одной очередью: Заявки стоят в одной общей очереди и обслуживаются по мере доступности серверов.</li><li>Системы с несколькими очередями: Заявки могут быть направлены в различные очереди в зависимости от некоторых критериев (например, приоритета).</li></ul></li><li><p><strong>Порядок обслуживания:</strong></p><ul><li>Первым пришел - первым обслужен (FIFO): Заявки обслуживаются в том порядке, в котором они пришли в систему.</li><li>Случайный порядок: Заявки обслуживаются случайным образом.</li><li>Приоритетное обслуживание: Заявки обслуживаются в соответствии с их приоритетами.</li></ul></li><li><p><strong>Распределение времени обслуживания:</strong></p><ul><li>Постоянное время обслуживания: Время обслуживания для каждой заявки постоянно и одинаково для всех заявок.</li><li>Случайное время обслуживания: Время обслуживания каждой заявки случайно и может различаться.</li></ul></li><li><p><strong>Ожидание и отказ:</strong></p><ul><li>Системы с ожиданием: Заявки ожидают своей очереди на обслуживание, если серверы заняты.</li><li>Системы с отказами: Если все серверы заняты, новые заявки могут быть отклонены.</li></ul></li><li><p><strong>Природа поступления заявок:</strong></p><ul><li>Поток Пуассона: Заявки поступают в систему по процессу Пуассона, который характеризуется случайными интервалами между поступлениями.</li><li>Детерминированный поток: Заявки поступают в систему с фиксированным интервалом между поступлениями.</li></ul></li></ol><p>Классификация СМО позволяет определить основные характеристики системы и выбрать наиболее подходящие методы и модели для анализа и оптимизации производительности системы обслуживания.</p></div>"],["Критерии завершенности тестирования.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Критерии завершенности тестирования:</strong></p><p>Критерии завершенности тестирования - это условия или стандарты, которые определяют, когда тестирование программного продукта или системы считается полностью выполненным. Завершение тестирования указывает на то, что выполнены все необходимые шаги и проверки для обеспечения качества и готовности продукта к выпуску или внедрению. Критерии завершенности помогают обеспечить достаточное покрытие тестирования и максимально возможное выявление ошибок и проблем.</p><p>Некоторые общие критерии завершенности тестирования включают:</p><ol><li><p><strong>Покрытие тестирования:</strong> Критерий, который оценивает, какой процент кода, функциональности или требований был протестирован и проверен.</p></li><li><p><strong>Количество и серьезность ошибок:</strong> Критерий, основанный на количестве обнаруженных ошибок и их степени серьезности. Завершенность может быть достигнута, когда определенный порог ошибок удовлетворен или когда все критические ошибки устранены.</p></li><li><p><strong>Исполнение всех тестовых сценариев:</strong> Критерий, устанавливающий, что все запланированные тестовые сценарии и случаи были выполнены и успешно прошли.</p></li><li><p><strong>Успешность тестовых циклов:</strong> Критерий, основанный на успехе различных тестовых циклов или этапов тестирования, таких как модульное тестирование, интеграционное тестирование, системное тестирование и т.д.</p></li><li><p><strong>Соответствие требованиям:</strong> Критерий, который проверяет, что продукт или система соответствует предоставленным требованиям и спецификациям.</p></li><li><p><strong>Завершение документации:</strong> Критерий, основанный на завершении всех необходимых документов и отчетов о тестировании.</p></li><li><p><strong>Подтверждение заказчиком или командой:</strong> В некоторых случаях, тестирование может считаться завершенным после получения одобрения или подтверждения от заказчика или команды разработки.</p></li></ol><p>Критерии завершенности тестирования могут варьироваться в зависимости от типа проекта, характеристик продукта и контекста. Они обычно определяются в начале тестирования в соответствии с целями и требованиями проекта, и следует стремиться выполнить все критерии перед выпуском или внедрением продукта.</p></div>"],["Линейное программирование. Основные понятия линейного программирования.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Линейное программирование:</strong></p><p>Линейное программирование (ЛП) - это метод оптимизации, который используется для решения математических моделей, в которых целевая функция и ограничения представлены линейными функциями. Он позволяет найти оптимальное решение задачи при условии линейной зависимости между переменными.</p><p><strong>Основные понятия линейного программирования:</strong></p><ol><li><p><strong>Целевая функция (ЦФ):</strong> Это функция, которая должна быть минимизирована или максимизирована в рамках задачи линейного программирования. Она обычно представляет собой линейное выражение от переменных решения и может иметь форму \\"Минимизировать (или Максимизировать) Z = c₁x₁ + c₂x₂ + ... + cₙxₙ\\", где c₁, c₂, ..., cₙ - коэффициенты при переменных x₁, x₂, ..., xₙ.</p></li><li><p><strong>Ограничения:</strong> Ограничения представляют собой набор линейных уравнений или неравенств, которые ограничивают допустимую область переменных. Они определяют допустимые значения переменных и формируют границы, в которых должно находиться оптимальное решение.</p></li><li><p><strong>Переменные решения:</strong> Переменные решения - это неизвестные величины, которые необходимо найти для достижения оптимального результата. Они представляют собой значения, которые мы хотим определить или найти.</p></li><li><p><strong>Допустимая область:</strong> Допустимая область - это область в пространстве переменных, которая удовлетворяет всем ограничениям задачи. Она образуется пересечением всех ограничений.</p></li><li><p><strong>Условие неотрицательности:</strong> В большинстве задач линейного программирования предполагается, что переменные решения должны быть неотрицательными (x₁ ≥ 0, x₂ ≥ 0, ..., xₙ ≥ 0), то есть их значения не могут быть отрицательными.</p></li><li><p><strong>Решение задачи:</strong> Решение задачи линейного программирования - это набор значений переменных решения, которые удовлетворяют всем ограничениям и оптимизируют значение целевой функции (минимизируют или максимизируют его).</p></li></ol><p>Линейное программирование имеет широкий спектр применения в экономике, производственной деятельности, логистике, финансах и других областях, где необходимо оптимизировать ресурсы и принимать решения на основе линейных ограничений и целевых функций.</p></div>"],["Математическая модель транспортной задачи.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Математическая модель транспортной задачи:</strong></p><p>Транспортная задача является одной из классических задач линейного программирования и используется для оптимизации транспортных и поставочных проблем. Эта задача связана с определением оптимального плана перевозки товаров из источников (поставщиков) к потребителям с минимальными затратами или максимальной прибылью.</p><p>Предположим, у нас есть m источников и n потребителей, и каждый источник предоставляет определенное количество товара (производственные мощности), которое нужно доставить к потребителям. Целью транспортной задачи является определение оптимального плана перевозок, чтобы удовлетворить потребности потребителей и минимизировать общие транспортные затраты или максимизировать прибыль.</p><p>Предположим, что:</p><ul><li>aᵢ - количество товара, доступного на i-м источнике (поставщике).</li><li>bⱼ - потребность в товаре у j-го потребителя.</li><li>cᵢⱼ - стоимость перевозки единицы товара из i-го источника к j-му потребителю.</li></ul><p>Математическая модель транспортной задачи записывается следующим образом:</p><p><strong>Минимизировать:</strong>\\nZ = ΣᵢΣⱼ (cᵢⱼ * xᵢⱼ)</p><p><strong>При условии:</strong></p><ol><li>Σⱼ xᵢⱼ ≤ aᵢ, для каждого источника i.</li><li>Σᵢ xᵢⱼ = bⱼ, для каждого потребителя j.</li><li>xᵢⱼ ≥ 0, для всех i и j.</li></ol><p>Где:</p><ul><li>xᵢⱼ - количество товара, перевозимого из источника i к потребителю j.</li></ul><p>Целевая функция Z определяет общие транспортные затраты или прибыль, а ограничения (условия) обеспечивают, чтобы потребности потребителей были удовлетворены, и все поставщики не превысили свои производственные мощности.</p><p>Транспортные задачи могут быть решены с использованием различных методов оптимизации, таких как метод северо-западного угла, метод минимальной стоимости, метод потенциалов (метод симплекса) и другие.</p></div>"],["Метод наименьшего элемента. Метод потенциалов. (Транспортная задача)","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Метод наименьшего элемента и метод потенциалов в решении транспортной задачи:</strong></p><p><strong>Метод наименьшего элемента:</strong></p><p>Метод наименьшего элемента является одним из классических методов решения транспортной задачи. Он основан на выборе клетки с наименьшей стоимостью перевозки (наименьший элемент) в таблице перевозок и выполнении перевозки в эту клетку максимально возможного объема товара. После каждой перевозки проверяется удовлетворение условий ограничений и уменьшается нужное количество товара в соответствующих строках и столбцах. Этот процесс повторяется до тех пор, пока все потребности потребителей и ограничения источников не будут удовлетворены.</p><p>Шаги метода наименьшего элемента:</p><ol><li>Найти клетку с наименьшей стоимостью перевозки в таблице.</li><li>Выполнить перевозку максимально возможного объема товара в эту клетку.</li><li>Уменьшить нужное количество товара в соответствующих строках и столбцах.</li><li>Повторить шаги 1-3 до тех пор, пока все потребности потребителей и ограничения источников не будут удовлетворены.</li></ol><p><strong>Метод потенциалов:</strong></p><p>Метод потенциалов, также известный как метод симплекса для транспортных задач, является более эффективным и точным методом решения транспортной задачи. Он использует понятие потенциалов (цен) для определения оптимального решения. В этом методе цены присваиваются всем клеткам таблицы перевозок и затем рассчитываются потенциалы для строк и столбцов. Затем производится проверка на удовлетворение условий ограничений и наличие затрато-оптимального решения.</p><p>Шаги метода потенциалов:</p><ol><li>Начать с некоторого допустимого базисного плана, например, методом северо-западного угла или методом наименьшего элемента.</li><li>Рассчитать потенциалы (цены) для всех клеток таблицы перевозок, используя решение из шага 1.</li><li>Рассчитать потенциалы для строк и столбцов с помощью уравнений потенциалов (цен).</li><li>Проверить условия оптимальности и определить, достигнуто ли затрато-оптимальное решение. Если условия оптимальности не выполняются, выполнить пересчет базисного плана и повторить шаги 2-4 до достижения оптимального решения.</li></ol><p>Метод потенциалов обладает более высокой точностью и эффективностью по сравнению с методом наименьшего элемента, особенно для больших транспортных задач. Он также может быть применен для решения недопустимых задач или задач с неравными потребностями и производственными мощностями.</p></div>"],["Методология и методы принятия решений.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Методология и методы принятия решений:</strong></p><p><strong>Методология принятия решений:</strong></p><p>Методология принятия решений - это системный подход к процессу принятия решений, который включает в себя различные этапы, методы и техники, направленные на анализ проблемы, оценку альтернатив и выбор оптимального решения. Методология принятия решений помогает структурировать процесс принятия решений и повышает вероятность принятия обоснованных и эффективных решений.</p><p>Основные этапы методологии принятия решений включают:</p><ol><li><p><strong>Определение проблемы:</strong> Первый этап заключается в определении суть и характера проблемы или решаемой задачи, а также выявлении целей и ограничений.</p></li><li><p><strong>Сбор и анализ информации:</strong> На этом этапе собирается необходимая информация, проводится ее анализ и оценка, выявляются альтернативы и возможные решения.</p></li><li><p><strong>Разработка альтернатив:</strong> В этом этапе формируются различные альтернативы или варианты решений, которые могут быть рассмотрены.</p></li><li><p><strong>Оценка альтернатив:</strong> Альтернативы оцениваются по определенным критериям и показателям для определения их преимуществ и недостатков.</p></li><li><p><strong>Выбор решения:</strong> На основе результатов оценки альтернатив выбирается наилучшее решение, которое соответствует целям и ограничениям проблемы.</p></li><li><p><strong>Реализация решения:</strong> После выбора решения приступают к его реализации и внедрению.</p></li><li><p><strong>Контроль и оценка результатов:</strong> Контролируется выполнение выбранного решения и оценивается его эффективность.</p></li></ol><p><strong>Методы принятия решений:</strong></p><p>Методы принятия решений - это конкретные инструменты и техники, которые используются для оценки альтернатив и поддержки процесса принятия решений. Существует множество методов принятия решений, и выбор конкретного метода зависит от типа проблемы и ее характеристик.</p><p>Некоторые из распространенных методов принятия решений включают:</p><ul><li><strong>Метод взвешенных критериев:</strong> Позволяет оценить альтернативы на основе взвешенных критериев, учитывая их относительную важность.</li><li><strong>Метод анализа иерархий (МАИ):</strong> Использует иерархическую структуру для оценки альтернатив и определения наилучшего варианта.</li><li><strong>Метод сетей Перри (PERT):</strong> Применяется для анализа времени выполнения проектов и определения вероятных сроков завершения.</li><li><strong>Метод экспертных оценок:</strong> Включает в себя опрос экспертов и специалистов для получения информации и мнений о различных альтернативах.</li><li><strong>Байесовский анализ:</strong> Основан на теории вероятности и используется для обработки неопределенности и статистических данных при принятии решений.</li></ul><p>Выбор конкретного метода зависит от сложности проблемы, доступных данных и желаемой точности принятия решения. Часто в реальной жизни комбинируют несколько методов для получения более полной и надежной информации для принятия решений.</p></div>"],["Описание алгоритма Симплекс-метода","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Описание алгоритма Симплекс-метода:</strong></p><p>Симплекс-метод - это эффективный алгоритм линейного программирования, который позволяет найти оптимальное решение задачи линейного программирования. Он разработан для решения задач с линейной целевой функцией и линейными ограничениями. Алгоритм работает в пространстве переменных задачи и перемещается по вершинам (угловым точкам) допустимой области до достижения оптимального решения.</p><p>Шаги алгоритма Симплекс-метода:</p><ol><li><p><strong>Перевод в стандартную форму:</strong> Если задача не находится в стандартной форме (максимизация с неотрицательными переменными), она преобразуется к стандартной форме.</p></li><li><p><strong>Создание симплекс-таблицы:</strong> Строится симплекс-таблица, которая включает все переменные и их коэффициенты, а также базисные переменные, значения которых равны ограничениям.</p></li><li><p><strong>Выбор начального базиса:</strong> Выбираются базисные переменные, которые образуют исходный базис (ненулевые элементы в столбце правой части таблицы).</p></li><li><p><strong>Определение разрешающего элемента:</strong> Выбирается разрешающий элемент из симплекс-таблицы. Разрешающий элемент - это наименьший элемент в столбце целевой функции (значения Z) среди всех отрицательных элементов.</p></li><li><p><strong>Пересчет симплекс-таблицы:</strong> Производится пересчет элементов в симплекс-таблице с использованием выбранного разрешающего элемента. Этот шаг включает деление разрешающей строки на разрешающий элемент и обновление остальных элементов таблицы, чтобы получить новый опорный план.</p></li><li><p><strong>Проверка оптимальности:</strong> Проверяется оптимальность текущего опорного плана. Если все значения в строке целевой функции (кроме значения Z) положительны или нулевые, то текущий опорный план является оптимальным решением. В противном случае, переходим на шаг 4 для поиска нового разрешающего элемента и пересчета таблицы.</p></li><li><p><strong>Получение оптимального решения:</strong> Когда оптимальный опорный план достигнут, находится оптимальное значение целевой функции (максимум или минимум, в зависимости от постановки задачи) и соответствующие значения переменных.</p></li></ol><p>Алгоритм Симплекс-метода может быть представлен в итерационной форме, и он продолжает двигаться по вершинам допустимой области, пока не достигнет оптимального решения.</p></div>"],["Основные понятия исследования операций","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Основные понятия исследования операций:</strong></p><p>Исследование операций (Operations Research, OR) - это научно-методическая дисциплина, которая использует математические, статистические и аналитические методы для анализа сложных систем и принятия оптимальных решений. Основной целью исследования операций является оптимизация процессов и ресурсов, чтобы улучшить эффективность и эффективность принятия решений в различных областях.</p><p>Ниже приведены основные понятия, связанные с исследованием операций:</p><ol><li><p><strong>Модель:</strong> Модель представляет собой упрощенное математическое описание реальной системы или процесса. Модели позволяют анализировать и предсказывать поведение системы, а также оценивать различные стратегии и решения.</p></li><li><p><strong>Оптимизация:</strong> Оптимизация в исследовании операций означает поиск наилучшего решения среди доступных альтернатив. Целью оптимизации может быть максимизация прибыли, минимизация затрат, оптимальное распределение ресурсов и другие критерии.</p></li><li><p><strong>Линейное программирование:</strong> Линейное программирование (Linear Programming, LP) - это метод оптимизации, который используется для решения задач с линейной целевой функцией и линейными ограничениями.</p></li><li><p><strong>Целочисленное программирование:</strong> Целочисленное программирование (Integer Programming, IP) - это метод оптимизации, в котором переменные решения ограничены целочисленными значениями. Этот метод используется для решения задач, в которых решения должны быть дискретными.</p></li><li><p><strong>Сетевой анализ:</strong> Сетевой анализ используется для моделирования и анализа сложных сетевых систем, таких как графики проектов, системы маршрутизации и др.</p></li><li><p><strong>Теория очередей:</strong> Теория очередей изучает процессы обслуживания и управления потоками в системах массового обслуживания.</p></li><li><p><strong>Методы принятия решений:</strong> Исследование операций предоставляет различные методы и техники для принятия решений, такие как симплекс-метод, метод взвешенных критериев, метод анализа иерархий и т.д.</p></li><li><p><strong>Статистические методы:</strong> Исследование операций использует статистические методы для обработки данных, оценки вероятностей и принятия статистических выводов.</p></li><li><p><strong>Моделирование симуляции:</strong> Симуляция используется для создания моделей систем, которые имитируют реальное поведение и позволяют проводить эксперименты без риска и затрат реальной системы.</p></li></ol><p>Исследование операций широко применяется в различных областях, таких как логистика, производство, финансы, транспорт, здравоохранение и другие, чтобы помочь в принятии решений на основе анализа данных и оптимизации ресурсов.</p></div>"],["Теория массового обслуживания. Цель и задачи теории массового обслуживания.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Теория массового обслуживания:</strong></p><p>Теория массового обслуживания (Queueing Theory) - это раздел исследования операций, который занимается анализом и моделированием систем массового обслуживания, в которых клиенты (заявки, требования) поступают в систему, ожидают обслуживания и, наконец, обслуживаются. Эта теория является основным инструментом для анализа производительности систем с очередями, таких как кассы в магазинах, серверы в компьютерных сетях, операционные залы в больницах и т.д.</p><p><strong>Цель теории массового обслуживания:</strong></p><p>Основной целью теории массового обслуживания является анализ и оптимизация производительности систем массового обслуживания. Она стремится предоставить количественные оценки для различных характеристик таких систем, таких как:</p><ul><li>Среднее время ожидания клиентов в очереди.</li><li>Среднее время обслуживания клиентов.</li><li>Вероятность ожидания в очереди.</li><li>Вероятность отказа в обслуживании.</li><li>Загрузка и использование ресурсов системы.</li></ul><p><strong>Задачи теории массового обслуживания:</strong></p><p>Теория массового обслуживания решает ряд задач, связанных с анализом и оптимизацией производительности систем с очередями. Некоторые из основных задач включают:</p><ol><li><p><strong>Анализ системы массового обслуживания:</strong> Основная задача - это анализ характеристик системы, таких как среднее время ожидания, среднее время обслуживания, вероятность ожидания, вероятность отказа и других показателей производительности.</p></li><li><p><strong>Определение оптимальных параметров:</strong> Теория массового обслуживания помогает определить оптимальные параметры системы, которые обеспечивают оптимальное использование ресурсов и минимизацию времени ожидания клиентов.</p></li><li><p><strong>Прогнозирование производительности:</strong> Опираясь на анализ системы, теория массового обслуживания позволяет предсказать будущую производительность и возможные проблемы, которые могут возникнуть при увеличении нагрузки на систему.</p></li><li><p><strong>Проектирование и оптимизация системы:</strong> Теория массового обслуживания помогает разрабатывать и оптимизировать системы с очередями, чтобы они могли эффективно обрабатывать клиентов и удовлетворять их потребности.</p></li></ol><p>Теория массового обслуживания находит применение в различных областях, включая транспортные сети, телекоммуникации, информационные системы, производственные процессы, общественное здравоохранение и другие, где эффективное управление потоками и ресурсами является ключевым фактором для обеспечения качества обслуживания и оптимизации производительности.</p></div>"],["Транспортная задача. Постановка задачи.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Транспортная задача: Постановка задачи</strong></p><p>Транспортная задача является одной из классических задач линейного программирования и является частным случаем задачи о назначениях. Она моделирует проблему оптимального распределения ресурсов из источников в пункты потребления с минимальными затратами или максимизацией выгоды.</p><p><strong>Постановка задачи:</strong></p><p>Пусть у нас имеется m источников (фабрик, складов и т.д.) и n пунктов потребления (магазинов, покупателей и т.д.). Каждый источник имеет определенное количество единиц ресурса (товара, продукции), которое он может предоставить, и каждый пункт потребления имеет определенную потребность в ресурсах.</p><p>Задача состоит в том, чтобы определить, как распределить ресурсы из источников в пункты потребления так, чтобы удовлетворить потребности всех пунктов потребления и при этом минимизировать или максимизировать общие затраты (стоимость транспортировки или общую выгоду).</p><p>Основные параметры транспортной задачи:</p><ul><li><strong>m:</strong> Количество источников ресурсов.</li><li><strong>n:</strong> Количество пунктов потребления.</li><li><strong>a&lt;sub&gt;i&lt;/sub&gt;:</strong> Объем ресурсов (товаров) доступных в i-ом источнике (i = 1, 2, ..., m).</li><li><strong>b&lt;sub&gt;j&lt;/sub&gt;:</strong> Потребность в ресурсах (товарах) в j-ом пункте потребления (j = 1, 2, ..., n).</li><li><strong>c&lt;sub&gt;ij&lt;/sub&gt;:</strong> Затраты (стоимость) транспортировки единицы ресурса из i-ого источника в j-ый пункт потребления.</li></ul><p><strong>Целевая функция:</strong>\\nТранспортная задача имеет цель минимизации или максимизации общих затрат (стоимости) транспортировки ресурсов из источников в пункты потребления. Целевая функция определяется следующим образом:</p><p><strong>Минимизация затрат:</strong>\\nMinimize Σ&lt;sub&gt;i=1 to m&lt;/sub&gt; Σ&lt;sub&gt;j=1 to n&lt;/sub&gt; (c&lt;sub&gt;ij&lt;/sub&gt; * x&lt;sub&gt;ij&lt;/sub&gt;), где x&lt;sub&gt;ij&lt;/sub&gt; - количество ресурсов, транспортированных из i-ого источника в j-ый пункт потребления.</p><p><strong>Максимизация выгоды (при необходимости):</strong>\\nMaximize Σ&lt;sub&gt;i=1 to m&lt;/sub&gt; Σ&lt;sub&gt;j=1 to n&lt;/sub&gt; (c&lt;sub&gt;ij&lt;/sub&gt; * x&lt;sub&gt;ij&lt;/sub&gt;), где x&lt;sub&gt;ij&lt;/sub&gt; - количество ресурсов, транспортированных из i-ого источника в j-ый пункт потребления.</p><p><strong>Ограничения:</strong>\\nОграничения транспортной задачи представляют собой обязательство удовлетворения потребностей каждого пункта потребления и ограничения на доступность ресурсов в каждом источнике.</p><p>Σ&lt;sub&gt;i=1 to m&lt;/sub&gt; x&lt;sub&gt;ij&lt;/sub&gt; = b&lt;sub&gt;j&lt;/sub&gt;, где j = 1, 2, ..., n (условие удовлетворения потребности в каждом пункте потребления).</p><p>Σ&lt;sub&gt;j=1 to n&lt;/sub&gt; x&lt;sub&gt;ij&lt;/sub&gt; = a&lt;sub&gt;i&lt;/sub&gt;, где i = 1, 2, ..., m (условие доступности ресурсов в каждом источнике).</p><p>x&lt;sub&gt;ij&lt;/sub&gt; ≥ 0, где i = 1, 2, ..., m, и j = 1, 2, ..., n (неотрицательность количества транспортируемых ресурсов).</p><p>Решение транспортной задачи заключается в нахождении значений переменных x&lt;sub&gt;ij&lt;/sub&gt; таким образом, чтобы удовлетворить ограничениям и минимизировать или максимизировать целевую функцию. Это может быть выполнено с использованием различных методов, таких как метод Северо-Западного угла, метод Минимального элемента,</p></div>"],["Характеристики эффективности функционирования СМО.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Характеристики эффективности функционирования СМО (Системы массового обслуживания):</strong></p><p>Система массового обслуживания (СМО) представляет собой модель, которая используется для изучения и анализа процессов обслуживания клиентов (заявок, требований) в условиях случайных поступлений и обслуживания. Характеристики эффективности функционирования СМО позволяют оценить производительность и качество обслуживания в таких системах. Вот основные характеристики эффективности СМО:</p><ol><li><p><strong>Интенсивность поступления заявок (λ):</strong> Это параметр, определяющий среднее количество заявок (клиентов) поступающих в систему за единицу времени. Интенсивность поступления может быть постоянной или случайной величиной.</p></li><li><p><strong>Интенсивность обслуживания (μ):</strong> Это параметр, определяющий среднее количество заявок (клиентов), обслуживаемых за единицу времени. Интенсивность обслуживания также может быть постоянной или случайной величиной.</p></li><li><p><strong>Коэффициент использования обслуживающих устройств (ρ):</strong> Этот параметр показывает, насколько эффективно используются ресурсы (например, обслуживающие устройства, каналы). Он определяется отношением интенсивности поступления (λ) к интенсивности обслуживания (μ): ρ = λ / μ. Если ρ &lt; 1, то система используется не полностью, а если ρ = 1, то система работает на предельной нагрузке.</p></li><li><p><strong>Среднее время ожидания в очереди (W):</strong> Эта характеристика показывает среднее время, которое клиенты проводят в очереди перед обслуживанием. Долгое время ожидания может снижать удовлетворенность клиентов.</p></li><li><p><strong>Среднее время пребывания в системе (T):</strong> Это среднее время, которое клиенты проводят в системе, включая время ожидания в очереди и время обслуживания.</p></li><li><p><strong>Вероятность отказа в обслуживании (P&lt;sub&gt;отк&lt;/sub&gt;):</strong> Это вероятность того, что клиент не будет обслужен в системе, а будет отвергнут из-за отсутствия свободных ресурсов или переполнения очереди.</p></li><li><p><strong>Интенсивность обслуживания (количество обслуженных клиентов в единицу времени) в системе (L):</strong> Это характеристика показывает среднее количество клиентов, находящихся в системе (в очереди и в обслуживании) за единицу времени.</p></li><li><p><strong>Число клиентов в очереди (L&lt;sub&gt;q&lt;/sub&gt;):</strong> Это среднее количество клиентов, ожидающих обслуживания в очереди.</p></li><li><p><strong>Число клиентов в системе (L&lt;sub&gt;сист&lt;/sub&gt;):</strong> Это среднее количество клиентов, находящихся в системе (в очереди и в обслуживании).</p></li><li><p><strong>Коэффициент занятости обслуживающих устройств (u):</strong> Это показатель, который определяет, насколько обслуживающие устройства (каналы) заняты в процессе обслуживания клиентов.</p></li></ol><p>Эти характеристики позволяют оценить эффективность функционирования СМО, и их анализ помогает оптимизировать процессы обслуживания и улучшить качество обслуживания клиентов.</p></div>"],["Характеристики эффективности функционирования СМО.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Характеристики эффективности функционирования СМО (Системы массового обслуживания):</strong></p><p>Характеристики эффективности функционирования СМО представляют собой параметры, которые используются для оценки производительности и качества обслуживания в системах массового обслуживания. Они помогают определить уровень сервиса, удовлетворенность клиентов, эффективность использования ресурсов и производительность системы. Вот основные характеристики эффективности СМО:</p><ol><li><p><strong>Интенсивность поступления заявок (λ):</strong> Это параметр, определяющий среднее количество заявок (клиентов) поступающих в систему за единицу времени. Интенсивность поступления может быть постоянной или случайной величиной.</p></li><li><p><strong>Интенсивность обслуживания (μ):</strong> Это параметр, определяющий среднее количество заявок (клиентов), обслуживаемых за единицу времени. Интенсивность обслуживания также может быть постоянной или случайной величиной.</p></li><li><p><strong>Коэффициент использования обслуживающих устройств (ρ):</strong> Этот параметр показывает, насколько эффективно используются ресурсы (например, обслуживающие устройства, каналы). Он определяется отношением интенсивности поступления (λ) к интенсивности обслуживания (μ): ρ = λ / μ. Если ρ &lt; 1, то система используется не полностью, а если ρ = 1, то система работает на предельной нагрузке.</p></li><li><p><strong>Среднее время ожидания в очереди (W):</strong> Эта характеристика показывает среднее время, которое клиенты проводят в очереди перед обслуживанием. Долгое время ожидания может снижать удовлетворенность клиентов.</p></li><li><p><strong>Среднее время пребывания в системе (T):</strong> Это среднее время, которое клиенты проводят в системе, включая время ожидания в очереди и время обслуживания.</p></li><li><p><strong>Вероятность отказа в обслуживании (P&lt;sub&gt;отк&lt;/sub&gt;):</strong> Это вероятность того, что клиент не будет обслужен в системе, а будет отвергнут из-за отсутствия свободных ресурсов или переполнения очереди.</p></li><li><p><strong>Интенсивность обслуживания (количество обслуженных клиентов в единицу времени) в системе (L):</strong> Это характеристика показывает среднее количество клиентов, находящихся в системе (в очереди и в обслуживании) за единицу времени.</p></li><li><p><strong>Число клиентов в очереди (L&lt;sub&gt;q&lt;/sub&gt;):</strong> Это среднее количество клиентов, ожидающих обслуживания в очереди.</p></li><li><p><strong>Число клиентов в системе (L&lt;sub&gt;сист&lt;/sub&gt;):</strong> Это среднее количество клиентов, находящихся в системе (в очереди и в обслуживании).</p></li><li><p><strong>Коэффициент занятости обслуживающих устройств (u):</strong> Это показатель, который определяет, насколько обслуживающие устройства (каналы) заняты в процессе обслуживания клиентов.</p></li></ol><p>Эти характеристики позволяют оценить эффективность функционирования СМО, анализируя производительность, использование ресурсов и качество обслуживания клиентов. Исследование этих характеристик позволяет оптимизировать процессы обслуживания, снизить время ожидания клиентов и повысить удовлетворенность клиентов.</p></div>"],["Экономико-математическое моделирование. Классификация экономических задач.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Экономико-математическое моделирование. Классификация экономических задач:</strong></p><p><strong>Экономико-математическое моделирование</strong> - это методология применения математических и статистических методов для решения экономических задач и анализа экономических процессов. При помощи моделей можно формализовать сложные экономические взаимодействия и предсказать поведение рыночных структур, планировать ресурсы и принимать обоснованные экономические решения.</p><p><strong>Классификация экономических задач:</strong></p><ol><li><p><strong>Оптимизационные задачи:</strong> Задачи оптимизации направлены на поиск оптимальных решений, которые максимизируют или минимизируют определенную функцию. Примерами могут быть задачи максимизации прибыли, минимизации затрат, определения оптимального портфеля инвестиций и т.д.</p></li><li><p><strong>Прогнозирование и статистические задачи:</strong> Задачи прогнозирования предполагают предсказание будущих значений экономических переменных на основе статистических данных и временных рядов. Это может быть прогнозирование спроса, инфляции, экономического роста и т.д.</p></li><li><p><strong>Моделирование динамических процессов:</strong> В экономических задачах часто рассматриваются динамические процессы, такие как развитие рынков, долгосрочные инвестиции, модели бюджетного планирования и др. Для анализа таких процессов используются дифференциальные уравнения и динамические системы.</p></li><li><p><strong>Теория игр:</strong> Теория игр используется для анализа стратегических решений и взаимодействий различных участников экономических процессов. Эта область исследует оптимальные стратегии, которые принимают участники в условиях неопределенности и конкуренции.</p></li><li><p><strong>Экономические модели спроса и предложения:</strong> Экономические модели спроса и предложения описывают взаимосвязь между ценой товара или услуги и их количеством, которое покупатели и продавцы готовы приобрести или продать.</p></li><li><p><strong>Финансовые модели:</strong> Финансовые модели применяются для анализа инвестиционных решений, оценки стоимости активов, управления портфелем и оценки рисков.</p></li><li><p><strong>Экономические задачи принятия решений:</strong> Задачи принятия решений касаются выбора оптимальных стратегий и альтернатив в условиях ограниченных ресурсов и неопределенности.</p></li><li><p><strong>Моделирование макроэкономических процессов:</strong> Эти задачи относятся к анализу долгосрочных тенденций и экономического развития на уровне всей страны или региона. Здесь используются модели макроэкономики для прогнозирования и анализа макроэкономических переменных, таких как ВВП, инфляция, безработица и др.</p></li><li><p><strong>Моделирование рисков и страхования:</strong> Задачи оценки рисков и страхования направлены на анализ финансовых потерь и определение оптимальных стратегий управления рисками.</p></li></ol><p>Экономико-математическое моделирование играет ключевую роль в принятии обоснованных экономических решений и обеспечении эффективного функционирования бизнеса, инвестиций и государственной политики.</p></div>"],["Эффективность операции по нескольким критериям.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Эффективность операции по нескольким критериям:</strong></p><p>При оценке эффективности операции или проекта часто возникает необходимость учитывать несколько критериев одновременно, так как решение может влиять на различные аспекты или цели. Это приводит к появлению задач многокритериальной оптимизации. При такой оптимизации стремятся найти компромиссное решение, учитывающее различные критерии, которые могут быть взаимно противоречивыми или конкурировать друг с другом.</p><p><strong>Примеры критериев, по которым может оцениваться эффективность операции:</strong></p><ol><li><p><strong>Прибыль:</strong> Это основной критерий для многих бизнес-операций. Оценивается сумма денег, которую операция принесла компании, после вычета всех затрат.</p></li><li><p><strong>Сроки:</strong> Оценивается время, необходимое для выполнения операции или проекта. Зависит от требований заказчика или важности выполнения задачи в определенный срок.</p></li><li><p><strong>Качество:</strong> Оценивается соответствие выполненной работы или произведенных товаров установленным стандартам и требованиям качества.</p></li><li><p><strong>Затраты:</strong> Оценивается количество ресурсов (денежных средств, времени, труда, материалов) затраченных на выполнение операции.</p></li><li><p><strong>Удовлетворенность клиентов:</strong> Оценивается удовлетворенность клиентов полученными продуктами или услугами.</p></li><li><p><strong>Уровень риска:</strong> Оценивается степень риска, связанного с операцией, и его влияние на компанию.</p></li><li><p><strong>Социальная ответственность:</strong> Оценивается соответствие операции принципам социальной ответственности, влияние на окружающую среду и общественное благополучие.</p></li><li><p><strong>Инновации:</strong> Оценивается внедрение новых технологий, процессов или идей, которые способствуют развитию компании или индустрии.</p></li><li><p><strong>Экономическая эффективность:</strong> Оценивается соотношение затрат к выгодам или выходу, полученному от операции.</p></li><li><p><strong>Соответствие стратегическим целям:</strong> Оценивается соответствие выполнения операции стратегическим целям компании или проекта.</p></li></ol><p>Многокритериальная оптимизация включает в себя различные методы, такие как методы взвешенной суммы, методы ограничений, методы компромиссов и др. Оптимальное решение выбирается на основе компромисса между различными критериями с учетом их важности и взаимосвязи. Это позволяет достичь более сбалансированных результатов и принять более обоснованные решения, учитывая множество факторов, которые влияют на эффективность операции.</p></div>"],["Эффективность операции. Критерий эффективности операций.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Эффективность операции. Критерий эффективности операций:</strong></p><p><strong>Эффективность операции</strong> относится к степени, в которой операция достигает своих целей и задач с наилучшими результатами, оптимальным использованием ресурсов и минимальными затратами. Критерий эффективности операций является мерой оценки того, насколько успешно операция выполняет свои функции и приносит пользу организации или компании.</p><p><strong>Критерии эффективности операций могут включать следующие аспекты:</strong></p><ol><li><p><strong>Прибыльность:</strong> Одним из основных критериев эффективности является прибыльность операции. Операция считается эффективной, если она приносит организации прибыль и способствует росту доходов.</p></li><li><p><strong>Производительность:</strong> Критерий производительности связан с количеством продукции или услуг, которые операция способна производить или предоставлять за определенный период времени. Чем выше производительность, тем более эффективна операция.</p></li><li><p><strong>Качество продукции или услуг:</strong> Эффективная операция должна предоставлять продукцию или услуги высокого качества, которые удовлетворяют требованиям и ожиданиям клиентов.</p></li><li><p><strong>Эффективность использования ресурсов:</strong> Операция считается эффективной, если она способна эффективно использовать доступные ресурсы, такие как трудовые ресурсы, материалы, оборудование и др.</p></li><li><p><strong>Соблюдение сроков:</strong> Эффективная операция должна выполняться в срок и не допускать задержек или простоев.</p></li><li><p><strong>Инновации и технологический прогресс:</strong> Эффективные операции стараются внедрять инновации и использовать современные технологии для улучшения производственных процессов и результатов.</p></li><li><p><strong>Удовлетворенность клиентов:</strong> Критерий удовлетворенности клиентов оценивает, насколько операция удовлетворяет потребности и ожидания клиентов.</p></li><li><p><strong>Устойчивость и экологическая ответственность:</strong> Эффективные операции также обращают внимание на устойчивость, социальную ответственность и уважение к окружающей среде.</p></li><li><p><strong>Уровень риска:</strong> Операция должна учитывать риски и стараться минимизировать их влияние на результаты.</p></li><li><p><strong>Соответствие стратегическим целям:</strong> Операция считается эффективной, если она соответствует стратегическим целям организации и способствует достижению ее долгосрочных задач.</p></li></ol><p><strong>Критерий эффективности операций может варьироваться в зависимости от типа операции, отрасли и конкретных целей организации.</strong> Компания должна анализировать и учитывать различные критерии, чтобы принимать обоснованные решения и достигать оптимальных результатов.</p></div>"]],"Базы данных":[["Назначение и основные компоненты системы баз данных.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Назначение и основные компоненты системы баз данных:</strong></p><p><strong>Назначение системы баз данных (СБД):</strong></p><p>Система баз данных предназначена для организации и управления большими объемами данных, обеспечивая эффективное хранение, обработку, доступ и защиту информации. Основной целью СБД является предоставление надежного и удобного механизма для работы с данными, обеспечивая одновременный доступ нескольких пользователей к общим данным и устраняя проблемы избыточности и несогласованности информации.</p><p><strong>Основные компоненты системы баз данных:</strong></p><ol><li><p><strong>База данных (БД):</strong> Является основным компонентом системы. Это организованная коллекция данных, хранящихся в структурированной форме для обеспечения эффективного доступа и управления. База данных содержит информацию, которую необходимо хранить и обрабатывать.</p></li><li><p><strong>Система управления базами данных (СУБД):</strong> Это программное обеспечение, которое обеспечивает управление базой данных. СУБД предоставляет средства для создания, обновления, удаления и запросов данных в базе данных. Она отвечает за выполнение операций с данными и обеспечение целостности и безопасности информации.</p></li><li><p><strong>Язык запросов (SQL):</strong> SQL (Structured Query Language) - это стандартизированный язык запросов, который используется для работы с данными в базе данных. С помощью SQL можно выполнять запросы на выборку, вставку, обновление и удаление данных, а также создавать и управлять структурами таблиц и индексами.</p></li><li><p><strong>Метаданные:</strong> Метаданные представляют собой данные о структуре и характеристиках данных в базе данных. Они описывают, какие таблицы существуют, их поля, типы данных, ограничения, связи между таблицами и другие сведения, необходимые для правильной интерпретации и использования данных.</p></li><li><p><strong>Интерфейс пользователя:</strong> Это компонент, который обеспечивает взаимодействие между пользователями и системой баз данных. Интерфейс может быть текстовым, графическим или веб-приложением, предоставляющим пользователю возможность выполнять запросы, вносить изменения в данные и просматривать результаты операций.</p></li><li><p><strong>Физическая структура данных:</strong> Это способ, которым данные физически хранятся на устройствах хранения, таких как жесткие диски. Физическая структура данных включает таблицы, индексы, файлы данных и другие элементы, необходимые для оптимальной организации и доступа к данным.</p></li><li><p><strong>Безопасность и контроль доступа:</strong> Этот компонент обеспечивает защиту данных от несанкционированного доступа. Система баз данных может управлять правами доступа пользователей к данным, контролировать авторизацию и аутентификацию пользователей и применять другие меры безопасности для защиты информации.</p></li><li><p><strong>Средства резервного копирования и восстановления:</strong> Это механизмы, которые обеспечивают создание резервных копий данных и возможность восстановления данных в случае сбоев или ошибок.</p></li></ol><p><strong>Все эти компоненты совместно образуют систему баз данных, которая обеспечивает эффективную работу с данными и обеспечивает целостность, доступность и безопасность информации.</strong></p></div>"],["Уровни представления баз данных; понятия схемы и подсхемы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Уровни представления баз данных; понятия схемы и подсхемы:</strong></p><p><strong>Уровни представления баз данных:</strong></p><p>В базах данных существует три уровня представления данных, которые описывают различные аспекты данных и представления информации:</p><ol><li><p><strong>Внешний уровень (пользовательский уровень):</strong> Это уровень, который виден конечным пользователям или прикладным программам. На этом уровне определены внешние схемы, которые предоставляют удобный интерфейс для работы с данными и соответствуют потребностям конкретных пользователей или приложений. Каждый пользователь может видеть только ту часть данных, которая ему необходима, и иметь свой набор операций на данных.</p></li><li><p><strong>Концептуальный уровень (логический уровень):</strong> На этом уровне определена концептуальная схема, которая описывает все данные в базе данных и их связи между собой независимо от конкретных приложений. Концептуальная схема является абстракцией, которая позволяет понять общую структуру данных и их логические связи. Этот уровень обеспечивает независимость данных от приложений и упрощает изменение структуры данных без влияния на пользователей.</p></li><li><p><strong>Внутренний уровень (физический уровень):</strong> На этом уровне определена физическая схема, которая описывает, как данные фактически хранятся на физических носителях, таких как жесткие диски. Физическая схема включает в себя информацию о структуре файлов, индексах, методах доступа к данным и других деталях, которые связаны с физическим размещением данных.</p></li></ol><p><strong>Понятия схемы и подсхемы:</strong></p><ul><li><p><strong>Схема базы данных:</strong> Схема базы данных представляет собой общее логическое описание всех данных в базе данных. Она определяет сущности, атрибуты, связи между сущностями и ограничения на данные. Схема базы данных создается на концептуальном уровне и определяет, как данные будут организованы и храниться.</p></li><li><p><strong>Подсхемы:</strong> Подсхемы представляют собой части схемы базы данных, которые описываются на внешнем уровне. Они предназначены для представления данных определенным группам пользователей или приложениям. Подсхемы обеспечивают пользовательские интерфейсы к данным, которые оптимизированы для конкретных нужд и предпочтений пользователей. Подсхемы позволяют скрыть детали организации базы данных от конечных пользователей и предоставить им удобные и понятные представления данных.</p></li></ul><p>Таким образом, уровни представления баз данных и понятия схемы и подсхемы играют важную роль в организации данных в базе данных, обеспечивая удобный доступ к информации для различных пользователей и приложений и обеспечивая независимость данных от конкретных приложений и физической структуры.</p></div>"],["Модели данных. Иерархическая, сетевая и реляционная модели данных; схема отношения.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Модели данных: Иерархическая, сетевая и реляционная модели данных; схема отношения:</strong></p><p><strong>Иерархическая модель данных:</strong></p><p>В иерархической модели данных данные представляются в виде иерархической структуры, состоящей из записей и связей между ними, образующих древовидную структуру. Каждая запись может иметь одного или нескольких потомков, и каждый потомок может быть связан только с одним родителем. Примерами иерархических баз данных являются системы IMS (Information Management System) и Windows Registry.</p><p><strong>Сетевая модель данных:</strong></p><p>В сетевой модели данных данные представляются в виде графа, где каждая запись может быть связана с несколькими другими записями, формируя сложные сетевые связи. Это позволяет более гибко представлять отношения между данными. Основной пример сетевой модели - CODASYL (Conference on Data Systems Languages).</p><p><strong>Реляционная модель данных:</strong></p><p>Реляционная модель данных основана на математической теории множеств и представляет данные в виде таблиц, называемых \\"отношениями\\". Каждая таблица состоит из строк (кортежей) и столбцов (атрибутов). Запросы на языке SQL (Structured Query Language) используются для манипулирования данными в реляционной модели. Реляционные базы данных являются наиболее распространенным типом баз данных в современных информационных системах.</p><p><strong>Схема отношения:</strong></p><p>Схема отношения (Relation Schema) определяет структуру и характеристики отношения в реляционной базе данных. Она определяет название отношения, список атрибутов, их типы данных и ограничения, которые применяются к данным в этом отношении.</p><p><strong>Пример схемы отношения:</strong></p><p>Предположим, у нас есть отношение \\"Сотрудники\\" с атрибутами \\"Имя\\", \\"Возраст\\" и \\"Зарплата\\". Тогда схема отношения будет выглядеть следующим образом:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>scss</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-scss\\">Сотрудники(Имя, Возраст, Зарплата)\\n</code></div></div></pre><p>Где \\"Имя\\", \\"Возраст\\" и \\"Зарплата\\" - это названия атрибутов, определяющих структуру отношения, а \\"Сотрудники\\" - это название самого отношения.</p><p>Схема отношения является статическим определением структуры данных, в то время как сами данные, хранящиеся в таблице, называются кортежами (строками). При добавлении данных в отношение или их изменении схема остается неизменной, и данные должны соответствовать этой схеме.</p></div>"],["Язык манипулирования данными для реляционной модели; Реляционная алгебра и язык SQL.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Язык манипулирования данными для реляционной модели; Реляционная алгебра и язык SQL:</strong></p><p><strong>Реляционная алгебра:</strong></p><p>Реляционная алгебра - это математический формализм для манипулирования данными в реляционной модели. Она представляет собой набор операций, которые применяются к отношениям (таблицам) и порождают новые отношения. Реляционная алгебра используется для выполнения запросов к базе данных и получения нужных данных.</p><p>Основные операции реляционной алгебры:</p><ol><li><p><strong>Выбор (Selection):</strong> Извлекает строки из отношения, которые удовлетворяют заданному условию.</p></li><li><p><strong>Проекция (Projection):</strong> Извлекает определенные атрибуты (столбцы) из отношения, игнорируя остальные.</p></li><li><p><strong>Объединение (Union):</strong> Объединяет два отношения с одинаковой структурой (одинаковое количество и типы атрибутов).</p></li><li><p><strong>Пересечение (Intersection):</strong> Извлекает общие строки из двух отношений с одинаковой структурой.</p></li><li><p><strong>Разность (Difference):</strong> Извлекает строки из первого отношения, которых нет во втором отношении.</p></li><li><p><strong>Декартово произведение (Cartesian Product):</strong> Образует все возможные комбинации строк из двух отношений.</p></li></ol><p><strong>Язык SQL (Structured Query Language):</strong></p><p>SQL - это стандартный язык запросов, используемый для манипулирования данными в реляционной базе данных. SQL позволяет выполнять операции выборки, вставки, обновления и удаления данных.</p><p>Основные операторы SQL:</p><ol><li><p><strong>SELECT:</strong> Используется для выборки данных из таблицы на основе заданных условий.</p></li><li><p><strong>INSERT:</strong> Используется для добавления новых строк в таблицу.</p></li><li><p><strong>UPDATE:</strong> Используется для обновления существующих строк в таблице на основе заданных условий.</p></li><li><p><strong>DELETE:</strong> Используется для удаления строк из таблицы на основе заданных условий.</p></li><li><p><strong>CREATE:</strong> Используется для создания новых таблиц, представлений (VIEW) и других объектов базы данных.</p></li><li><p><strong>ALTER:</strong> Используется для изменения структуры существующих таблиц или других объектов базы данных.</p></li><li><p><strong>DROP:</strong> Используется для удаления таблиц, представлений и других объектов базы данных.</p></li></ol><p>SQL обеспечивает удобный и декларативный способ взаимодействия с базой данных, позволяя выполнять сложные запросы с помощью простых и понятных команд.</p></div>"],["Проектирование реляционной базы данных на основе функциональных зависимостей. Функциональные зависимости, декомпозиция отношений, транзитивные зависимости.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Проектирование реляционной базы данных на основе функциональных зависимостей; функциональные зависимости, декомпозиция отношений, транзитивные зависимости:</strong></p><p><strong>Функциональные зависимости:</strong></p><p>Функциональная зависимость - это связь между атрибутами в отношении (таблице) базы данных. Она говорит о том, что значение одного атрибута определенным образом зависит от значения другого атрибута или группы атрибутов. Функциональные зависимости помогают определить свойства и связи данных в базе данных.</p><p>Если атрибут X функционально зависит от атрибута Y, то обозначается как Y -&gt; X, что означает, что каждому значению Y соответствует единственное значение X.</p><p><strong>Пример функциональной зависимости:</strong>\\nПредположим, у нас есть отношение \\"Сотрудники\\" с атрибутами \\"Имя\\", \\"Отдел\\", и \\"Зарплата\\". Если каждому сотруднику соответствует определенный отдел, тогда \\"Отдел\\" -&gt; \\"Имя\\", потому что зная отдел, мы можем однозначно определить имя сотрудника.</p><p><strong>Декомпозиция отношений:</strong></p><p>Декомпозиция отношений - это процесс разбиения одного отношения на несколько более мелких отношений с целью улучшения структуры базы данных и устранения аномалий.</p><p><strong>Пример декомпозиции отношения:</strong>\\nПредположим, у нас есть отношение \\"Заказы\\" с атрибутами \\"Номер заказа\\", \\"Дата заказа\\" и \\"Имя клиента\\". Если атрибут \\"Имя клиента\\" не зависит от атрибута \\"Номер заказа\\" и \\"Дата заказа\\", то отношение можно декомпозировать на два отношения: \\"Заказы\\" с атрибутами \\"Номер заказа\\" и \\"Дата заказа\\", и \\"Клиенты\\" с атрибутом \\"Имя клиента\\". Это упрощает структуру базы данных и избавляет от избыточности данных.</p><p><strong>Транзитивные зависимости:</strong></p><p>Транзитивная зависимость - это зависимость, которая возникает между атрибутами через другие атрибуты. Если атрибут A зависит от атрибута B, и атрибут B зависит от атрибута C, тогда A транзитивно зависит от C.</p><p><strong>Пример транзитивной зависимости:</strong>\\nПредположим, у нас есть отношение \\"Учебные курсы\\" с атрибутами \\"Номер курса\\", \\"Название курса\\" и \\"Преподаватель\\". Если \\"Номер курса\\" -&gt; \\"Название курса\\", и \\"Название курса\\" -&gt; \\"Преподаватель\\", тогда транзитивная зависимость будет \\"Номер курса\\" -&gt; \\"Преподаватель\\".</p><p>При проектировании реляционной базы данных, функциональные зависимости помогают определить правильную структуру таблиц и избежать избыточности и аномалий данных. Декомпозиция отношений и устранение транзитивных зависимостей позволяют улучшить эффективность и структуру базы данных.</p></div>"],["Проектирование с использованием метода «сущность – связь».","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Проектирование с использованием метода \\"сущность – связь\\":</strong></p><p>Метод \\"сущность – связь\\" (Entity-Relationship, ER) - это семантический подход к проектированию баз данных, который используется для моделирования и описания данных в информационных системах. Основной целью этого метода является представление ключевых сущностей и их взаимосвязей в базе данных.</p><p><strong>Основные понятия метода \\"сущность – связь\\":</strong></p><ol><li><p><strong>Сущность (Entity):</strong> Сущность представляет реальный объект или концепцию, которая имеет уникальные и идентифицируемые характеристики. Каждая сущность обладает атрибутами, которые описывают ее свойства. Сущности представляются в виде прямоугольников с именем сущности.</p></li><li><p><strong>Атрибут (Attribute):</strong> Атрибуты представляют характеристики или свойства сущности. Они описывают информацию, которая хранится о сущности. Атрибуты представляются внутри сущности.</p></li><li><p><strong>Связь (Relationship):</strong> Связь представляет отношение между двумя или более сущностями. Она показывает, как сущности взаимодействуют или связаны друг с другом. Связи представляются линиями, которые соединяют связанные сущности.</p></li></ol><p><strong>Процесс проектирования методом \\"сущность – связь\\":</strong></p><ol><li><p><strong>Идентификация сущностей:</strong> Определение ключевых сущностей, которые будут представлены в базе данных, и их атрибутов.</p></li><li><p><strong>Определение связей:</strong> Определение типов связей между сущностями и их характеристик. Связи могут быть однонаправленными или двунаправленными и могут быть однозначными или многозначными.</p></li><li><p><strong>Атрибуты:</strong> Определение атрибутов для каждой сущности, описывающих ее характеристики.</p></li><li><p><strong>Кардинальность связей:</strong> Определение минимального и максимального количества связанных объектов для каждой стороны связи.</p></li><li><p><strong>Преобразование в схему базы данных:</strong> После определения всех сущностей, атрибутов и связей, метод \\"сущность – связь\\" может быть преобразован в схему базы данных, которая определяет таблицы сущностей и связи между ними.</p></li></ol><p>Метод \\"сущность – связь\\" позволяет ясно и структурированно представить данные и их взаимосвязи, что облегчает процесс проектирования баз данных и обеспечивает более легкое понимание структуры информационной системы.</p></div>"],["Создание и модификация базы данных.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Создание и модификация базы данных:</strong></p><p><strong>Создание базы данных:</strong></p><p>Создание базы данных - это процесс, при котором создается физическая структура, предназначенная для хранения данных. Оно включает в себя определение схемы базы данных, таблиц, атрибутов и других объектов, необходимых для хранения и организации данных.</p><ol><li><p><strong>Выбор СУБД:</strong> Сначала необходимо выбрать систему управления базами данных (СУБД), которую вы будете использовать для создания базы данных. Популярными СУБД являются MySQL, PostgreSQL, Oracle, Microsoft SQL Server и др.</p></li><li><p><strong>Определение схемы:</strong> Затем определяется схема базы данных, которая включает в себя набор таблиц и связей между ними. Каждая таблица должна иметь уникальное имя и определенные атрибуты (столбцы).</p></li><li><p><strong>Создание таблиц:</strong> После определения схемы происходит создание таблиц с использованием SQL команды CREATE TABLE. В команде указываются имена таблиц и их атрибуты с указанием типов данных.</p></li><li><p><strong>Определение первичных ключей и ограничений:</strong> Для каждой таблицы нужно определить первичный ключ, который уникально идентифицирует каждую запись в таблице. Также могут быть определены другие ограничения, такие как уникальные значения или ограничения целостности.</p></li><li><p><strong>Наполнение данными:</strong> После создания таблиц базу данных можно наполнить данными с помощью оператора INSERT, который добавляет новые записи в таблицы.</p></li></ol><p><strong>Модификация базы данных:</strong></p><p>Модификация базы данных - это процесс изменения структуры или данных в существующей базе данных.</p><ol><li><p><strong>Добавление новых таблиц или атрибутов:</strong> Можно добавлять новые таблицы или атрибуты к уже существующим таблицам. Это может потребоваться, если вам нужно расширить функциональность базы данных.</p></li><li><p><strong>Изменение атрибутов или ограничений:</strong> Можно изменять типы данных атрибутов, ограничения или другие параметры таблицы.</p></li><li><p><strong>Удаление таблиц или атрибутов:</strong> При необходимости можно удалить уже существующие таблицы или атрибуты из базы данных.</p></li><li><p><strong>Изменение данных:</strong> Можно изменять существующие данные в таблицах с помощью оператора UPDATE.</p></li><li><p><strong>Удаление данных:</strong> Можно удалять данные из таблиц с помощью оператора DELETE.</p></li><li><p><strong>Изменение ограничений целостности:</strong> Можно изменять правила и ограничения, которые обеспечивают целостность данных в базе данных.</p></li></ol><p>Важно производить модификацию базы данных осторожно, чтобы не нарушить целостность данных и не повредить структуру базы данных. Часто перед внесением изменений рекомендуется создать резервную копию базы данных, чтобы в случае ошибки можно было восстановить исходное состояние.</p></div>"],["Поиск, сортировка, индексирование базы данных.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Поиск, сортировка и индексирование базы данных:</strong></p><p><strong>Поиск в базе данных:</strong></p><p>Поиск в базе данных - это процесс нахождения конкретной информации или записей, удовлетворяющих заданным условиям. Для выполнения поиска в базе данных используется язык запросов, такой как SQL. Основные операторы SQL для поиска данных включают операторы SELECT, WHERE и LIKE.</p><ol><li><p><strong>Оператор SELECT:</strong> Используется для выборки данных из таблицы. Можно выбрать все столбцы или только определенные столбцы.</p></li><li><p><strong>Оператор WHERE:</strong> Используется для задания условия поиска. Можно указать условие для одного или нескольких столбцов, чтобы отобрать нужные записи.</p></li><li><p><strong>Оператор LIKE:</strong> Используется для поиска значений, соответствующих определенному шаблону. Например, можно использовать оператор LIKE для поиска строк, содержащих определенное слово или фразу.</p></li></ol><p><strong>Сортировка базы данных:</strong></p><p>Сортировка в базе данных - это процесс упорядочивания данных в таблице по определенным критериям. Для сортировки данных используется оператор ORDER BY в SQL. По умолчанию, данные сортируются в порядке возрастания, но можно указать ключевое слово DESC, чтобы выполнить сортировку в порядке убывания.</p><p><strong>Пример сортировки:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>sql</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-sql\\"><span class=\\"hljs-keyword\\">SELECT</span> <span class=\\"hljs-operator\\">*</span> <span class=\\"hljs-keyword\\">FROM</span> employees <span class=\\"hljs-keyword\\">ORDER</span> <span class=\\"hljs-keyword\\">BY</span> last_name <span class=\\"hljs-keyword\\">ASC</span>;\\n</code></div></div></pre><p>В данном примере данные из таблицы \\"employees\\" будут отсортированы по фамилии сотрудников в алфавитном порядке.</p><p><strong>Индексирование базы данных:</strong></p><p>Индексирование - это процесс создания структуры данных, которая ускоряет поиск и сортировку данных в базе данных. Индексы создаются на определенных столбцах таблицы и содержат отсортированные значения из этих столбцов, что позволяет системе быстрее находить данные.</p><p>Преимущества использования индексов:</p><ul><li><p><strong>Ускорение поиска:</strong> Поиск данных с использованием индекса выполняется быстрее, так как системе необходимо просматривать только значения в индексе, а не все строки таблицы.</p></li><li><p><strong>Ускорение сортировки:</strong> Индексы также помогают ускорить сортировку данных, так как они представляют собой предварительно отсортированные структуры.</p></li></ul><p>Несмотря на преимущества, использование индексов требует дополнительных ресурсов для их поддержки, и они должны быть созданы с умом. Индексы должны использоваться на тех столбцах, которые часто используются для поиска или сортировки данных, и не рекомендуется создавать слишком много индексов, так как это может привести к избыточности и замедлению работы базы данных.</p></div>"],["Создание форм и отчетов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Создание форм и отчетов:</strong></p><p><strong>Формы:</strong></p><p>Формы в базах данных представляют пользовательский интерфейс, который позволяет вводить, просматривать и редактировать данные в таблицах. Формы делают работу с базой данных более удобной и понятной для конечных пользователей, так как они скрывают сложности работы с SQL запросами.</p><p><strong>Основные функции форм:</strong></p><ol><li><p><strong>Ввод данных:</strong> Формы позволяют пользователям вводить новые данные в таблицы базы данных.</p></li><li><p><strong>Редактирование данных:</strong> С помощью форм пользователи могут редактировать существующие данные в таблицах.</p></li><li><p><strong>Просмотр данных:</strong> Формы предоставляют возможность просматривать данные из таблиц.</p></li><li><p><strong>Фильтрация и сортировка данных:</strong> Формы позволяют применять фильтры и сортировку данных для удобства работы с большим объемом информации.</p></li><li><p><strong>Валидация данных:</strong> Формы могут включать проверки и валидацию данных, чтобы предотвратить ввод некорректных или недопустимых значений.</p></li><li><p><strong>Отображение связанных данных:</strong> Формы могут отображать связанные данные из разных таблиц, чтобы обеспечить целостную информацию.</p></li></ol><p><strong>Отчеты:</strong></p><p>Отчеты представляют собой специально оформленную информацию, сгруппированную и отсортированную по определенным критериям. Отчеты позволяют представить данные в удобочитаемой и информативной форме, что помогает пользователям принимать решения на основе анализа данных.</p><p><strong>Основные функции отчетов:</strong></p><ol><li><p><strong>Агрегация данных:</strong> Отчеты могут суммировать, усреднять или иначе агрегировать данные, чтобы предоставить общую картину.</p></li><li><p><strong>Группировка данных:</strong> Данные в отчетах могут быть сгруппированы по определенным полям, что помогает увидеть связи и тенденции.</p></li><li><p><strong>Сортировка данных:</strong> Отчеты могут сортировать данные по определенным критериям для лучшего анализа.</p></li><li><p><strong>Фильтрация данных:</strong> Отчеты могут применять фильтры для отображения только тех данных, которые соответствуют определенным условиям.</p></li><li><p><strong>Визуализация данных:</strong> Отчеты могут включать графики, диаграммы и другие элементы визуализации для лучшего понимания данных.</p></li><li><p><strong>Экспорт данных:</strong> Отчеты могут быть экспортированы в различные форматы, такие как PDF, Excel, или HTML.</p></li></ol><p>Создание форм и отчетов делает работу с базами данных более удобной и эффективной, позволяя пользователям быстро получать и анализировать информацию. Формы и отчеты могут быть настроены в соответствии с потребностями конкретных пользователей и помогают сделать процесс работы с данными более удобным и продуктивным.</p></div>"],["Физическая организация базы данных. Хешированные, индексированные файлы;","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Физическая организация базы данных: Хешированные и индексированные файлы:</strong></p><p><strong>Хешированные файлы (Hash Files):</strong></p><p>Хеш-файлы представляют собой один из методов физической организации данных в базе данных. В хеш-файлах используется хеш-функция для преобразования ключей данных в адреса блоков памяти, в которых хранятся соответствующие записи.</p><p><strong>Принцип работы хеш-файлов:</strong></p><ol><li><p><strong>Хеш-функция:</strong> При добавлении записи в хеш-файл, ключ данных пропускается через хеш-функцию, которая возвращает адрес блока памяти для хранения этой записи.</p></li><li><p><strong>Коллизии:</strong> Возможны ситуации, когда двум разным ключам соответствует один и тот же адрес блока памяти (коллизии). В этом случае могут использоваться различные методы разрешения коллизий, например, метод цепочек или открытой адресации.</p></li></ol><p><strong>Преимущества хеш-файлов:</strong></p><ul><li>Быстрый доступ к данным при известном ключе, так как хеш-функция напрямую указывает на местонахождение записи.</li><li>Отличный выбор, когда ключи данных часто известны и имеют равные вероятности.</li><li>Хорошая производительность при большом объеме данных, если хеш-функция хорошо спроектирована и коллизии минимизированы.</li></ul><p><strong>Недостатки хеш-файлов:</strong></p><ul><li>Сложности с поиском данных при неизвестных или неполных ключах, так как хеш-функция не может предоставить информацию о расположении.</li><li>Проблемы с производительностью при частом изменении данных или большом количестве коллизий.</li></ul><p><strong>Индексированные файлы (Indexed Files):</strong></p><p>Индексированные файлы - это еще один метод физической организации данных, который использует индексы для упорядочивания и быстрого доступа к данным. Индексы - это структуры данных, которые содержат ключи и адреса записей в файле данных.</p><p><strong>Принцип работы индексированных файлов:</strong></p><ol><li><p><strong>Индексы:</strong> Индексы содержат уникальные ключи и указатели на соответствующие записи в файле данных.</p></li><li><p><strong>Сортировка:</strong> Записи в файле данных могут быть упорядочены по ключу для более быстрого поиска и сортировки.</p></li></ol><p><strong>Преимущества индексированных файлов:</strong></p><ul><li>Быстрый доступ к данным при известном ключе, используя индекс.</li><li>Удобный для поиска данных по неизвестным или частично известным ключам.</li><li>Подходит для баз данных, в которых данные часто изменяются, так как изменение записей не требует перестроения всего файла.</li></ul><p><strong>Недостатки индексированных файлов:</strong></p><ul><li>Потребление дополнительного места для хранения индексов.</li><li>Дополнительная сложность при вставке и удалении записей, так как индексы должны поддерживаться актуальными.</li></ul><p>Выбор между хеш-файлами и индексированными файлами зависит от конкретных требований базы данных, частоты доступа к данным, количества изменений данных и объема данных.</p></div>"],["Защита баз данных. Целостность и сохранность баз данных.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Защита баз данных: Целостность и сохранность баз данных:</strong></p><p><strong>Целостность баз данных:</strong></p><p>Целостность баз данных - это обеспечение правильности и непротиворечивости данных в базе данных. Целостность гарантирует, что данные в базе данных остаются в согласованном и корректном состоянии. Целостность баз данных обычно поддерживается с помощью ограничений целостности.</p><p><strong>Ограничения целостности:</strong></p><p>Ограничения целостности - это правила, которые определяют допустимые значения и отношения между данными в базе данных. Они могут быть заданы на уровне схемы базы данных и включают:</p><ol><li><p><strong>Ограничения первичного ключа:</strong> Гарантируют уникальность идентификаторов для каждой записи в таблице.</p></li><li><p><strong>Ограничения уникальности:</strong> Обеспечивают уникальность значений в определенных столбцах или комбинациях столбцов.</p></li><li><p><strong>Ограничения NOT NULL:</strong> Устанавливают обязательность заполнения определенных столбцов, чтобы предотвратить появление нулевых значений.</p></li><li><p><strong>Ограничения внешнего ключа:</strong> Связывают данные между таблицами и обеспечивают целостность связей между данными.</p></li><li><p><strong>Ограничения проверки:</strong> Позволяют определить пользовательские правила и условия для данных.</p></li></ol><p><strong>Сохранность баз данных:</strong></p><p>Сохранность баз данных - это обеспечение безопасности и надежности данных в базе данных. Защита данных от потери, повреждения, несанкционированного доступа и разрушения является основным аспектом сохранности баз данных.</p><p><strong>Меры для обеспечения сохранности баз данных:</strong></p><ol><li><p><strong>Регулярное резервное копирование:</strong> Создание резервных копий баз данных, чтобы в случае потери или повреждения данных можно было восстановить базу данных до последнего сохраненного состояния.</p></li><li><p><strong>Аутентификация и авторизация:</strong> Использование систем аутентификации и авторизации для контроля доступа к базе данных и предотвращения несанкционированного доступа.</p></li><li><p><strong>Шифрование данных:</strong> Защита данных с использованием методов шифрования, чтобы предотвратить их понимание и использование злоумышленниками.</p></li><li><p><strong>Физическая защита серверов и хранилищ данных:</strong> Обеспечение физической безопасности серверов и хранилищ данных, чтобы предотвратить физический доступ к оборудованию.</p></li><li><p><strong>Обновление и патчи:</strong> Регулярное обновление и установка патчей для операционных систем и СУБД для предотвращения уязвимостей.</p></li><li><p><strong>Аудит и мониторинг:</strong> Ведение журналов аудита и мониторинга доступа к базе данных для обнаружения и предотвращения несанкционированных действий.</p></li></ol><p>Обеспечение целостности и сохранности данных - это критически важные аспекты в управлении базами данных. Эффективная защита данных помогает предотвратить потерю и повреждение данных, а также обеспечивает их надежное использование и доступность для авторизованных пользователей.</p></div>"]],"Конструирование программного обеспечения":[["Автономная и комплексная отладки модуля.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Автономная и комплексная отладка модуля:</strong></p><p><strong>Автономная отладка модуля:</strong></p><p>Автономная отладка модуля (также называемая локальной отладкой) - это процесс отладки программного модуля, который выполняется независимо от остальной части программы или системы. В этом случае отладка проводится только на уровне отдельного модуля, изолированного от других компонентов.</p><p><strong>Основные характеристики автономной отладки:</strong></p><ol><li><p><strong>Изоляция модуля:</strong> Модуль отделяется от других частей программы, и отладка ведется только в пределах этого модуля, не затрагивая другие компоненты системы.</p></li><li><p><strong>Независимость от внешних факторов:</strong> Автономная отладка не зависит от того, как модуль будет взаимодействовать с другими модулями или системой в целом.</p></li><li><p><strong>Упрощение процесса:</strong> Отладка на уровне отдельного модуля позволяет упростить процесс обнаружения и исправления ошибок, так как фокус сосредоточен только на конкретной части кода.</p></li></ol><p><strong>Комплексная отладка модуля:</strong></p><p>Комплексная отладка модуля (или глобальная отладка) - это процесс отладки, включающий не только отдельный модуль, но и его взаимодействие с другими модулями и компонентами программы или системы. В этом случае отладка проводится на уровне всей системы, а не только на уровне отдельных модулей.</p><p><strong>Основные характеристики комплексной отладки:</strong></p><ol><li><p><strong>Отслеживание взаимодействия:</strong> Комплексная отладка позволяет отслеживать взаимодействие между различными компонентами системы.</p></li><li><p><strong>Выявление ошибок взаимодействия:</strong> Позволяет обнаруживать ошибки и несоответствия, возникающие при работе нескольких модулей вместе.</p></li><li><p><strong>Контекст выполнения:</strong> При комплексной отладке учитывается контекст выполнения модулей в рамках всей системы, что может быть важным при обнаружении проблем.</p></li></ol><p><strong>Когда применяется каждый вид отладки:</strong></p><ul><li><p><strong>Автономная отладка:</strong> Применяется, когда необходимо сосредоточиться только на отдельном модуле, когда возможно, что ошибка находится только в его коде, и для тестирования функциональности модуля в изоляции.</p></li><li><p><strong>Комплексная отладка:</strong> Применяется, когда требуется выявить ошибки взаимодействия между компонентами, убедиться в корректной работе всей системы в целом, или при сложных ошибках, которые проявляются только при совместной работе нескольких модулей. Комплексная отладка может потребовать использования инструментов и техник, специфичных для отладки на уровне системы.</p></li></ul></div>"],["Архитектура программного средства. Понятие архитектуры, Основные классы ПС","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Архитектура программного средства:</strong></p><p><strong>Понятие архитектуры программного средства:</strong></p><p>Архитектура программного средства (ПС) - это высокоуровневое описание структуры и организации программного продукта, определяющее взаимосвязи между его компонентами, а также правила и принципы их взаимодействия. Архитектура представляет собой основу, на которой строится весь программный продукт.</p><p><strong>Основные элементы архитектуры программного средства:</strong></p><ol><li><p><strong>Компоненты (модули):</strong> Это основные блоки программного продукта, которые выполняют определенные функции. Каждый компонент выполняет четко определенную задачу и может быть независимо разработан, тестирован и поддерживаем.</p></li><li><p><strong>Интерфейсы:</strong> Это точки взаимодействия между компонентами, через которые они обмениваются данными и вызывают друг друга. Интерфейсы определяют форматы данных, протоколы обмена и возможные операции, которые могут быть выполнены.</p></li><li><p><strong>Структура:</strong> Архитектура определяет организацию компонентов в иерархическую или другую структуру. Например, это может быть однослойная или многослойная архитектура, клиент-серверная, или другие организационные схемы.</p></li><li><p><strong>Поток управления и данных:</strong> Архитектура определяет порядок выполнения операций и передачи данных между компонентами. Это важно для обеспечения правильного функционирования программы.</p></li></ol><p><strong>Основные классы программных средств:</strong></p><ol><li><p><strong>Структурная архитектура:</strong> Программное средство организовано в виде иерархии компонентов, каждый из которых выполняет определенную функцию. Примеры включают клиент-серверные и многослойные архитектуры.</p></li><li><p><strong>Модульная архитектура:</strong> Программа разбивается на отдельные модули или компоненты, каждый из которых может быть разработан, тестирован и поддерживаться независимо.</p></li><li><p><strong>Компонентно-ориентированная архитектура:</strong> Программа строится вокруг повторно используемых компонентов, которые могут быть заменены или изменены без влияния на другие компоненты.</p></li><li><p><strong>Событийно-ориентированная архитектура:</strong> Программа реагирует на события, такие как пользовательские действия или сигналы от других компонентов, и выполняет соответствующие действия.</p></li><li><p><strong>Служба-ориентированная архитектура:</strong> Программа предоставляет определенные службы, которые могут быть использованы другими программами через определенные интерфейсы.</p></li><li><p><strong>Распределенная архитектура:</strong> Программа состоит из компонентов, которые могут быть размещены на разных узлах сети и взаимодействуют по сетевому протоколу.</p></li></ol><p>Выбор архитектуры зависит от требований программного продукта, характеристик разрабатываемой системы и потребностей пользователей. Правильно спроектированная архитектура способствует легкости сопровождения, масштабируемости и расширяемости программного средства.</p></div>"],["Аттестация программного средства. Методы оценки качества программного средства","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Аттестация программного средства:</strong></p><p><strong>Аттестация программного средства</strong> - это процесс оценки и подтверждения соответствия программного продукта определенным стандартам, требованиям и спецификациям. Целью аттестации является обеспечение уверенности в том, что программное средство работает корректно, надежно и соответствует заданным критериям качества.</p><p><strong>Методы оценки качества программного средства:</strong></p><ol><li><p><strong>Тестирование:</strong></p><ul><li><strong>Модульное тестирование:</strong> Проверка отдельных модулей программы на правильность выполнения.</li><li><strong>Интеграционное тестирование:</strong> Проверка взаимодействия между различными модулями и компонентами программы.</li><li><strong>Системное тестирование:</strong> Проверка работы всей программы в целом, в различных условиях и сценариях использования.</li><li><strong>Приемочное тестирование:</strong> Проверка соответствия программы требованиям заказчика и готовности продукта к внедрению.</li></ul></li><li><p><strong>Статический анализ:</strong></p><ul><li><strong>Анализ кода:</strong> Проверка и анализ исходного кода программы с помощью статических анализаторов на предмет наличия ошибок, нарушения стандартов кодирования и потенциальных проблем.</li><li><strong>Анализ документации:</strong> Проверка документации на полноту, точность и соответствие требованиям.</li></ul></li><li><p><strong>Проверка требований и спецификаций:</strong></p><ul><li><strong>Верификация:</strong> Проверка того, что программное средство было разработано в соответствии с заданными требованиями и спецификациями.</li><li><strong>Валидация:</strong> Проверка того, что программное средство решает задачи и нужды пользователей.</li></ul></li><li><p><strong>Использование метрик:</strong></p><ul><li><strong>Метрики кода:</strong> Измерение характеристик и качества исходного кода программы, таких как сложность, размер, степень покрытия кода тестами и т. д.</li><li><strong>Метрики процесса разработки:</strong> Измерение характеристик процесса разработки, таких как время разработки, количество ошибок и т. д.</li></ul></li><li><p><strong>Экспертное оценивание:</strong> Оценка качества программного средства и его соответствия требованиям проводится экспертами, имеющими опыт в данной области.</p></li><li><p><strong>Сравнение с аналогичными программами:</strong> Проведение сравнительного анализа с аналогичными программами или с программами, которые уже успешно прошли аттестацию.</p></li><li><p><strong>Контроль качества в процессе разработки:</strong> Использование процессов и методологий, направленных на обеспечение высокого качества программного продукта на каждом этапе разработки.</p></li></ol><p>Комбинация этих методов и инструментов помогает достичь высокого уровня качества программного средства, обеспечивая его надежность, функциональность, безопасность и соответствие требованиям пользователей и заказчиков.</p></div>"],["Верификация и валидация.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Верификация и валидация:</strong></p><p><strong>Верификация:</strong></p><p><strong>Верификация</strong> - это процесс проверки того, что программное средство или система были правильно разработаны в соответствии с заданными спецификациями и требованиями. Она направлена на то, чтобы убедиться, что программное средство делает то, что от него ожидается на этапе разработки.</p><p><strong>Основные характеристики верификации:</strong></p><ol><li><p><strong>Осуществляется на ранних этапах:</strong> Верификация проводится на ранних стадиях жизненного цикла разработки программного средства, когда еще нет окончательного продукта.</p></li><li><p><strong>Статический процесс:</strong> Она обычно осуществляется без выполнения программы и включает проверку документации, спецификаций и исходного кода.</p></li><li><p><strong>Проверка правильности:</strong> Верификация проверяет, соответствует ли каждый этап разработки спецификациям и требованиям.</p></li><li><p><strong>Направлена на процесс разработки:</strong> Верификация оценивает процесс разработки, а не конечный продукт.</p></li><li><p><strong>Задача разработчиков:</strong> Обычно верификация выполняется разработчиками программного средства, хотя может быть вовлечены и другие члены команды.</p></li></ol><p><strong>Валидация:</strong></p><p><strong>Валидация</strong> - это процесс проверки того, что программное средство или система решает актуальные потребности пользователей и соответствует их ожиданиям. Она направлена на то, чтобы убедиться, что программное средство делает то, что требуется в реальных условиях эксплуатации.</p><p><strong>Основные характеристики валидации:</strong></p><ol><li><p><strong>Осуществляется на поздних этапах:</strong> Валидация проводится на поздних стадиях разработки, когда уже есть рабочий прототип или окончательный продукт.</p></li><li><p><strong>Динамический процесс:</strong> Она обычно осуществляется с выполнением программы в реальной среде.</p></li><li><p><strong>Проверка актуальности:</strong> Валидация проверяет, решает ли программное средство актуальные проблемы пользователей и соответствует ли его функциональность и требования реальным ситуациям.</p></li><li><p><strong>Направлена на продукт:</strong> Валидация оценивает окончательный продукт и его работу в реальных условиях.</p></li><li><p><strong>Задача пользователей и заказчиков:</strong> Валидацию часто выполняют пользователи, заказчики или независимые тестировщики, которые представляют интересы пользователей.</p></li></ol><p><strong>Сходства и различия между верификацией и валидацией:</strong></p><ul><li>Оба процесса направлены на обеспечение качества программного продукта.</li><li>Верификация фокусируется на процессе разработки и соответствии спецификациям, в то время как валидация проверяет соответствие реальным потребностям пользователей и ожиданиям.</li><li>Верификация выполняется на ранних стадиях разработки, в то время как валидация проводится на поздних стадиях, когда уже есть рабочий продукт.</li><li>Оба процесса выполняются с помощью различных методов тестирования, анализа и проверки, но имеют разные цели и охватывают разные аспекты программного продукта.</li></ul></div>"],["Внедрение, эксплуатация и сопровождение","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Внедрение, эксплуатация и сопровождение:</strong></p><p><strong>Внедрение:</strong></p><p><strong>Внедрение</strong> - это процесс внедрения программного продукта или системы в реальную среду и начало ее использования пользователями. Этот этап следует за завершением разработки и тестирования программного продукта. Внедрение включает в себя различные деятельности, такие как установка программного обеспечения на целевые компьютеры, проведение обучения пользователей, подготовка документации, а также перенос данных, если это необходимо.</p><p><strong>Эксплуатация:</strong></p><p><strong>Эксплуатация</strong> - это фаза жизненного цикла программного продукта, когда она начинает свое активное использование пользователями для выполнения определенных задач и достижения целей. Этот этап может продолжаться в течение длительного времени, пока продукт остается востребованным и выполняет функции, для которых он предназначен. Во время эксплуатации пользователи используют программное средство для своих повседневных дел и решения задач.</p><p><strong>Сопровождение:</strong></p><p><strong>Сопровождение</strong> - это процесс поддержания и обновления программного продукта после его внедрения и во время эксплуатации. В течение времени могут возникать ошибки, требования пользователей могут меняться, возникают новые технические задачи, связанные с окружающей инфраструктурой, поэтому программное обеспечение требует регулярных обновлений и поддержки.</p><p><strong>Основные аспекты внедрения, эксплуатации и сопровождения:</strong></p><ol><li><p><strong>Подготовка к внедрению:</strong> Внедрение требует тщательной подготовки, включая обучение персонала, подготовку документации, создание резервных копий данных и тестирование на целевой среде.</p></li><li><p><strong>Обучение пользователей:</strong> Пользователи должны быть обучены работе с программным продуктом, чтобы использовать его эффективно и безопасно.</p></li><li><p><strong>Постоянное обновление:</strong> Программное обеспечение может регулярно обновляться и совершенствоваться для улучшения функциональности, исправления ошибок и решения новых требований пользователей.</p></li><li><p><strong>Поддержка пользователей:</strong> В процессе эксплуатации необходима поддержка пользователей, которые могут сталкиваться с проблемами, ошибками или нуждаться в помощи.</p></li><li><p><strong>Мониторинг производительности:</strong> Во время эксплуатации производительность программного средства может быть проанализирована и оптимизирована для обеспечения эффективной работы.</p></li><li><p><strong>Регулярное тестирование и обслуживание:</strong> Важно регулярно тестировать программное обеспечение и его компоненты, а также поддерживать его инфраструктуру и окружение в рабочем состоянии.</p></li><li><p><strong>Анализ обратной связи:</strong> Обратная связь от пользователей и заказчиков может помочь определить слабые места и предложить улучшения.</p></li></ol><p>Эффективное внедрение, эксплуатация и сопровождение программного продукта являются критическими этапами его жизненного цикла, чтобы обеспечить успешное функционирование и удовлетворение потребностей пользователей на протяжении всего срока службы продукта.</p></div>"],["Вспомогательные средства проектирования.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Вспомогательные средства проектирования:</strong></p><p>В конструировании программного обеспечения применяются различные вспомогательные средства и инструменты, которые помогают разработчикам более эффективно и точно выполнять процесс проектирования. Эти инструменты помогают автоматизировать некоторые задачи, обеспечивают визуальное представление структуры системы и помогают управлять и контролировать процесс проектирования.</p><p><strong>Некоторые из вспомогательных средств проектирования включают:</strong></p><ol><li><p><strong>Интегрированные среды разработки (IDE):</strong> Это программные средства, которые объединяют в себе редакторы кода, компиляторы, отладчики и другие инструменты для разработки программного обеспечения. IDE обеспечивают удобный интерфейс для написания, тестирования и отладки кода.</p></li><li><p><strong>UML-инструменты:</strong> UML (Unified Modeling Language) является стандартным языком моделирования, используемым для визуализации и описания различных аспектов системы. UML-инструменты позволяют разработчикам создавать UML-диаграммы, такие как диаграммы классов, диаграммы последовательности, диаграммы состояний и т. д.</p></li><li><p><strong>Кейсы применения (Use Case Tools):</strong> Кейсы применения используются для моделирования и описания функциональности системы из перспективы пользователей. Эти инструменты позволяют определить основные сценарии использования системы и взаимодействие между актерами и функциональностью.</p></li><li><p><strong>CASE-средства:</strong> CASE (Computer-Aided Software Engineering) представляют собой инструменты для автоматизации различных задач в процессе проектирования и разработки программного обеспечения. Это могут быть инструменты для управления требованиями, моделирования, тестирования, анализа и документирования.</p></li><li><p><strong>Отладчики:</strong> Отладчики - это программные средства, которые позволяют разработчикам искать и исправлять ошибки в программном коде. Отладчики обычно позволяют пошагово выполнять код, просматривать значения переменных, анализировать стек вызовов и т. д.</p></li><li><p><strong>Средства тестирования:</strong> Эти средства помогают разработчикам проводить тестирование программного обеспечения, включая модульное тестирование, интеграционное тестирование, системное тестирование и т. д. Они также могут предоставлять отчеты о результатах тестирования.</p></li><li><p><strong>Средства контроля версий:</strong> Средства контроля версий позволяют разработчикам управлять изменениями в коде и отслеживать различные версии программного обеспечения. Они обеспечивают возможность совместной работы нескольких разработчиков над проектом.</p></li></ol><p>Использование вспомогательных средств проектирования повышает эффективность и качество процесса конструирования программного обеспечения, облегчает визуализацию структуры и функциональности системы, а также упрощает совместную работу в команде разработчиков.</p></div>"],["Модульное программирование. Обобщенная структура модуля.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Модульное программирование и обобщенная структура модуля:</strong></p><p><strong>Модульное программирование</strong> - это методология разработки программного обеспечения, которая предполагает разделение программы на небольшие, логически связанные и независимые части, называемые модулями. Каждый модуль выполняет определенную функцию и может быть разработан и тестирован отдельно, что упрощает поддержку и расширение программы.</p><p><strong>Обобщенная структура модуля</strong> в модульном программировании обычно включает следующие элементы:</p><ol><li><p><strong>Интерфейс:</strong> Интерфейс модуля определяет, как внешние компоненты могут взаимодействовать с модулем. Это включает в себя определение функций, которые модуль предоставляет для использования другими частями программы, а также определение входных и выходных данных модуля.</p></li><li><p><strong>Реализация:</strong> Реализация модуля содержит код, который реализует функциональность модуля. Здесь определены алгоритмы и логика, которая обеспечивает выполнение задач модуля. Важно, чтобы реализация была изолирована от других модулей и не зависела от их внутренней реализации.</p></li><li><p><strong>Интерфейсные переменные:</strong> Модуль может использовать некоторые переменные, которые не являются его входными или выходными данными, но используются для обмена информацией с другими модулями или для сохранения промежуточных результатов.</p></li><li><p><strong>Зависимости:</strong> Зависимости модуля указывают на другие модули, от которых зависит данный модуль. Зависимости могут быть выражены в виде вызовов функций из других модулей или в виде использования их переменных.</p></li><li><p><strong>Документация:</strong> Важной частью обобщенной структуры модуля является документация, которая описывает назначение модуля, его интерфейс, ожидаемое поведение, а также ограничения и требования к его использованию.</p></li><li><p><strong>Тестирование:</strong> Каждый модуль должен быть хорошо протестирован, чтобы убедиться, что он выполняет свои функции правильно и не влияет на работу других модулей. Модульные тесты проверяют правильность работы отдельных модулей перед интеграцией в более крупные системы.</p></li></ol><p><strong>Преимущества модульного программирования:</strong></p><ul><li><p><strong>Модульность:</strong> Разделение программы на модули упрощает понимание, разработку и поддержку кода, так как каждый модуль решает отдельную задачу.</p></li><li><p><strong>Переиспользование:</strong> Модули могут быть переиспользованы в других проектах, что сокращает время разработки новых программ.</p></li><li><p><strong>Изоляция ошибок:</strong> Ошибка в одном модуле обычно не повлияет на работу остальной программы, что упрощает отладку и исправление ошибок.</p></li><li><p><strong>Параллельная разработка:</strong> Разработчики могут работать над разными модулями одновременно, что ускоряет процесс разработки.</p></li></ul><p>Модульное программирование способствует созданию более структурированных, понятных и надежных программных систем, что делает его популярным подходом в разработке программного обеспечения.</p></div>"],["Нисходящее тестирование. Преимущества нисходящего тестирования.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Нисходящее тестирование (Top-down testing):</strong></p><p><strong>Нисходящее тестирование</strong> - это метод тестирования программного обеспечения, при котором тестирование проводится начиная с верхнего уровня иерархии системы (как правило, с пользовательского интерфейса или внешнего интерфейса) и постепенно спускается на более низкие уровни иерархии, пока не будут протестированы все компоненты системы.</p><p><strong>Преимущества нисходящего тестирования:</strong></p><ol><li><p><strong>Раннее выявление критических ошибок:</strong> При нисходящем тестировании сначала тестируется верхний уровень системы, который обычно включает наиболее критические и важные функции. Это позволяет выявить критические ошибки и проблемы на ранних стадиях разработки, что уменьшает риск возникновения серьезных проблем в более поздних этапах разработки.</p></li><li><p><strong>Быстрая обратная связь:</strong> Нисходящее тестирование позволяет быстро получить обратную связь о работе системы на высоком уровне, что позволяет быстро выявлять проблемы и вносить изменения в дизайн или архитектуру системы при необходимости.</p></li><li><p><strong>Эффективное использование времени и ресурсов:</strong> Тестирование верхнего уровня системы может быть выполнено даже до того, как все низкоуровневые компоненты полностью разработаны. Это позволяет сэкономить время и ресурсы, так как можно начать тестирование на ранних этапах разработки.</p></li><li><p><strong>Легкость интеграции:</strong> При нисходящем тестировании тестирование верхних уровней системы проводится с имитацией нижних уровней (часто с помощью заглушек или фиктивных компонентов). Это упрощает процесс интеграции, так как можно начать тестирование высокоуровневых функций до завершения разработки всех компонентов.</p></li><li><p><strong>Поддержка параллельной разработки:</strong> Нисходящее тестирование позволяет разрабатывать различные части системы независимо друг от друга. Таким образом, различные команды разработчиков могут параллельно заниматься разработкой различных модулей или компонентов системы.</p></li><li><p><strong>Управляемость сложности:</strong> Тестирование верхнего уровня системы позволяет сосредотачиваться на функциональности и требованиях системы, не углубляясь в детали реализации. Это упрощает процесс управления сложностью системы.</p></li></ol><p>Нисходящее тестирование предоставляет эффективный подход для тестирования и разработки программного обеспечения, особенно при работе над крупными и сложными проектами, и позволяет обнаруживать и устранять проблемы на ранних этапах разработки.</p></div>"],["Обеспечение функциональности и надежности программного средства.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Обеспечение функциональности и надежности программного средства:</strong></p><p><strong>Обеспечение функциональности</strong> - это процесс разработки программного обеспечения с учетом заданных функциональных требований, которые определяют, какие функции и возможности должно предоставлять программное средство. Функциональные требования определяют поведение программы и описывают, что программа должна делать.</p><p><strong>Обеспечение надежности</strong> - это процесс разработки программного обеспечения с учетом требований к надежности и стабильности работы программы. Надежность программного средства определяет его способность выполнять свои функции без сбоев, ошибок и непредвиденных ситуаций.</p><p><strong>Некоторые методы и подходы для обеспечения функциональности и надежности программного средства:</strong></p><ol><li><p><strong>Тестирование:</strong> Тестирование - это процесс проверки программного средства на соответствие функциональным и надежностным требованиям. Оно включает в себя выполнение тестовых сценариев, сравнение результатов с ожидаемыми значениями и выявление ошибок и дефектов.</p></li><li><p><strong>Формальные методы верификации и валидации:</strong> Использование формальных методов позволяет математически доказать, что программное средство соответствует определенным спецификациям и не содержит ошибок или противоречий.</p></li><li><p><strong>Код-ревью:</strong> Код-ревью - это процесс проверки и анализа программного кода другими разработчиками для выявления ошибок, уязвимостей и несоответствий стандартам и соглашениям.</p></li><li><p><strong>Использование проверенных библиотек и компонентов:</strong> Использование стабильных и проверенных библиотек и компонентов может повысить надежность программного средства и уменьшить вероятность ошибок.</p></li><li><p><strong>Управление рисками:</strong> Анализ рисков и принятие соответствующих мер позволяют предотвращать проблемы и сбои на ранних стадиях разработки и внедрения программного обеспечения.</p></li><li><p><strong>Регулярные обновления и сопровождение:</strong> Регулярные обновления и сопровождение программного средства помогают исправлять ошибки, устранять уязвимости и добавлять новую функциональность для повышения надежности и функциональности программы.</p></li><li><p><strong>Техническая поддержка и обратная связь пользователей:</strong> Активная обратная связь от пользователей и предоставление технической поддержки помогают выявлять проблемы, связанные с функциональностью и надежностью программного средства, и принимать меры для их устранения.</p></li></ol><p>Обеспечение функциональности и надежности программного средства является критическим аспектом в процессе его разработки и использования. Эти подходы помогают создавать стабильные, эффективные и надежные программы, которые удовлетворяют потребности пользователей и бизнес-задачи.</p></div>"],["Объектный подход к разработке программных средств.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Объектный подход к разработке программных средств:</strong></p><p>Объектно-ориентированный подход (ООП) к разработке программных средств представляет собой методологию программирования, в которой программа рассматривается как совокупность взаимосвязанных объектов. Объекты объединяют данные (переменные) и операции (методы), которые манипулируют этими данными. Объекты взаимодействуют друг с другом, образуя сложную структуру, представляющую систему.</p><p><strong>Основные принципы объектно-ориентированного подхода:</strong></p><ol><li><p><strong>Инкапсуляция:</strong> Инкапсуляция означает объединение данных и методов, которые работают с этими данными, внутри объекта. Доступ к данным объекта осуществляется через его методы, что позволяет скрыть детали реализации и защитить данные от неправильного использования.</p></li><li><p><strong>Наследование:</strong> Наследование позволяет создавать новые классы на основе существующих классов (родительских) и наследовать их свойства и методы. Это позволяет повторно использовать код и создавать иерархии классов, что упрощает организацию программы и делает ее более гибкой и расширяемой.</p></li><li><p><strong>Полиморфизм:</strong> Полиморфизм позволяет использовать один и тот же метод или оператор для различных типов данных. Это достигается благодаря возможности классов иметь одинаковые методы с одинаковыми именами, но с различными реализациями.</p></li></ol><p><strong>Преимущества объектно-ориентированного подхода:</strong></p><ol><li><p><strong>Модульность и повторное использование кода:</strong> Объекты позволяют разбивать программу на независимые модули, что упрощает ее понимание и сопровождение. Кроме того, возможность наследования позволяет повторно использовать код, что уменьшает объем работы и повышает производительность.</p></li><li><p><strong>Гибкость и расширяемость:</strong> Объектно-ориентированный подход позволяет создавать иерархии классов, что облегчает добавление новых функций и расширение программы без изменения существующего кода.</p></li><li><p><strong>Повышенная надежность и устойчивость к ошибкам:</strong> Инкапсуляция и контролируемый доступ к данным позволяют изолировать ошибки в пределах объекта, что уменьшает вероятность влияния ошибок на другие части программы.</p></li><li><p><strong>Поддержка абстракции:</strong> ООП позволяет создавать абстракции, которые позволяют скрыть сложность реализации и сосредоточиться на важных аспектах программы.</p></li></ol><p>Объектно-ориентированный подход стал широко используемым методом разработки программного обеспечения, так как позволяет создавать сложные и гибкие программы, которые легко поддерживать и модифицировать. ООП также способствует повышению производительности и эффективности разработки.</p></div>"],["Основные факторы, влияющие на трудоемкость разработки комплексов программ. Длительность разработки программных средств.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Основные факторы, влияющие на трудоемкость разработки комплексов программ и длительность разработки программных средств:</strong></p><ol><li><p><strong>Объем и сложность программного продукта:</strong> Чем больше объем функциональности, требуемый от программного продукта, и чем сложнее его реализация, тем более трудоемкой будет разработка.</p></li><li><p><strong>Требования и изменения требований:</strong> Качественное определение требований к программному продукту и четкость их формулировки влияют на эффективность разработки. Неясные, изменяющиеся или поздно предоставленные требования могут существенно увеличить трудоемкость и продолжительность проекта.</p></li><li><p><strong>Квалификация команды разработчиков:</strong> Опыт и уровень знаний команды разработчиков существенно влияют на скорость и качество разработки. Команда, обладающая высокой квалификацией и опытом в разрабатываемой области, может справиться с проектом более быстро и эффективно.</p></li><li><p><strong>Методология разработки:</strong> Выбор методологии разработки, такой как водопадная, инкрементная, спиральная или Agile, также влияет на продолжительность проекта и его успех.</p></li><li><p><strong>Используемые технологии и инструменты:</strong> Использование современных технологий и инструментов для разработки может существенно ускорить процесс разработки и повысить качество программного продукта.</p></li><li><p><strong>Сроки и ограничения:</strong> Наличие жестких сроков или бюджетных ограничений может повлиять на трудоемкость разработки. Короткие сроки могут привести к необходимости использовать ускоренные методы разработки, что может повлиять на качество продукта.</p></li><li><p><strong>Коммуникация и взаимодействие с заказчиком:</strong> Эффективная коммуникация с заказчиком и понимание его требований позволяют избежать недопониманий и уточнений, что способствует более быстрой разработке.</p></li><li><p><strong>Тестирование и отладка:</strong> Тщательное тестирование и отладка программного продукта влияют на общую продолжительность разработки. Непредвиденные ошибки и задержки в этапе тестирования могут потребовать дополнительного времени для исправления.</p></li><li><p><strong>Сопровождение и поддержка:</strong> Необходимость в последующем сопровождении и поддержке программного продукта также может повлиять на длительность разработки.</p></li></ol><p>Все эти факторы взаимосвязаны и могут оказывать как положительное, так и отрицательное влияние на трудоемкость разработки и длительность проекта. Правильное управление и планирование проекта, а также использование современных подходов и инструментов помогут справиться с вызовами и обеспечить успешную разработку программного обеспечения.</p></div>"],["Основные этапы жизненного цикла программ.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Основные этапы жизненного цикла программного продукта:</strong></p><p>Жизненный цикл программного продукта представляет собой последовательность этапов, чередующихся с момента начала разработки и до его вывода из эксплуатации. Каждый этап выполняет определенные функции и имеет свои характерные особенности. В зависимости от методологии разработки и типа программного продукта, этапы могут называться и структурироваться по-разному, но общая схема может включать следующие основные этапы:</p><ol><li><p><strong>Планирование и анализ:</strong> На этом этапе определяются требования к программному продукту, формируется концепция проекта, определяются его цели и задачи. Производится оценка рисков и выработка стратегии разработки.</p></li><li><p><strong>Проектирование:</strong> В этом этапе разрабатывается детальное техническое задание, определяется архитектура программного продукта, выделяются его компоненты и модули, происходит проектирование интерфейсов.</p></li><li><p><strong>Разработка:</strong> На данном этапе происходит фактическое создание программного продукта на основе предварительно разработанного технического задания и проекта. Программисты пишут код, создают модули, интегрируют компоненты.</p></li><li><p><strong>Тестирование:</strong> Проводятся различные виды тестирования для выявления ошибок и дефектов в программном продукте. Этот этап помогает удостовериться в корректности и соответствии программы требованиям.</p></li><li><p><strong>Внедрение:</strong> На этом этапе программный продукт передается заказчику или ставится в эксплуатацию. Пользователи начинают использовать программу в реальных условиях.</p></li><li><p><strong>Эксплуатация:</strong> На этом этапе программное обеспечение активно используется пользователями. Возможно выполнение сопровождения и поддержки, а также выпуск обновлений.</p></li><li><p><strong>Снятие с эксплуатации:</strong> По истечении срока службы или по другим причинам программный продукт может быть выведен из эксплуатации и прекращена его поддержка.</p></li></ol><p>После завершения жизненного цикла программного продукта, возможно его удаление или архивирование, в случае, если он более не используется. Отдельные методологии разработки программного обеспечения могут иметь свои варианты этапов и дополнительные подходы, но общая схема этапов жизненного цикла остается применимой для большинства проектов.</p></div>"],["Особенности объектного подхода на этапе конструирования ПС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Особенности объектного подхода на этапе конструирования программного средства:</strong></p><p>Объектно-ориентированный подход (ООП) является одним из важных подходов в разработке программного обеспечения. На этапе конструирования программного средства объектный подход предлагает следующие особенности:</p><ol><li><p><strong>Абстракция:</strong> Объекты в объектно-ориентированном подходе представляют абстракции реальных или виртуальных объектов, которые взаимодействуют друг с другом. На этапе конструирования ПС определяются классы объектов, их свойства и методы.</p></li><li><p><strong>Инкапсуляция:</strong> Классы объектов инкапсулируют данные и методы, относящиеся к этим данным. Это позволяет обеспечить контролируемый доступ к данным и скрыть детали реализации от внешних компонентов.</p></li><li><p><strong>Наследование:</strong> Наследование позволяет создавать новые классы на основе существующих, повторно использовать код и расширять функциональность. На этапе конструирования определяются иерархии классов и их взаимосвязи.</p></li><li><p><strong>Полиморфизм:</strong> Полиморфизм позволяет использовать один и тот же интерфейс для различных классов объектов. Это облегчает создание универсальных методов и функций, которые могут работать с разными типами объектов.</p></li><li><p><strong>Модульность:</strong> ООП способствует модульности программного кода. Каждый класс представляет собой модуль со своими функциями и данными. Это упрощает понимание и поддержку кода.</p></li><li><p><strong>Сокрытие информации:</strong> ООП позволяет скрыть реализацию методов и данных объектов. Это позволяет создавать надежные и защищенные программные средства.</p></li><li><p><strong>Повторное использование кода:</strong> Благодаря наследованию и полиморфизму объектно-ориентированный подход способствует повторному использованию кода, что уменьшает объем работы на этапе конструирования и улучшает общую эффективность разработки.</p></li><li><p><strong>Проектирование на уровне объектов:</strong> На этапе конструирования программного средства уделяется особое внимание проектированию классов объектов, определению их интерфейсов и взаимодействия между ними.</p></li></ol><p>В целом, объектно-ориентированный подход способствует созданию гибких, расширяемых и легко поддерживаемых программных средств. Он позволяет лучше организовать структуру программы и повысить ее модульность и удобство использования.</p></div>"],["Сложность программного обеспечения. Характерные черты","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Сложность программного обеспечения и его характерные черты:</strong></p><p>Сложность программного обеспечения (ПО) является одним из ключевых аспектов в его разработке и оценке. Она отражает степень сложности и разнообразия элементов, взаимодействий и задач, которые выполняет программное средство. Характерные черты сложности программного обеспечения включают:</p><ol><li><p><strong>Многообразие компонентов:</strong> Сложные программные продукты часто состоят из большого числа компонентов (модулей, классов, библиотек), которые взаимодействуют между собой для решения задачи. При этом каждый компонент может выполнять свою уникальную функцию.</p></li><li><p><strong>Сложные зависимости:</strong> Компоненты программного обеспечения могут быть связаны между собой сложными зависимостями, что усложняет понимание взаимосвязей и может повлечь за собой проблемы при изменениях в коде.</p></li><li><p><strong>Сложность взаимодействия:</strong> Крупные программные системы обычно обеспечивают взаимодействие между множеством компонентов, что может привести к сложности синхронизации, обработки ошибок и контроля взаимодействия.</p></li><li><p><strong>Сложные алгоритмы:</strong> Сложные программные продукты часто требуют использования сложных алгоритмов для решения задач, таких как оптимизация, распределение ресурсов или обработка больших объемов данных.</p></li><li><p><strong>Трудности тестирования и отладки:</strong> Сложное программное обеспечение может быть труднее подвергнуть полному тестированию и отладке из-за большого объема кода, сложных взаимодействий и возможных побочных эффектов.</p></li><li><p><strong>Сложность поддержки:</strong> Сложное программное обеспечение может быть сложнее поддерживать в будущем из-за необходимости понимать и изменять множество компонентов.</p></li><li><p><strong>Высокая степень абстракции:</strong> Сложные программные продукты могут использовать высокую степень абстракции, что делает их более сложными для понимания и анализа.</p></li><li><p><strong>Зависимость от внешних факторов:</strong> В больших и сложных программных системах зависимость от внешних факторов (аппаратные и программные средства, сетевые условия и т. д.) может создавать дополнительные сложности.</p></li></ol><p>Управление сложностью программного обеспечения является важной задачей для разработчиков. Использование хороших практик программирования, модульности, абстракции, тестирования и документирования может помочь справиться с сложностью и сделать программное средство более понятным, устойчивым и легко поддерживаемым.</p></div>"]],"Тестирование программного обеспечения":[["Ручной контроль ПО. Основные методы ручного контроля","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Ручной контроль программного обеспечения и основные методы ручного контроля:</strong></p><p>Ручной контроль программного обеспечения (ПО) представляет собой процесс проверки и оценки программы, выполняемый вручную людьми. Он играет важную роль в процессе тестирования ПО и обеспечивает выявление ошибок, недочетов и соответствие требованиям. Основные методы ручного контроля включают:</p><ol><li><p><strong>Тестирование ввода данных:</strong> Проверка корректности ввода данных в программу. Проверяется, как программа обрабатывает различные типы данных, пограничные значения и некорректные данные.</p></li><li><p><strong>Тестирование функциональности:</strong> Проверка функциональных возможностей программы в соответствии с требованиями и спецификацией. Проверяются основные функции программы и их правильное выполнение.</p></li><li><p><strong>Тестирование пользовательского интерфейса:</strong> Оценка удобства использования пользовательского интерфейса. Проверка навигации, взаимодействия с элементами управления, корректности отображения и т.д.</p></li><li><p><strong>Тестирование совместимости:</strong> Проверка работы программы на разных платформах, операционных системах, браузерах и аппаратных конфигурациях.</p></li><li><p><strong>Тестирование производительности:</strong> Оценка производительности программы при различных нагрузках. Проверка скорости выполнения операций и эффективности использования ресурсов.</p></li><li><p><strong>Тестирование безопасности:</strong> Проверка наличия уязвимостей и защищенности программы от несанкционированного доступа.</p></li><li><p><strong>Тестирование восстановления после сбоев:</strong> Проверка способности программы восстанавливаться после сбоев или ошибок.</p></li><li><p><strong>Тестирование на реальных данных:</strong> Проверка работы программы на реальных или симулированных данных для выявления проблем, которые могут возникнуть в реальных условиях использования.</p></li><li><p><strong>Тестирование локализации и интернационализации:</strong> Проверка работы программы с различными языками и региональными настройками.</p></li><li><p><strong>Тестирование документации:</strong> Проверка соответствия документации реальным функциям программы и актуальности информации.</p></li></ol><p>Ручной контроль позволяет выявить множество проблем и недочетов в программном обеспечении, особенно в ранних стадиях разработки. Однако он требует времени и усилий со стороны тестировщиков, и может быть менее эффективным в отношении обнаружения сложных ошибок, которые легче выявить с помощью автоматического тестирования. Поэтому ручной контроль часто дополняется автоматическими тестами для более полного обеспечения качества программного обеспечения.</p></div>"],["Структурное тестирование (тестирование «белого ящика»). Основные способы формирования тестовых наборов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Структурное тестирование (тестирование \\"белого ящика\\") и основные способы формирования тестовых наборов:</strong></p><p>Структурное тестирование, также известное как тестирование \\"белого ящика\\" или кодовое тестирование, основывается на анализе внутренней структуры программного кода и позволяет проверить различные пути выполнения программы. Основная цель структурного тестирования - обеспечить максимальное покрытие кода и выявить ошибки, связанные с логикой и потоком управления программы. Основные способы формирования тестовых наборов в структурном тестировании включают:</p><ol><li><p><strong>Тестирование по покрытию ветвей (Branch Coverage):</strong> При этом методе тестируются все возможные ветвления в программе, включая разветвления условных операторов (if-else, switch). Цель - проверить выполнение обеих веток каждого условного оператора.</p></li><li><p><strong>Тестирование по покрытию условий (Condition Coverage):</strong> В этом случае проверяются все возможные значения каждого логического условия внутри условных операторов.</p></li><li><p><strong>Тестирование по покрытию путей (Path Coverage):</strong> При таком тестировании все возможные пути выполнения программы анализируются и тестируются. Это может включать комбинации различных ветвей и условий.</p></li><li><p><strong>Тестирование по покрытию условий и путей (Decision/Condition and Path Coverage):</strong> Этот метод комбинирует покрытие условий и путей, чтобы обеспечить более полное тестирование программы.</p></li><li><p><strong>Тестирование по покрытию циклов (Loop Coverage):</strong> Этот метод направлен на проверку всех возможных путей в циклах, включая вход и выход из циклов и различные итерации.</p></li><li><p><strong>Тестирование по покрытию данных (Data Coverage):</strong> При таком тестировании проверяются все возможные значения переменных в программе, включая крайние случаи и недопустимые значения.</p></li><li><p><strong>Тестирование ошибок (Error Testing):</strong> Этот метод направлен на специфические ошибки в коде, такие как обработка исключений, проверка наличия и обработка ошибок и т.д.</p></li><li><p><strong>Тестирование граничных значений (Boundary Value Testing):</strong> При этом тестируются значения переменных, приближающиеся к граничным условиям, так как ошибки часто возникают именно на границах допустимых значений.</p></li></ol><p>Выбор определенного метода формирования тестовых наборов зависит от характеристик программы, требований к качеству, сроков и доступных ресурсов для тестирования. Обычно комбинация различных методов обеспечивает более полное и эффективное тестирование программного обеспечения.</p></div>"],["Функциональное тестирование (тестирование «черного ящика»). Основные способы формирования тестовых наборов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Функциональное тестирование (тестирование \\"черного ящика\\") и основные способы формирования тестовых наборов:</strong></p><p>Функциональное тестирование, также известное как тестирование \\"черного ящика\\", основывается на анализе функциональности программы без знания внутренней структуры кода. В этом типе тестирования проверяется соответствие программного продукта требованиям и ожидаемому поведению на основе внешних спецификаций. Основные способы формирования тестовых наборов в функциональном тестировании включают:</p><ol><li><p><strong>Тестирование граничных значений (Boundary Value Testing):</strong> Этот метод направлен на проверку поведения программы при граничных значениях входных данных или параметров, так как ошибки часто возникают именно на границах допустимых значений.</p></li><li><p><strong>Тестирование эквивалентных классов (Equivalence Class Testing):</strong> При этом методе входные данные разбиваются на классы эквивалентности, и для каждого класса выбираются представители для тестирования. Предполагается, что все данные в одном классе эквивалентности обладают схожим поведением.</p></li><li><p><strong>Тестирование взаимодействия (Scenario-based Testing):</strong> При этом методе тестируются различные сценарии взаимодействия пользователя с программой, включая последовательность действий и реакции программы на эти действия.</p></li><li><p><strong>Тестирование случайными данными (Random Testing):</strong> Этот метод предполагает генерацию случайных данных для тестирования программы. Он может помочь выявить неожиданные проблемы, которые могут возникнуть при нестандартных входных данных.</p></li><li><p><strong>Тестирование негативных сценариев (Negative Testing):</strong> При таком тестировании проверяется поведение программы при некорректных или недопустимых входных данных или действиях пользователя.</p></li><li><p><strong>Тестирование специальных случаев (Special Case Testing):</strong> При этом методе проверяется поведение программы в специфических условиях, таких как крайние случаи, пустые значения и т.д.</p></li><li><p><strong>Тестирование с использованием тестовых сценариев (Test Scenarios):</strong> Тестовые сценарии разрабатываются на основе требований и функциональных возможностей программы, и их выполнение позволяет проверить соответствие программы требованиям.</p></li></ol><p>Выбор определенного метода формирования тестовых наборов зависит от характеристик программы, сложности функциональности и требований к качеству программного обеспечения. Часто комбинация различных методов обеспечивает более полное тестирование и повышает уверенность в работоспособности программы в различных ситуациях.</p></div>"],["Организация процесса тестирования ПО. Методика тестирования. Тестирование модулей. Нисходящее и восходящее тестирование интеграции. Оценочное тестирование","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Организация процесса тестирования ПО и методики тестирования:</strong></p><p>Организация процесса тестирования программного обеспечения (ПО) является важной частью разработки качественного и надежного программного продукта. Она включает несколько этапов и методик, которые обеспечивают проверку работоспособности и соответствия ПО заданным требованиям.</p><p><strong>1. Методика тестирования:</strong>\\nМетодика тестирования - это план действий, определенный для проведения тестирования программного обеспечения. Она определяет, какие виды тестов будут проведены, в какой последовательности и с какими целями. Некоторые распространенные методики тестирования включают:</p><ul><li><p><strong>Методика \\"V-модели\\":</strong> В этом методе каждый этап разработки (анализ, проектирование, кодирование) соответствует определенному этапу тестирования (тестирование модулей, интеграционное тестирование, системное тестирование и т.д.). Это позволяет обнаруживать ошибки на ранних этапах и снижает вероятность серьезных проблем на стадии завершения проекта.</p></li><li><p><strong>Методика \\"Spiral\\":</strong> Этот подход предполагает постоянный цикл повторного тестирования и уточнения требований. Процесс строится как спираль, где каждый оборот - это новый этап тестирования с уточнением и анализом.</p></li><li><p><strong>Методика \\"Agile\\" и \\"Scrum\\":</strong> Эти методики базируются на итеративном подходе, когда разработка и тестирование происходят параллельно в рамках коротких итераций. Они позволяют быстро вносить изменения и адаптироваться к новым требованиям.</p></li></ul><p><strong>2. Тестирование модулей:</strong>\\nТестирование модулей - это тестирование отдельных компонентов программного обеспечения (модулей). Основные методики тестирования модулей:</p><ul><li><p><strong>Методика белого ящика (структурное тестирование):</strong> Включает в себя тестирование отдельных функций и путей выполнения кода внутри модуля.</p></li><li><p><strong>Методика черного ящика (функциональное тестирование):</strong> Тестирование модулей на основе внешних требований и без знания внутренней структуры кода.</p></li></ul><p><strong>3. Нисходящее и восходящее тестирование интеграции:</strong></p><ul><li><p><strong>Нисходящее тестирование интеграции:</strong> При этом подходе интегрированные модули тестируются снизу вверх - от наименьшей степени зависимости до более комплексных систем.</p></li><li><p><strong>Восходящее тестирование интеграции:</strong> Здесь интеграционное тестирование проводится от верхнего уровня системы к низшим уровням, чтобы проверить соответствие всей системы требованиям и ожиданиям.</p></li></ul><p><strong>4. Оценочное тестирование:</strong>\\nОценочное тестирование, также известное как тестирование производительности, целевое тестирование или нагрузочное тестирование, используется для проверки производительности и стабильности системы при различных нагрузках. Это важно для оценки способности программного обеспечения справиться с реальной нагрузкой, такой как большое количество пользователей или объем данных.</p><p>Организация тестирования ПО может включать различные методики, в зависимости от характеристик проекта, требований и доступных ресурсов. Цель тестирования - обеспечить высокое качество программного обеспечения, выявить и устранить ошибки, а также удовлетворить потребности пользователей.</p></div>"],["Особенности тестирования объектно-ориентированных программных систем. Проектирование объектно-ориентированных тестовых вариантов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Особенности тестирования объектно-ориентированных программных систем:</strong></p><p>Тестирование объектно-ориентированных программных систем (ООПС) имеет свои особенности, связанные с основными принципами ООП и специфическими характеристиками объектно-ориентированного программирования. Ниже представлены основные особенности тестирования ООПС:</p><p><strong>1. Инкапсуляция:</strong> ООПС использует инкапсуляцию для сокрытия внутренних деталей объектов от внешнего мира. Это может создавать сложности при доступе к приватным частям объекта для целей тестирования. Необходимо использовать методы доступа (геттеры и сеттеры) для получения доступа к закрытым данным.</p><p><strong>2. Наследование:</strong> Наследование позволяет создавать новые классы на основе уже существующих. Это приводит к цепочке зависимостей между классами. При тестировании классов, унаследованных от других классов, нужно учитывать как поведение унаследованных методов, так и новые методы, добавленные в производные классы.</p><p><strong>3. Полиморфизм:</strong> Полиморфизм позволяет объектам одного класса проявлять свои свойства и методы по-разному в зависимости от контекста. При тестировании необходимо учитывать различное поведение объектов в зависимости от их типа и контекста использования.</p><p><strong>4. Классы и объекты:</strong> Тестирование объектно-ориентированных систем требует проверки корректности работы отдельных классов и их взаимодействия друг с другом в виде объектов. Необходимо убедиться, что объекты взаимодействуют верно и передают друг другу необходимую информацию.</p><p><strong>Проектирование объектно-ориентированных тестовых вариантов:</strong></p><p>Проектирование тестовых вариантов для объектно-ориентированных программных систем требует особого внимания к структуре и поведению классов. Важно учитывать особенности ООП и специфику каждого класса при разработке тестов. Ниже представлены основные этапы проектирования объектно-ориентированных тестовых вариантов:</p><p><strong>1. Выбор тестируемых классов:</strong> Определите классы, которые необходимо протестировать. Это могут быть классы с ключевой функциональностью или классы, в которых вероятнее всего могут возникать ошибки.</p><p><strong>2. Определение тестовых случаев:</strong> Определите различные сценарии использования классов и методов. Каждый сценарий станет тестовым случаем, который нужно будет протестировать на различные входные данные и ожидаемые результаты.</p><p><strong>3. Создание тестовых данных:</strong> Подготовьте тестовые данные для выполнения тестовых случаев. Это может включать различные комбинации входных данных, включая граничные случаи и ошибочные значения.</p><p><strong>4. Разработка тестовых сценариев:</strong> Напишите код тестов, используя фреймворки для тестирования, такие как JUnit для Java или pytest для Python. Убедитесь, что тесты покрывают все аспекты функциональности классов и проверяют их корректность.</p><p><strong>5. Тестирование взаимодействия классов:</strong> При тестировании объектно-ориентированных систем также следует убедиться в корректности взаимодействия классов между собой. Это может включать проверку правильного наследования, вызов методов друг друга и передачу данных между объектами.</p><p><strong>6. Автоматизация тестов:</strong> При большом количестве тестовых случаев рекомендуется автоматизировать процесс тестирования с использованием соответствующих инструментов и фреймворков. Это поможет упростить процесс тестирования и повысить его эффективность.</p><p>Проектирование объектно-ориентированных тестовых вариантов требует тщательного планирования и учета особенностей ООПС. Цель заключается в обеспечении полного и качественного покрытия функциональности программных классов и их взаимодействия, чтобы обнаружить и устранить ошибки до выпуска программного продукта.</p></div>"]],"Объектно-ориентированное программирование":[["Основные принципы объектно-ориентированного программирования. Абстрагирование и инкапсуляция. Наследование. Полиморфизм","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Основные принципы объектно-ориентированного программирования (ООП):</strong></p><p><strong>1. Абстрагирование:</strong> Абстрагирование представляет собой процесс выделения ключевых характеристик объекта или явления и их представление в программе в виде абстракций. Абстракции позволяют скрыть детали реализации и сосредоточиться на существенных аспектах объекта или системы. В ООП абстракции реализуются с помощью классов и интерфейсов.</p><p><strong>2. Инкапсуляция:</strong> Инкапсуляция представляет собой механизм, который объединяет данные и методы, работающие с этими данными, в одном объекте. Таким образом, объект скрывает внутренние детали своей реализации от внешнего мира. Инкапсуляция обеспечивает контроль доступа к данным и защиту от несанкционированного доступа, что способствует безопасности и надежности программного кода.</p><p><strong>3. Наследование:</strong> Наследование позволяет создавать новые классы на основе уже существующих, называемых базовыми классами или суперклассами. Новый класс, который наследует свойства и методы от базового класса, называется производным классом или подклассом. Наследование позволяет унаследованным классам переиспользовать функциональность базовых классов и в то же время вносить свои собственные изменения.</p><p><strong>4. Полиморфизм:</strong> Полиморфизм позволяет объектам одного типа проявлять различное поведение, исходя из контекста. Это может быть достигнуто через переопределение методов (полиморфизм подтипов) или использование методов с одинаковыми именами, но разной реализацией (полиморфизм перегрузки). Полиморфизм способствует упрощению работы с объектами различных классов и обеспечивает гибкость при работе с типизированными данных.</p><p>Основные принципы объектно-ориентированного программирования обеспечивают гибкость, повторное использование кода, легкость поддержки и расширения программного обеспечения, а также уменьшение сложности программ. ООП позволяет разрабатывать структурированный и понятный код, что делает его предпочтительным подходом в различных областях разработки программных продуктов.</p></div>"],["Основные понятия объектного подхода Виды объектов. Характеристики объектов. Понятие класса","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Основные понятия объектного подхода:</strong></p><p><strong>1. Объект:</strong> Объект - это экземпляр класса, который представляет собой уникальный инстанс со своими уникальными значениями для каждого из своих атрибутов. Объекты являются основными строительными блоками объектно-ориентированных программ. Они могут иметь состояние (значения своих атрибутов) и поведение (методы, которые они могут вызывать).</p><p><strong>2. Виды объектов:</strong> В объектно-ориентированном программировании выделяют три основных вида объектов:</p><ul><li><p>Объекты реального мира: Представляют реальные сущности, которые могут быть абстрагированы в программный код. Например, объект \\"автомобиль\\" или \\"пользователь\\".</p></li><li><p>Объекты абстрактного мира: Представляют абстрактные сущности, которые существуют только в контексте программы. Например, объекты, представляющие математические операции или управление программой.</p></li><li><p>Объекты классов: Представляют собой экземпляры классов, которые определяют структуру и поведение объектов.</p></li></ul><p><strong>3. Характеристики объектов:</strong> Объекты имеют две основные характеристики:</p><ul><li><p>Состояние (State): Состояние объекта определяет его текущие данные или значения атрибутов в определенный момент времени.</p></li><li><p>Поведение (Behavior): Поведение объекта определяет, какие операции или методы могут быть выполнены над объектом, и что он может делать.</p></li></ul><p><strong>4. Класс:</strong> Класс - это шаблон или формальное описание, определяющее структуру, состояние и поведение объектов, которые создаются на его основе. Класс определяет атрибуты (переменные) и методы (функции), которые могут быть использованы объектами этого класса. Класс является абстракцией, которая определяет общие характеристики для всех объектов этого типа.</p><p>В объектно-ориентированном программировании объекты являются основными строительными блоками, а классы представляют собой их обобщения и шаблоны. Использование объектов и классов позволяет создавать модульный, гибкий и легко поддерживаемый код.</p></div>"],["Состав класса. Дружественные функции. Статические элементы класса. Конструкторы и деструкторы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Состав класса:</strong></p><p>Класс в объектно-ориентированном программировании имеет следующие основные составляющие:</p><ol><li><p><strong>Атрибуты (переменные класса):</strong> Это переменные, которые хранят состояние объектов класса. Атрибуты определяют характеристики объектов этого класса. Они могут быть публичными (public), приватными (private), или защищенными (protected), в зависимости от уровня доступа к ним.</p></li><li><p><strong>Методы (функции класса):</strong> Это функции, которые определяют поведение объектов класса. Методы позволяют объектам выполнять определенные операции или действия. Как и атрибуты, методы могут быть публичными, приватными или защищенными.</p></li><li><p><strong>Дружественные функции (friend functions):</strong> Дружественные функции - это функции, которые имеют доступ к приватным и защищенным членам класса, но они не являются членами самого класса. Таким образом, они могут взаимодействовать с объектами класса и использовать его приватные данные.</p></li><li><p><strong>Статические элементы класса (static):</strong> Статические элементы класса принадлежат не отдельным объектам, а самому классу. Они существуют в единственном экземпляре для всего класса, вне зависимости от количества созданных объектов. Статические атрибуты и методы можно вызывать напрямую через имя класса, без создания объекта.</p></li><li><p><strong>Конструкторы (constructors) и деструкторы (destructors):</strong> Конструкторы - это специальные методы класса, которые вызываются при создании нового объекта класса. Они выполняют инициализацию объекта и могут принимать аргументы для установки начальных значений атрибутов. Деструкторы - это также специальные методы класса, которые вызываются при удалении объекта класса или выходе за его область видимости. Деструкторы выполняют очистку памяти или другие завершающие операции.</p></li></ol><p>Класс определяет интерфейс, с помощью которого объекты данного класса взаимодействуют с внешним миром. Атрибуты и методы класса образуют его состояние и поведение соответственно. Дружественные функции и статические элементы предоставляют дополнительные возможности для управления и использования классом и его объектами. Конструкторы и деструкторы обеспечивают правильную инициализацию и освобождение ресурсов в процессе работы с объектами класса.</p></div>"],["Наследование. Простое и множественное наследование. Конструкторы и деструкторы производных классов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Наследование:</strong></p><p>Наследование является одним из основных принципов объектно-ориентированного программирования и позволяет создавать иерархии классов, где производные классы наследуют свойства и методы от базовых (родительских) классов.</p><ol><li><strong>Простое наследование:</strong> В простом наследовании класс может наследовать свойства и методы только от одного базового класса. Например:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Base</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">someMethod</span><span class=\\"hljs-params\\">()</span> </span>{\\n        <span class=\\"hljs-comment\\">// Код метода</span>\\n    }\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Derived</span> : <span class=\\"hljs-keyword\\">public</span> Base {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-comment\\">// Здесь класс Derived наследует someMethod() от класса Base</span>\\n};\\n</code></div></div></pre><ol start=\\"2\\"><li><strong>Множественное наследование:</strong> В множественном наследовании класс может наследовать свойства и методы от нескольких базовых классов. Например:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Base1</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">method1</span><span class=\\"hljs-params\\">()</span> </span>{\\n        <span class=\\"hljs-comment\\">// Код метода 1</span>\\n    }\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Base2</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">method2</span><span class=\\"hljs-params\\">()</span> </span>{\\n        <span class=\\"hljs-comment\\">// Код метода 2</span>\\n    }\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Derived</span> : <span class=\\"hljs-keyword\\">public</span> Base1, <span class=\\"hljs-keyword\\">public</span> Base2 {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-comment\\">// Здесь класс Derived наследует method1() от Base1 и method2() от Base2</span>\\n};\\n</code></div></div></pre><p><strong>Конструкторы и деструкторы производных классов:</strong></p><p>При создании объектов производных классов, конструкторы базовых классов вызываются автоматически перед выполнением конструкторов производных классов. При удалении объектов, сначала вызываются деструкторы производных классов, а затем деструкторы базовых классов.</p><p>Если в производном классе не определен конструктор, то используется конструктор по умолчанию. Если в базовом классе нет конструктора без параметров, то нужно явно вызвать конструктор базового класса в списке инициализации производного класса.</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Base</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-built_in\\">Base</span>(<span class=\\"hljs-type\\">int</span> value) {\\n        <span class=\\"hljs-comment\\">// Конструктор базового класса</span>\\n    }\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Derived</span> : <span class=\\"hljs-keyword\\">public</span> Base {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-built_in\\">Derived</span>(<span class=\\"hljs-type\\">int</span> value) : <span class=\\"hljs-built_in\\">Base</span>(value) {\\n        <span class=\\"hljs-comment\\">// Конструктор производного класса</span>\\n    }\\n};\\n</code></div></div></pre><p>При множественном наследовании порядок вызова конструкторов и деструкторов зависит от порядка указания базовых классов в списке наследования. Деструкторы вызываются в обратном порядке, от производных классов к базовым.</p></div>"],["Полиморфизм. Виртуальные функции. Абстрактные классы","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Полиморфизм:</strong></p><p>Полиморфизм - это возможность объектов различных типов обрабатываться одним и тем же обобщенным способом. В объектно-ориентированном программировании полиморфизм достигается через использование виртуальных функций и абстрактных классов.</p><p><strong>Виртуальные функции:</strong></p><p>Виртуальные функции - это функции, объявленные в базовом классе с ключевым словом <code>virtual</code>, и которые могут быть переопределены в производных классах. При вызове виртуальной функции через указатель или ссылку на базовый класс будет вызвана соответствующая функция производного класса.</p><p>Пример:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Shape</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">virtual</span> <span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">draw</span><span class=\\"hljs-params\\">()</span> </span>{\\n        <span class=\\"hljs-comment\\">// Реализация базовой функции draw</span>\\n    }\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Circle</span> : <span class=\\"hljs-keyword\\">public</span> Shape {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">draw</span><span class=\\"hljs-params\\">()</span> <span class=\\"hljs-keyword\\">override</span> </span>{\\n        <span class=\\"hljs-comment\\">// Реализация функции draw для класса Circle</span>\\n    }\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Square</span> : <span class=\\"hljs-keyword\\">public</span> Shape {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">draw</span><span class=\\"hljs-params\\">()</span> <span class=\\"hljs-keyword\\">override</span> </span>{\\n        <span class=\\"hljs-comment\\">// Реализация функции draw для класса Square</span>\\n    }\\n};\\n</code></div></div></pre><p><strong>Абстрактные классы:</strong></p><p>Абстрактный класс - это класс, который содержит хотя бы одну чисто виртуальную функцию. Чисто виртуальная функция объявляется в базовом классе без определения, используя <code>= 0</code>. Абстрактные классы не могут быть инстанцированы (созданы объекты), но они могут быть использованы в качестве интерфейсов для производных классов.</p><p>Пример:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Shape</span> {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">virtual</span> <span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">draw</span><span class=\\"hljs-params\\">()</span> </span>= <span class=\\"hljs-number\\">0</span>; <span class=\\"hljs-comment\\">// Чисто виртуальная функция</span>\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Circle</span> : <span class=\\"hljs-keyword\\">public</span> Shape {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">draw</span><span class=\\"hljs-params\\">()</span> <span class=\\"hljs-keyword\\">override</span> </span>{\\n        <span class=\\"hljs-comment\\">// Реализация функции draw для класса Circle</span>\\n    }\\n};\\n\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Square</span> : <span class=\\"hljs-keyword\\">public</span> Shape {\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">draw</span><span class=\\"hljs-params\\">()</span> <span class=\\"hljs-keyword\\">override</span> </span>{\\n        <span class=\\"hljs-comment\\">// Реализация функции draw для класса Square</span>\\n    }\\n};\\n</code></div></div></pre><p>Абстрактные классы предоставляют общий интерфейс для различных классов и позволяют реализовать полиморфизм через виртуальные функции.</p></div>"],["Параметризованные функции и классы. Стандартная библиотека шаблонов (STL)","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Параметризованные функции и классы:</strong></p><p>Параметризованные функции и классы - это функции и классы, которые могут принимать один или несколько параметров, называемых шаблонными параметрами. Шаблонные параметры позволяют создавать универсальные и переиспользуемые функции и классы, которые могут работать с различными типами данных, без необходимости написания отдельного кода для каждого типа.</p><p><strong>Пример параметризованной функции:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-function\\"><span class=\\"hljs-keyword\\">template</span>&lt;<span class=\\"hljs-keyword\\">typename</span> T&gt;\\nT <span class=\\"hljs-title\\">maximum</span><span class=\\"hljs-params\\">(T a, T b)</span> </span>{\\n    <span class=\\"hljs-keyword\\">return</span> (a &gt; b) ? a : b;\\n}\\n</code></div></div></pre><p><strong>Пример параметризованного класса:</strong></p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-keyword\\">template</span>&lt;<span class=\\"hljs-keyword\\">typename</span> T&gt;\\n<span class=\\"hljs-keyword\\">class</span> <span class=\\"hljs-title class_\\">Stack</span> {\\n<span class=\\"hljs-keyword\\">private</span>:\\n    T* data;\\n    <span class=\\"hljs-type\\">int</span> top;\\n    <span class=\\"hljs-type\\">int</span> capacity;\\n\\n<span class=\\"hljs-keyword\\">public</span>:\\n    <span class=\\"hljs-comment\\">// Конструктор</span>\\n    <span class=\\"hljs-built_in\\">Stack</span>(<span class=\\"hljs-type\\">int</span> size) {\\n        data = <span class=\\"hljs-keyword\\">new</span> T[size];\\n        top = <span class=\\"hljs-number\\">-1</span>;\\n        capacity = size;\\n    }\\n\\n    <span class=\\"hljs-comment\\">// Добавить элемент в стек</span>\\n    <span class=\\"hljs-function\\"><span class=\\"hljs-type\\">void</span> <span class=\\"hljs-title\\">push</span><span class=\\"hljs-params\\">(T element)</span> </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (top &lt; capacity - <span class=\\"hljs-number\\">1</span>) {\\n            data[++top] = element;\\n        }\\n    }\\n\\n    <span class=\\"hljs-comment\\">// Извлечь элемент из стека</span>\\n    <span class=\\"hljs-function\\">T <span class=\\"hljs-title\\">pop</span><span class=\\"hljs-params\\">()</span> </span>{\\n        <span class=\\"hljs-keyword\\">if</span> (top &gt;= <span class=\\"hljs-number\\">0</span>) {\\n            <span class=\\"hljs-keyword\\">return</span> data[top--];\\n        }\\n        <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-built_in\\">T</span>();\\n    }\\n};\\n</code></div></div></pre><p><strong>Стандартная библиотека шаблонов (STL):</strong></p><p>Стандартная библиотека шаблонов (STL) - это часть стандартной библиотеки C++, которая предоставляет широкий набор готовых шаблонных контейнеров и алгоритмов для упрощения программирования. STL включает контейнеры, такие как векторы, списки, множества и карты, а также алгоритмы, такие как сортировка, поиск, удаление элементов и т.д.</p><p>Пример использования STL для сортировки вектора:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>cpp</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-cpp\\"><span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;vector&gt;</span></span>\\n<span class=\\"hljs-meta\\">#<span class=\\"hljs-keyword\\">include</span> <span class=\\"hljs-string\\">&lt;algorithm&gt;</span></span>\\n\\n<span class=\\"hljs-function\\"><span class=\\"hljs-type\\">int</span> <span class=\\"hljs-title\\">main</span><span class=\\"hljs-params\\">()</span> </span>{\\n    std::vector&lt;<span class=\\"hljs-type\\">int</span>&gt; vec = {<span class=\\"hljs-number\\">5</span>, <span class=\\"hljs-number\\">2</span>, <span class=\\"hljs-number\\">9</span>, <span class=\\"hljs-number\\">1</span>, <span class=\\"hljs-number\\">5</span>, <span class=\\"hljs-number\\">6</span>};\\n    \\n    std::<span class=\\"hljs-built_in\\">sort</span>(vec.<span class=\\"hljs-built_in\\">begin</span>(), vec.<span class=\\"hljs-built_in\\">end</span>());\\n\\n    <span class=\\"hljs-keyword\\">for</span> (<span class=\\"hljs-type\\">int</span> num : vec) {\\n        std::cout &lt;&lt; num &lt;&lt; <span class=\\"hljs-string\\">\\" \\"</span>;\\n    }\\n\\n    <span class=\\"hljs-keyword\\">return</span> <span class=\\"hljs-number\\">0</span>;\\n}\\n</code></div></div></pre><p>STL значительно упрощает разработку программ, так как позволяет использовать готовые и эффективные реализации контейнеров и алгоритмов для работы с данными.</p></div>"]],"Операционные системы":[["Процессы и потоки. Классификация операционных систем.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Процессы и потоки:</strong></p><ul><li><p><strong>Процесс:</strong> Процесс представляет собой исполняющуюся программу в операционной системе. Каждый процесс имеет свое собственное адресное пространство, стек, и данные, что обеспечивает изоляцию и защиту данных между различными процессами. Процессы могут быть независимыми друг от друга и выполняться параллельно.</p></li><li><p><strong>Поток (Thread):</strong> Поток является легковесным исполнительным контекстом внутри процесса. Потоки внутри одного процесса используют общее адресное пространство, стек и данные, что позволяет им легко обмениваться данными. Потоки могут выполняться параллельно, что обеспечивает более эффективное использование ресурсов процессора.</p></li></ul><p><strong>Классификация операционных систем:</strong></p><p>Операционные системы можно классифицировать по различным признакам, вот некоторые из них:</p><ol><li><p><strong>По количеству пользователей:</strong></p><ul><li>Однопользовательские: Разрешается работа только одного пользователя за раз (например, Windows).</li><li>Многопользовательские: Поддерживают работу нескольких пользователей одновременно (например, Linux, UNIX).</li></ul></li><li><p><strong>По количеству задач (процессов), которые могут выполняться одновременно:</strong></p><ul><li>Однопрограммные: Позволяют выполнять только одну программу за раз.</li><li>Многопрограммные (многозадачные): Позволяют одновременно выполнять несколько программ.</li></ul></li><li><p><strong>По способу организации процессов и ресурсов:</strong></p><ul><li>Однопоточные: Поддерживают выполнение только одного потока за раз.</li><li>Многопоточные: Поддерживают выполнение нескольких потоков в рамках одного процесса.</li></ul></li><li><p><strong>По типу интерфейса:</strong></p><ul><li>Командная строка: Взаимодействие с системой осуществляется через текстовый интерфейс.</li><li>Графический интерфейс (GUI): Имеется графический пользовательский интерфейс.</li></ul></li><li><p><strong>По типу задач, которые система предназначена обслуживать:</strong></p><ul><li>Серверные ОС: Предназначены для обеспечения работы серверов и предоставления услуг клиентам (например, Windows Server, Linux Server).</li><li>Клиентские ОС: Предназначены для использования на персональных компьютерах и ноутбуках (например, Windows, macOS).</li></ul></li><li><p><strong>По устройству, на которых они работают:</strong></p><ul><li>Десктопные ОС: Предназначены для работы на стационарных компьютерах.</li><li>Мобильные ОС: Предназначены для работы на мобильных устройствах (смартфоны, планшеты) (например, Android, iOS).</li></ul></li><li><p><strong>По степени открытости исходного кода:</strong></p><ul><li>Проприетарные ОС: Исходный код закрыт, доступен только компании-разработчику (например, Windows).</li><li>Открытые ОС: Исходный код доступен для общественности и может быть изменен и улучшен (например, Linux).</li></ul></li></ol></div>"],["Функциональные компоненты ОС. Управление процессами. Управление памятью. Управление файлами и внешними устройствами.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Функциональные компоненты операционных систем:</strong></p><ol><li><p><strong>Управление процессами:</strong> Компонент, отвечающий за управление процессами в системе. Это включает создание, запуск, приостановку, возобновление, остановку и удаление процессов. Он также обеспечивает планирование процессорного времени и распределение ресурсов между процессами.</p></li><li><p><strong>Управление памятью:</strong> Этот компонент отвечает за управление оперативной памятью компьютера. В основном, его задачи включают выделение и освобождение памяти для процессов, поддержание виртуальной памяти, обработку фрагментации и управление общей памятью системы.</p></li><li><p><strong>Управление файлами:</strong> Осуществляет управление файловой системой. Это включает создание, удаление, переименование и копирование файлов и каталогов. Также обеспечивает доступ и безопасность к файлам, а также поддерживает файловые атрибуты и разрешения.</p></li><li><p><strong>Управление внешними устройствами:</strong> Компонент операционной системы, отвечающий за взаимодействие с внешними устройствами, такими как принтеры, сканеры, мониторы и другие периферийные устройства. Обеспечивает их инициализацию, доступ и управление ими.</p></li><li><p><strong>Сетевые функции:</strong> Этот компонент отвечает за поддержку сетевых функций, таких как установка и разрыв соединений, передача данных через сеть, обработка сетевых запросов и обмен информацией между устройствами в сети.</p></li><li><p><strong>Управление учетными записями и безопасностью:</strong> Обеспечивает управление пользователями, ролями и группами, а также реализует механизмы безопасности для защиты системы и данных от несанкционированного доступа.</p></li><li><p><strong>Интерфейс пользователя:</strong> Отвечает за взаимодействие пользователя с операционной системой через графический интерфейс, командную строку или другие интерфейсы. Обеспечивает пользовательский опыт и управление оконными приложениями.</p></li><li><p><strong>Системные библиотеки:</strong> Предоставляют набор функций и процедур, которые разработчики могут использовать при создании приложений. Включают функции для работы с файлами, сетью, памятью и другими компонентами системы.</p></li><li><p><strong>Драйверы устройств:</strong> Этот компонент предоставляет интерфейс для работы с оборудованием компьютера. Драйверы устройств переводят команды операционной системы в команды, которые могут понимать и обрабатывать устройства.</p></li><li><p><strong>Ядро операционной системы:</strong> Это основная часть операционной системы, которая предоставляет базовые службы и управляет работой всех компонентов. Ядро работает на самом низком уровне и имеет прямой доступ к аппаратным ресурсам компьютера.</p></li></ol><p>Обратите внимание, что у различных операционных систем могут быть свои особенности и дополнительные компоненты, но перечисленные выше являются основными функциональными компонентами.</p></div>"],["Создание процессов и потоков.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Создание процессов и потоков в операционных системах:</strong></p><p><strong>Процессы:</strong></p><ol><li><strong>Создание процесса:</strong> Процесс может быть создан с помощью системного вызова, который запрашивает операционную систему создать новый процесс. При создании процесса, операционная система выделяет ему собственное адресное пространство и другие ресурсы, такие как файловые дескрипторы и переменные окружения.</li><li><strong>Форк (fork()):</strong> В некоторых операционных системах, например, в UNIX-подобных системах, для создания нового процесса используется системный вызов fork(). Этот вызов создает точную копию текущего процесса, называемого дочерним процессом.</li><li><strong>Exec (exec()):</strong> После форка дочерний процесс может выполнить системный вызов exec(), чтобы заменить свой код на новую программу. Таким образом, процесс может переключиться на выполнение другой программы.</li></ol><p><strong>Потоки:</strong></p><ol><li><strong>Создание потоков:</strong> Потоки могут быть созданы в рамках процесса. Операционные системы обычно предоставляют API для создания потоков. Например, в Windows можно использовать функцию CreateThread(), а в POSIX-совместимых системах можно использовать функцию pthread_create().</li><li><strong>Многопоточность в одном процессе:</strong> В отличие от процессов, потоки разделяют адресное пространство процесса, что позволяет им обмениваться данными без необходимости использования механизмов межпроцессного взаимодействия.</li><li><strong>Системные потоки:</strong> Некоторые операционные системы могут создавать системные потоки для выполнения определенных задач, например, управления сетевыми запросами или вводом-выводом. Эти потоки не управляются пользователем и работают параллельно с пользовательскими потоками.</li></ol><p>Создание процессов и потоков позволяет операционной системе эффективно использовать ресурсы компьютера и обеспечивать параллельное выполнение задач, что является одной из ключевых функций операционных систем.</p></div>"],["Независимые и взаимодействующие вычислительные процессы и потоки.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Независимые и взаимодействующие вычислительные процессы и потоки:</strong></p><p><strong>Независимые процессы и потоки:</strong></p><ol><li><p><strong>Независимые процессы:</strong> Независимые процессы - это процессы, которые не зависят друг от друга и работают независимо. Каждый процесс имеет свои собственные ресурсы, включая адресное пространство, файловые дескрипторы и переменные окружения. Каждый процесс выполняет свою задачу, и его выполнение не зависит от других процессов в системе. Процессы обычно обмениваются данными и взаимодействуют через механизмы межпроцессного взаимодействия, такие как каналы, сигналы или сокеты.</p></li><li><p><strong>Независимые потоки:</strong> В многопоточной системе независимые потоки также выполняются независимо друг от друга и имеют собственные наборы регистров и стеков. Каждый поток выполняет свою функцию или задачу, и его выполнение не зависит от других потоков. Однако независимые потоки разделяют адресное пространство процесса, что позволяет им обмениваться данными без необходимости использования механизмов межпоточного взаимодействия.</p></li></ol><p><strong>Взаимодействующие процессы и потоки:</strong></p><ol><li><p><strong>Взаимодействующие процессы:</strong> Взаимодействующие процессы - это процессы, которые взаимодействуют друг с другом для выполнения совместных задач. Взаимодействие между процессами обычно осуществляется через механизмы межпроцессного взаимодействия (IPC), такие как сигналы, сокеты, каналы и разделяемая память.</p></li><li><p><strong>Взаимодействующие потоки:</strong> В многопоточной системе взаимодействующие потоки также могут взаимодействовать друг с другом для совместного выполнения задач. Потоки могут обмениваться данными и синхронизироваться с помощью механизмов межпоточного взаимодействия, таких как блокировки, семафоры, условные переменные и каналы.</p></li></ol><p><strong>Заключение:</strong>\\nНезависимые процессы и потоки выполняются независимо друг от друга, в то время как взаимодействующие процессы и потоки взаимодействуют друг с другом для совместного выполнения задач и обмена данными. Взаимодействие происходит через различные механизмы, предоставляемые операционной системой. Выбор между независимыми и взаимодействующими процессами и потоками зависит от требований конкретной задачи и особенностей системы.</p></div>"],["Семафарные примитивы Дейкстры. Использование семафоров при проектировании взаимодействующих вычислительных процессов и потоков. Мьютексы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Семафорные примитивы Дейкстры и использование семафоров:</strong></p><p><strong>1. Семафоры Дейкстры:</strong>\\nСемафоры Дейкстры – это механизм синхронизации, предложенный Эдсгером Дейкстрой, который используется для управления доступом к общим ресурсам в многопроцессорных и многопоточных системах. Семафор – это неотрицательное целое число, которое может быть увеличено или уменьшено только специальными операциями P (proberen - проверить) и V (vrijgeven - освободить).</p><ul><li><strong>P (Proberen):</strong> Операция уменьшения значения семафора на 1. Если значение становится отрицательным, поток или процесс, выполняющий операцию P, блокируется до тех пор, пока значение семафора не станет положительным.</li><li><strong>V (Vrijgeven):</strong> Операция увеличения значения семафора на 1. Если перед операцией V были заблокированные потоки или процессы, один из них будет разблокирован и получит доступ к общему ресурсу.</li></ul><p><strong>2. Использование семафоров при проектировании взаимодействующих вычислительных процессов и потоков:</strong>\\nСемафоры могут быть использованы для решения проблем синхронизации и взаимодействия между вычислительными процессами и потоками. Они позволяют синхронизировать доступ к общим ресурсам и предотвращать состояния гонки и другие проблемы, которые могут возникнуть при параллельном выполнении.</p><p>Примеры использования семафоров:</p><ul><li>Реализация критической секции, где только один процесс или поток может одновременно получить доступ к общему ресурсу.</li><li>Реализация ограничения на количество одновременно работающих потоков или процессов.</li><li>Синхронизация потоков для выполнения определенной последовательности операций.</li></ul><p><strong>3. Мьютексы:</strong>\\nМьютексы – это семафоры, которые используются для обеспечения взаимоисключения при доступе к общим ресурсам. Они обладают булевым значением и могут быть заблокированы или разблокированы только одним потоком или процессом за раз.</p><ul><li><strong>Lock (заблокировать):</strong> Если мьютекс заблокирован другим потоком или процессом, операция lock блокирует текущий поток и ждет, пока мьютекс не будет разблокирован.</li><li><strong>Unlock (разблокировать):</strong> Операция unlock разблокирует мьютекс, позволяя другим потокам или процессам получить доступ к общему ресурсу.</li></ul><p>Мьютексы обеспечивают более гибкий и удобный способ реализации взаимоисключения по сравнению с обычными семафорами.</p><p><strong>Заключение:</strong>\\nСемафоры Дейкстры и мьютексы являются мощными средствами для синхронизации взаимодействующих вычислительных процессов и потоков в многопроцессорных и многопоточных системах. Они позволяют управлять доступом к общим ресурсам, предотвращать состояния гонки и обеспечив</p></div>"]],"Защита информации":[["Организационные и правовые основы обеспечения защиты информации (ЗИ).","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Организационные и правовые основы обеспечения защиты информации (ЗИ):</strong></p><p><strong>Организационные основы ЗИ:</strong></p><ol><li><p><strong>Политика информационной безопасности:</strong> Организации должны разрабатывать и внедрять политику информационной безопасности, которая определяет общие принципы и цели обеспечения защиты информации. Политика должна быть принята руководством и представлять обязательные правила и рекомендации для сотрудников.</p></li><li><p><strong>Управление доступом:</strong> Ограничение доступа к информации только для авторизованных пользователей, применение принципа \\"необходимости знания\\" – каждый пользователь должен иметь доступ только к той информации, которая необходима для его работы.</p></li><li><p><strong>Обучение и осведомленность:</strong> Обучение сотрудников основам информационной безопасности, пропаганда осведомленности о рисках и правилах безопасного обращения с информацией.</p></li><li><p><strong>Аудит информационной безопасности:</strong> Регулярные проверки и аудит информационных систем для выявления уязвимостей и проверки соответствия политике безопасности.</p></li><li><p><strong>Управление рисками:</strong> Анализ рисков безопасности информации и принятие мер по их минимизации.</p></li><li><p><strong>Физическая защита:</strong> Обеспечение безопасности физических объектов, где хранится информация, например, серверных комнат и центров обработки данных.</p></li></ol><p><strong>Правовые основы ЗИ:</strong></p><ol><li><p><strong>Законы и нормативные акты:</strong> Существуют законы и нормативные акты, регулирующие вопросы защиты информации, такие как законы о защите персональных данных, об информации, составляющей государственную тайну и др.</p></li><li><p><strong>Стандарты и рекомендации:</strong> Организации могут руководствоваться стандартами и рекомендациями в области информационной безопасности, такими как ISO/IEC 27001.</p></li><li><p><strong>Конфиденциальность и соглашения о неразглашении:</strong> Заключение соглашений о неразглашении с сотрудниками и партнерами охраняет интересы организации и предотвращает утечку информации.</p></li><li><p><strong>Ответственность:</strong> Установление ответственности за нарушения информационной безопасности, возможные дисциплинарные и юридические меры.</p></li><li><p><strong>Сотрудничество с правоохранительными органами:</strong> Предоставление информации и сотрудничество с правоохранительными органами при выявлении и расследовании инцидентов информационной безопасности.</p></li></ol><p><strong>Заключение:</strong></p><p>Организационные и правовые основы обеспечения защиты информации играют ключевую роль в обеспечении безопасности информационных систем и данных. Совместное внедрение организационных мер и соблюдение правовых требований позволяют минимизировать риски утечки, повреждения или несанкционированного доступа к информации.</p></div>"],["Возможные угрозы безопасности для компьютерных систем (КС) и их специфика.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Возможные угрозы безопасности для компьютерных систем (КС) и их специфика:</strong></p><ol><li><p><strong>Вирусы и вредоносные программы:</strong> Это программы, разработанные для нанесения вреда компьютерной системе, их основная цель - заражение и разрушение данных, кража информации и прочие негативные действия.</p></li><li><p><strong>Межсетевые атаки:</strong> Злоумышленники могут попытаться получить несанкционированный доступ к сетевым ресурсам, использовать уязвимости в программном обеспечении или сетевых протоколах.</p></li><li><p><strong>Фишинг и социальная инженерия:</strong> Атаки, направленные на обман пользователя и получение его личной информации, таких как пароли или данные банковских карт.</p></li><li><p><strong>Отказ в обслуживании (DoS и DDoS):</strong> Целью таких атак является перегрузка ресурсов компьютерной системы или сети, чтобы временно или полностью прекратить её функционирование.</p></li><li><p><strong>Утечка данных:</strong> Несанкционированный доступ к конфиденциальной информации, включая персональные данные пользователей или бизнес-данные компании.</p></li><li><p><strong>Физические угрозы:</strong> Кража или уничтожение компьютеров и другого оборудования, что может привести к потере данных или нарушению работы системы.</p></li><li><p><strong>Использование слабых паролей:</strong> Ненадежные пароли могут стать лёгкой мишенью для взлома или несанкционированного доступа.</p></li><li><p><strong>Неактуальное программное обеспечение:</strong> Необновленное или неактуальное ПО может содержать известные уязвимости, которые могут быть использованы для взлома или вредоносных действий.</p></li><li><p><strong>Несанкционированный доступ:</strong> Посторонние лица, получающие доступ к компьютерной системе без разрешения, могут нанести ущерб или кражу данных.</p></li></ol><p><strong>Специфика угроз:</strong></p><ul><li>Компьютерные системы связаны с сетью, что позволяет злоумышленникам из других географических местоположений осуществлять атаки.</li><li>Возможность массовых атак (например, через ботнеты) может существенно повысить уровень опасности.</li><li>Быстрое распространение вредоносных программ через сети может привести к быстрому ущербу.</li><li>Современные угрозы становятся все более утонченными и изощренными, что требует непрерывного совершенствования методов защиты и контрмер.</li><li>С развитием технологий, появляются новые виды угроз, такие как угрозы для мобильных устройств и облачных вычислений.</li></ul><p><strong>Заключение:</strong></p><p>С увеличением зависимости от компьютерных систем и сетей угрозы безопасности становятся все более серьезными и разнообразными. Для защиты компьютерных систем и данных необходимо постоянно обновлять методы обнаружения и предотвращения атак, а также проводить обучение пользователей и сотрудников для повышения осведомленности о возможных угрозах и методах защиты.</p></div>"],["Обобщенная структура системы ЗИ в КС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p><strong>Обобщенная структура системы защиты информации (ЗИ) в компьютерных системах (КС)</strong> включает несколько основных компонентов и механизмов, которые совместно обеспечивают безопасность информации. Эти компоненты работают в совокупности, чтобы обнаруживать, предотвращать, анализировать и реагировать на угрозы безопасности. Обобщенная структура системы ЗИ в КС может быть представлена следующим образом:</p><ol><li><p><strong>Идентификация и аутентификация пользователей:</strong> Важный компонент безопасности, который позволяет проверять личность и права доступа пользователей к системе. Для этого используются пароли, биометрические данные, смарт-карты и другие методы аутентификации.</p></li><li><p><strong>Управление доступом:</strong> Этот компонент определяет права доступа пользователей и ограничивает их возможности в соответствии с уровнем разрешений. Реализуется через права доступа, ролевые модели и т.д.</p></li><li><p><strong>Шифрование:</strong> Защищает конфиденциальность данных путем их преобразования в зашифрованный формат, который может быть прочитан только с помощью ключа. Используются различные алгоритмы шифрования для защиты информации.</p></li><li><p><strong>Аудит и мониторинг:</strong> Этот компонент отслеживает действия пользователей и системы, регистрирует события, а также анализирует логи для обнаружения аномалий или подозрительных действий.</p></li><li><p><strong>Брандмауэры и контроль сетевого трафика:</strong> Брандмауэры предоставляют контроль доступа к сетевым ресурсам и фильтруют сетевой трафик для предотвращения несанкционированного доступа и атак извне.</p></li><li><p><strong>Антивирусные программы и анти-шпионы:</strong> Обнаруживают и предотвращают вредоносные программы, вирусы и вредоносные объекты, которые могут проникнуть в систему.</p></li><li><p><strong>Физическая безопасность:</strong> Осуществляется через ограниченный доступ к серверным помещениям, защиту компьютеров от кражи или несанкционированного доступа.</p></li><li><p><strong>Резервное копирование и восстановление:</strong> Обеспечивает сохранность данных путем регулярного создания резервных копий и возможность быстрого восстановления системы в случае сбоя или атаки.</p></li><li><p><strong>Обновление программного обеспечения:</strong> Регулярное обновление операционной системы и прикладных программ для устранения уязвимостей и ошибок, что повышает безопасность системы.</p></li><li><p><strong>Обучение пользователей:</strong> Важная часть системы защиты информации - обучение пользователей безопасным практикам, правилам обращения с информацией и опознаванию угроз безопасности.</p></li></ol><p>Обобщенная структура системы ЗИ может меняться в зависимости от типа компьютерных системы, её функций, размера организации и уровня требований к безопасности. Однако эти компоненты являются основными строительными блоками системы безопасности, направленной на защиту информации от угроз.</p></div>"],["Методы идентификации и аутентификации пользователей в КС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Методы идентификации и аутентификации пользователей в компьютерных системах (КС) представляют собой способы проверки личности и прав доступа пользователей к системе. Они служат для обеспечения безопасности и защиты информации от несанкционированного доступа. Вот некоторые из основных методов идентификации и аутентификации:</p><ol><li><p><strong>Пароль:</strong> Это один из самых распространенных методов аутентификации. Пользователь должен предоставить комбинацию символов (пароль), которая соответствует заранее заданной комбинации в системе.</p></li><li><p><strong>Биометрическая аутентификация:</strong> Этот метод использует уникальные биологические характеристики пользователей для идентификации, такие как отпечатки пальцев, сетчатка глаза, голос или лицо.</p></li><li><p><strong>Смарт-карты и токены:</strong> Смарт-карты и токены содержат уникальные идентификаторы и генерируют временные или одноразовые коды для аутентификации.</p></li><li><p><strong>Многофакторная аутентификация:</strong> Этот метод сочетает несколько различных способов аутентификации, например, пароль и биометрические данные, для повышения уровня безопасности.</p></li><li><p><strong>Сетевые ключи:</strong> Этот метод используется в сетевых системах для проверки подлинности клиентов или серверов.</p></li><li><p><strong>Публичные и приватные ключи (шифрование с открытым ключом):</strong> Этот метод используется для шифрования и проверки подписей данных и обмена ключами для симметричного шифрования.</p></li><li><p><strong>Одноразовые пароли:</strong> Пароли, которые действительны только один раз, обычно генерируются специальным образом и отправляются пользователю для каждого входа в систему.</p></li><li><p><strong>Капча:</strong> Защитная мера для проверки, что пользователь является человеком, а не автоматическим ботом.</p></li></ol><p>Каждый метод имеет свои преимущества и ограничения. Безопасность системы может быть повышена путем комбинирования нескольких методов аутентификации, таких как многофакторная аутентификация, чтобы создать более надежную систему защиты информации.</p></div>"],["Управление доступом в КС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Управление доступом в компьютерных системах (КС) является важной составляющей обеспечения безопасности и защиты информации. Этот процесс регулирует права доступа пользователей и программ к ресурсам и функциям системы. Основные механизмы управления доступом в КС включают:</p><ol><li><p><strong>Идентификация и аутентификация:</strong> Перед тем как предоставить доступ к системе, пользователи должны пройти процедуры идентификации (предоставить уникальный идентификатор) и аутентификации (подтвердить свою личность). Это позволяет системе определить, кто запрашивает доступ, и проверить его правомерность.</p></li><li><p><strong>Ролевая модель доступа:</strong> В ролевой модели доступа определяются различные роли, которые могут быть назначены пользователям. Каждая роль имеет свой набор прав доступа к определенным ресурсам или функциям системы. Администраторы могут назначать роли пользователям в соответствии с их обязанностями и нуждами.</p></li><li><p><strong>Уровни доступа:</strong> Системы могут определять уровни доступа, которые разделяются на разные категории с различными правами доступа. Например, это может быть уровень чтения, записи, выполнения, администрирования и т.д.</p></li><li><p><strong>Матрица доступа:</strong> Матрица доступа представляет собой таблицу, в которой перечислены субъекты (пользователи) и объекты (ресурсы) системы, а в ячейках указываются права доступа для каждой комбинации субъекта и объекта. Это позволяет наглядно представить права доступа в системе.</p></li><li><p><strong>Аудит доступа:</strong> Системы могут вести аудит доступа, чтобы фиксировать действия пользователей и программ, а также проверять соответствие их действий установленным правилам. Аудит позволяет выявить и предотвратить несанкционированный доступ и злоупотребления.</p></li><li><p><strong>Белые списки и черные списки:</strong> Белые списки определяют список допустимых программ, пользователей или ресурсов, которые имеют доступ к системе. Черные списки определяют список недопустимых элементов, которые запрещены в системе.</p></li><li><p><strong>Шифрование данных:</strong> Шифрование используется для защиты данных от несанкционированного доступа, даже если злоумышленник получит физический доступ к хранилищу данных.</p></li><li><p><strong>Права доступа к файлам и каталогам:</strong> Системы операционных файлов имеют механизмы управления доступом к файлам и каталогам, позволяющие ограничивать права чтения, записи и выполнения для каждого пользователя.</p></li></ol><p>Все эти механизмы управления доступом совместно способствуют обеспечению безопасности компьютерной системы и защите информации от несанкционированного доступа и использования.</p></div>"],["Протоколирование и аудит в КС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Протоколирование и аудит в компьютерных системах (КС) играют важную роль в обеспечении безопасности и защите информации. Эти процессы позволяют записывать и анализировать события, происходящие в системе, что помогает выявлять несанкционированные действия и злоупотребления, а также обеспечивает возможность восстановления системы в случае инцидентов.</p><p><strong>Протоколирование</strong> - это процесс записи событий, происходящих в компьютерной системе, в специальные файлы, называемые журналами событий или логами. В журналах фиксируются различные операции, такие как вход и выход пользователя, доступ к файлам, изменения конфигурации системы, ошибки и предупреждения, сетевые взаимодействия и т.д. Протоколирование помогает ведению аудита и обеспечивает историю действий в системе, что полезно для анализа произошедших событий.</p><p><strong>Аудит</strong> - это процесс анализа и интерпретации журналов событий с целью обнаружения несанкционированных действий, нарушений безопасности, аномалий или других проблем в системе. Аудит позволяет выявить потенциальные уязвимости и проблемы безопасности, а также помогает следить за соответствием системы установленным правилам и нормативам.</p><p>Основные задачи протоколирования и аудита в КС:</p><ol><li><p><strong>Обнаружение безопасности:</strong> Аудит журналов событий позволяет выявлять несанкционированный доступ, попытки взлома, злоумышленные действия и другие подозрительные события.</p></li><li><p><strong>Исследование инцидентов:</strong> При возникновении инцидентов, таких как нарушения безопасности или сбои, протоколирование позволяет проанализировать последовательность событий и выяснить причины и последствия инцидента.</p></li><li><p><strong>Анализ производительности:</strong> Протоколирование может использоваться для анализа производительности системы, выявления узких мест и оптимизации работы.</p></li><li><p><strong>Соответствие и нормативы:</strong> Журналы событий могут быть использованы для проверки соответствия системы установленным стандартам, правилам и нормативам безопасности.</p></li><li><p><strong>Восстановление после инцидентов:</strong> Протоколирование позволяет восстановить последовательность событий после инцидентов и определить, какие меры нужно предпринять для восстановления системы.</p></li><li><p><strong>Ответственность и юридические вопросы:</strong> Протоколирование служит важным доказательством в случае юридических разбирательств и споров.</p></li></ol><p>Протоколирование и аудит должны проводиться систематически и регулярно, чтобы обеспечить эффективную защиту информации и оперативную реакцию на возможные инциденты безопасности.</p></div>"],["Криптографические методы ЗИ в КС.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Криптографические методы защиты информации включают в себя различные алгоритмы и протоколы, используемые для обеспечения конфиденциальности, целостности и аутентичности данных. Криптография в контексте защиты информации включает следующие методы:</p><ol><li><p>Симметричное шифрование: Это метод, при котором один и тот же ключ используется для шифрования и дешифрования данных. Примеры симметричных алгоритмов включают AES (Advanced Encryption Standard) и DES (Data Encryption Standard).</p></li><li><p>Асимметричное шифрование: Также называемое публичным шифрованием, использует пару ключей - публичный и приватный. Публичный ключ используется для шифрования данных, и только соответствующий приватный ключ может расшифровать эти данные. RSA (Rivest-Shamir-Adleman) - один из наиболее распространенных асимметричных алгоритмов.</p></li><li><p>Хэширование: Этот метод используется для создания уникальной хэш-суммы из исходных данных. Хэш-сумма является фиксированной длиной и представляет собой уникальный \\"отпечаток\\" данных. MD5 и SHA (Secure Hash Algorithm) являются примерами хэш-функций.</p></li><li><p>Цифровые подписи: Они обеспечивают аутентификацию и целостность данных. Цифровая подпись создается с использованием приватного ключа и проверяется с помощью соответствующего публичного ключа. Электронная подпись - пример цифровой подписи.</p></li><li><p>Протоколы обмена ключами: Для обеспечения безопасного обмена симметричными ключами между сторонами используются протоколы, такие как Diffie-Hellman и ECDH (Elliptic Curve Diffie-Hellman).</p></li><li><p>Цифровые сертификаты: Они используются для связывания публичных ключей с сущностями, такими как организации или человек. Цифровые сертификаты помогают удостоверить подлинность публичного ключа и выступают важной ролью в аутентификации.</p></li><li><p>Электронные алгоритмы ЭЦП (Электронная Цифровая Подпись): Эти алгоритмы используются для создания и проверки электронных подписей, обеспечивая аутентичность и невозможность отказа от подписи.</p></li></ol><p>Это основные криптографические методы, которые применяются для защиты информации в компьютерных системах.</p></div>"],["Экранирование. Классификация межсетевых экранов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Экранирование (файрволлы) - это процесс обеспечения безопасности компьютерных сетей путем контроля и фильтрации трафика, проходящего между различными сетями. Файрволлы работают на уровне сетевого соединения, определяя, какие сетевые пакеты разрешено передавать, а какие следует блокировать, исходя из определенных правил и политик безопасности.</p><p>Классификация межсетевых экранов:</p><ol><li><p>По способу фильтрации трафика:</p><ul><li>Пакетный фильтр: Фильтрация осуществляется на основе информации, содержащейся в заголовках пакетов данных. Принимаются решения о передаче или блокировке пакета на основе IP-адресов и портов отправителя и получателя.</li><li>Состояний сессий (stateful firewall): Этот тип фаервола отслеживает состояние активных сетевых соединений и принимает решения о передаче пакета на основе его контекста (состояния).</li><li>Прокси-фильтр: Фильтрация осуществляется через прокси-серверы, которые анализируют всю информацию пакета, а не только его заголовки. Прокси-фильтры могут более тщательно контролировать данные, проходящие через них.</li></ul></li><li><p>По уровню сетевого соединения:</p><ul><li>Уровень сетевого соединения (сетевой фаервол): Работает на сетевом уровне модели OSI (например, на уровне IP-адресов).</li><li>Уровень транспортного соединения (транспортный фаервол): Фильтрация трафика происходит на уровне транспортных протоколов, таких как TCP или UDP.</li><li>Уровень приложения (прикладной фаервол): Анализирует содержимое пакетов на уровне приложений, что позволяет принимать решения на основе типа приложения или службы.</li></ul></li><li><p>По политике доступа:</p><ul><li>Фаервол с разрешающей политикой (allow-list): Запрещается все, что не разрешено явно в политиках.</li><li>Фаервол с запрещающей политикой (deny-list): Разрешается все, что не запрещено явно в политиках.</li></ul></li></ol><p>Комбинация различных типов экранирования и классификации позволяет создавать более надежные системы защиты информации, адаптированные к конкретным потребностям и уровню безопасности организации.</p></div>"]],"Проектирование человеко-машинного интерфейса":[["Информационное взаимодействие. Взаимодействие человека и машины.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Информационное взаимодействие в контексте проектирования человеко-машинного интерфейса описывает способы обмена информацией между человеком и машиной. Взаимодействие человека и машины играет ключевую роль в создании удобных и эффективных интерфейсов, которые позволяют пользователям взаимодействовать с компьютерной системой, управлять ею и получать от нее необходимую информацию.</p><p>Основные аспекты информационного взаимодействия и взаимодействия человека и машины включают:</p><ol><li><p>Ввод информации: Пользователь взаимодействует с системой, предоставляя ей информацию. Это может быть выполнено различными способами, такими как нажатие кнопок, ввод текста, использование жестов или голосовых команд.</p></li><li><p>Визуализация данных: Система отображает информацию пользователю, представляя данные в удобном и понятном виде. Это может включать графику, текст, диаграммы, анимации и другие элементы, которые помогают передать информацию.</p></li><li><p>Обратная связь: Система предоставляет обратную связь пользователю, позволяя узнать, что происходит в данный момент или результаты выполненных действий. Обратная связь может быть визуальной, звуковой или тактильной.</p></li><li><p>Интерактивность: Человек может влиять на ход процесса и взаимодействия с системой. Интерактивность обеспечивает возможность адаптировать работу системы под индивидуальные потребности и предпочтения пользователей.</p></li><li><p>Управление и контроль: Взаимодействие человека и машины включает способы управления системой и контроля ее действий. Это включает функциональные элементы, такие как кнопки, ползунки, переключатели и другие средства управления.</p></li><li><p>Понятность и простота: Человеко-машинный интерфейс должен быть понятным и простым в использовании, чтобы пользователь мог без труда осваивать систему и выполнять необходимые задачи.</p></li><li><p>Ошибки и обработка исключительных ситуаций: Взаимодействие должно предусматривать возможность обработки ошибок и исключительных ситуаций, чтобы пользователи получали информативные сообщения и инструкции при возникновении проблем.</p></li></ol><p>Успешное информационное взаимодействие и эффективное взаимодействие человека и машины являются важными аспектами проектирования человеко-машинного интерфейса, которые влияют на удовлетворенность пользователей и результативность работы с системой.</p></div>"],["Работа нервной системы. Характеристики и особенности анализаторов.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Работа нервной системы в контексте проектирования человеко-машинного интерфейса связана с пониманием характеристик и особенностей анализаторов - органов чувств, которые позволяют человеку получать информацию из внешнего мира.</p><p>Характеристики анализаторов:</p><ol><li><p>Модальность: Каждый анализатор специализируется на восприятии определенного вида информации из внешнего мира. Например, зрительный анализатор (зрение) воспринимает световые волны, а слуховой анализатор (слух) обрабатывает звуковые волны.</p></li><li><p>Рецепторы: Анализаторы содержат специализированные рецепторы, которые реагируют на определенные стимулы. Например, зрительные рецепторы (фоторецепторы) в глазу реагируют на свет, а рецепторы в коже отвечают за тактильные ощущения.</p></li><li><p>Пороги восприятия: Каждый анализатор имеет свой порог восприятия - минимальное значение стимула, которое человек может воспринять. Например, в зрении это яркость света, а в слухе - громкость звука.</p></li><li><p>Адаптация: Анализаторы могут адаптироваться к постоянным стимулам, что может привести к снижению чувствительности. Например, при длительном пребывании в тихой комнате увеличивается чувствительность слуха.</p></li><li><p>Пространственное и временное разрешение: Анализаторы имеют различную способность разрешать детали в пространстве и времени. Например, зрение имеет высокое пространственное разрешение, что позволяет различать мелкие детали, а слух обладает хорошим временным разрешением, что позволяет различать звуки с разными частотами.</p></li><li><p>Интеграция: Часто информация из различных анализаторов интегрируется в единое восприятие. Например, восприятие объекта может включать информацию, полученную из зрения, слуха и тактильных ощущений.</p></li></ol><p>При проектировании человеко-машинного интерфейса важно учитывать особенности работы анализаторов человека, чтобы создать удобный и эффективный интерфейс, который соответствует способностям человека воспринимать информацию. Например, использование ярких цветов и хорошее размещение элементов интерфейса может улучшить визуальное восприятие, а ясные и информативные звуковые сигналы могут улучшить восприятие через слуховой анализатор.</p></div>"],["Сущность, факторы, показатели и динамика работоспособности.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Сущность работоспособности в контексте проектирования человеко-машинного интерфейса относится к способности пользователя эффективно выполнять задачи и функции с использованием интерфейса. Работоспособность интерфейса зависит от соответствия его характеристик и возможностей особенностям человеческой психофизиологии и когнитивных возможностей.</p><p>Факторы, влияющие на работоспособность интерфейса:</p><ol><li><p>Удобство использования: Простота, интуитивность и понятность интерфейса позволяют пользователям легко осваивать и выполнять операции.</p></li><li><p>Эффективность: Количество и качество достигаемых результатов с использованием интерфейса. Быстрый и точный выполнения задач способствует повышению эффективности.</p></li><li><p>Надежность: Стабильность и отсутствие ошибок в работе интерфейса способствуют поддержанию работоспособности.</p></li><li><p>Гибкость: Возможность настройки интерфейса под потребности и предпочтения различных пользователей повышает его работоспособность.</p></li><li><p>Эстетика: Внешний вид и дизайн интерфейса могут повлиять на его привлекательность для пользователей.</p></li></ol><p>Показатели работоспособности:</p><ol><li><p>Время выполнения задач: Количество времени, необходимое для выполнения определенных задач с помощью интерфейса.</p></li><li><p>Количество ошибок: Число ошибок, допущенных пользователями при работе с интерфейсом.</p></li><li><p>Уровень удовлетворенности пользователей: Мера удовлетворенности пользователя отношением к интерфейсу и его функциональности.</p></li><li><p>Производительность: Количество задач, выполненных пользователем за определенный промежуток времени.</p></li></ol><p>Динамика работоспособности:</p><p>Динамика работоспособности связана с изменениями в уровне работоспособности интерфейса во времени. Она может быть измерена с помощью повторных тестирований пользователей после внесения изменений в интерфейс или сравнением работоспособности различных версий интерфейса. Регулярное обновление и улучшение интерфейса может способствовать повышению его работоспособности и соответствия изменяющимся потребностям пользователей.</p></div>"],["Характеристики человека-оператора.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Характеристики человека-оператора играют важную роль в проектировании человеко-машинного интерфейса, так как они определяют, каким образом пользователи будут взаимодействовать с системой и какую поддержку им необходимо предоставить. Некоторые из ключевых характеристик человека-оператора включают:</p><ol><li><p>Психофизиологические особенности: Каждый человек уникален и обладает своими психофизиологическими особенностями, такими как возраст, пол, физические возможности, зрение, слух и т.д. Проектирование интерфейса должно учитывать эти различия, чтобы обеспечить оптимальное взаимодействие для различных пользователей.</p></li><li><p>Опыт и обучаемость: Уровень опыта и знаний пользователей влияет на их способность осваивать и эффективно использовать интерфейс. Проектирование должно учитывать разные уровни опыта и предоставлять необходимое обучение новым пользователям.</p></li><li><p>Когнитивные возможности: Различные люди обладают разной когнитивной способностью, такой как способность к запоминанию, обработке информации и принятию решений. Интерфейс должен быть спроектирован так, чтобы минимизировать нагрузку на когнитивные возможности пользователей и упростить процесс взаимодействия.</p></li><li><p>Мотивация и интересы: Человек работает с системой, чтобы достичь определенных целей или выполнять задачи. Понимание мотивации и интересов пользователей помогает создать интерфейс, который будет стимулировать их к эффективной работе.</p></li><li><p>Работа в экстремальных условиях: Некоторые пользователи могут работать в условиях, которые отличаются от обычных, например, в условиях высокой нагрузки или стресса. Интерфейс должен быть спроектирован с учетом таких экстремальных условий.</p></li><li><p>Взаимодействие с другими пользователями: Взаимодействие между пользователями также может повлиять на проектирование интерфейса. Например, если пользователи работают в коллаборативной среде, интерфейс должен поддерживать совместную работу и коммуникацию.</p></li><li><p>Ошибки и усталость: Пользователи могут допускать ошибки или испытывать усталость в процессе работы с интерфейсом. Проектирование должно учитывать возможность минимизации ошибок и снижения усталости.</p></li></ol><p>Учет характеристик человека-оператора при проектировании человеко-машинного интерфейса помогает создать удобный, эффективный и приятный для использования интерфейс, способствующий повышению производительности и удовлетворенности пользователей.</p></div>"],["Инженерно-психологическая оценка способов кодирования визуальной информации.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Инженерно-психологическая оценка способов кодирования визуальной информации связана с анализом различных методов представления данных и графических элементов в интерфейсе с точки зрения их восприятия и воздействия на человека-пользователя. Это важный аспект проектирования человеко-машинного интерфейса, так как эффективное представление информации визуально может существенно повысить удобство и понятность интерфейса.</p><p>Оценка способов кодирования визуальной информации включает следующие аспекты:</p><ol><li><p>Визуальная восприимчивость: Исследование того, как пользователи воспринимают различные графические элементы и какую информацию они способны извлекать из представленных данных.</p></li><li><p>Зрительная память: Анализ того, насколько хорошо пользователи запоминают и узнают различные визуальные символы, исходя из их формы, цвета, размера и т.д.</p></li><li><p>Читаемость и различимость: Оценка того, насколько легко пользователи могут читать текст и различать различные элементы интерфейса, такие как иконки, кнопки, элементы меню и т.д.</p></li><li><p>Контрастность: Изучение оптимального сочетания цветов и контрастности для достижения максимальной читаемости и восприятия информации.</p></li><li><p>Иконографика: Оценка эффективности иконок и их семантической нагрузки, чтобы удостовериться, что они понятны и соответствуют ожиданиям пользователей.</p></li><li><p>Визуальная иерархия: Исследование, каким образом пользователи оценивают и обрабатывают информацию в зависимости от ее расположения, размера, цвета и других атрибутов.</p></li><li><p>Ориентация и навигация: Анализ того, какие визуальные подсказки и элементы управления помогают пользователям ориентироваться и перемещаться в интерфейсе.</p></li></ol><p>Инженерно-психологическая оценка способов кодирования визуальной информации позволяет создавать более удобные и эффективные интерфейсы, которые лучше соответствуют потребностям и способностям пользователей при взаимодействии с компьютерными системами.</p></div>"],["Пользовательский интерфейс.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Пользовательский интерфейс (ПИ) - это средство взаимодействия между человеком и компьютерной системой, которое позволяет пользователям взаимодействовать с программами, приложениями или устройствами. Пользовательский интерфейс играет ключевую роль в проектировании человеко-машинного интерфейса и определяет, как пользователи будут взаимодействовать с техническими системами и выполнять задачи.</p><p>Основные характеристики пользовательского интерфейса включают:</p><ol><li><p>Удобство использования: Пользовательский интерфейс должен быть простым, интуитивным и легко осваиваемым, чтобы даже неопытные пользователи могли комфортно выполнять задачи.</p></li><li><p>Эффективность: Интерфейс должен позволять пользователям выполнять задачи с минимальными усилиями и потерями времени.</p></li><li><p>Читаемость и понятность: Текст и графические элементы интерфейса должны быть легко читаемы и понятны, чтобы пользователи могли без труда интерпретировать предоставляемую информацию.</p></li><li><p>Консистентность: Единообразие и последовательность в представлении элементов интерфейса обеспечивают понятность и предсказуемость для пользователей.</p></li><li><p>Обратная связь: Пользователи должны получать информацию о результатах своих действий в интерфейсе, чтобы быть уверенными в выполнении команд и операций.</p></li><li><p>Гибкость: Интерфейс должен быть настраиваемым и способствовать адаптации к индивидуальным потребностям пользователей.</p></li><li><p>Визуальная привлекательность: Эстетика и дизайн интерфейса могут повысить его привлекательность и удовлетворенность пользователей.</p></li></ol><p>Пользовательский интерфейс может быть представлен в различных формах, таких как графический интерфейс пользователя (GUI), командная строка, голосовой интерфейс, сенсорные экраны и т.д. Каждый тип интерфейса имеет свои особенности и применение в зависимости от конкретной ситуации и задач пользователя. При проектировании пользовательского интерфейса важно учитывать потребности и характеристики пользователей, чтобы создать максимально удобный и эффективный интерфейс.</p></div>"],["Графический пользовательский интерфейс.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Графический пользовательский интерфейс (GUI) - это тип пользовательского интерфейса, который использует графические элементы, такие как иконки, кнопки, окна, меню, текстовые поля и т.д., для предоставления информации и возможностей взаимодействия пользователю. GUI позволяет пользователям взаимодействовать с компьютерной системой, используя мышь, клавиатуру или сенсорный экран, что делает его одним из самых распространенных и удобных типов интерфейса.</p><p>Характеристики графического пользовательского интерфейса:</p><ol><li><p>Иконки и изображения: Графический интерфейс использует иконки и изображения для представления команд, функций или объектов, что позволяет пользователям быстро узнавать и запоминать операции.</p></li><li><p>Окна и диалоговые окна: GUI предоставляет окна, которые содержат содержимое и функциональные элементы для выполнения задач, а также диалоговые окна, которые запрашивают информацию или уведомляют о событиях.</p></li><li><p>Меню: Интерфейс содержит меню, которые представляют доступные опции и команды, организованные в иерархическую структуру.</p></li><li><p>Кнопки и переключатели: Для выполнения операций и выбора опций предоставляются графические элементы в виде кнопок и переключателей.</p></li><li><p>Текстовые поля: GUI позволяет пользователям вводить текст или данные в текстовые поля для выполнения определенных операций или поиска информации.</p></li><li><p>Мышь и клавиатура: Графический интерфейс поддерживает использование мыши для выбора элементов и взаимодействия с интерфейсом, а также клавиатуры для ввода текста и управления.</p></li></ol><p>Преимущества графического пользовательского интерфейса:</p><ul><li><p>Интуитивность: GUI обычно более интуитивен и легко понимаем для новых пользователей.</p></li><li><p>Визуализация: Использование графических элементов позволяет визуализировать информацию и операции.</p></li><li><p>Удобство: Графический интерфейс предоставляет простые и понятные средства взаимодействия.</p></li><li><p>Многозадачность: GUI позволяет пользователям работать с несколькими окнами и приложениями одновременно.</p></li><li><p>Адаптивность: GUI может быть настроен под различные потребности и предпочтения пользователей.</p></li></ul><p>Графические пользовательские интерфейсы широко используются в современных операционных системах и приложениях благодаря своей удобности, эффективности и дружественности к пользователям.</p></div>"]],"Управление программными проектами":[["Основные понятия программного проекта","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные понятия программного проекта:</p><ol><li><p>Программный проект: Это временное предприятие, предназначенное для создания уникального продукта, услуги или результата в виде программного обеспечения. Программные проекты часто характеризуются уникальностью, определенной продолжительностью и ограниченными ресурсами.</p></li><li><p>Заказчик: Заказчик (клиент) – это лицо или организация, которая заказывает и финансирует разработку программного продукта или услуги.</p></li><li><p>Заказ: Заказ - это формализованный запрос от заказчика на разработку программного продукта или предоставление определенной услуги.</p></li><li><p>Программная система: Программная система – это комплекс программных компонентов, включая программное обеспечение, данные и документацию, которые вместе решают определенные задачи и обеспечивают функционирование программного продукта.</p></li><li><p>Программное обеспечение: Программное обеспечение - это набор программ, инструкций и данных, которые используются для работы компьютерной системы или решения конкретных задач.</p></li><li><p>Жизненный цикл проекта: Жизненный цикл проекта - это последовательность фаз и этапов проекта, начиная от его инициации и заканчивая завершением и передачей результатов заказчику.</p></li><li><p>Планирование проекта: Это процесс определения целей, задач, ресурсов, сроков и последовательности действий для достижения успеха проекта.</p></li><li><p>Риски проекта: Риски проекта – это возможные события или обстоятельства, которые могут повлиять на результаты проекта, как положительно, так и отрицательно.</p></li><li><p>Майлстоны: Майлстоны - это важные этапы или события в жизненном цикле проекта, которые служат ориентирами для измерения прогресса и успеха.</p></li><li><p>Команда проекта: Команда проекта – это группа людей, работающих над реализацией программного проекта и воплощающих его цели и задачи.</p></li><li><p>Управление изменениями: Управление изменениями - это процесс контроля и управления изменениями в проекте для минимизации негативного влияния на его успех.</p></li></ol><p>Эти основные понятия играют важную роль в управлении программными проектами и предоставляют общий каркас для понимания и организации работы над проектами.</p></div>"],["Модели жизненного цикла программного проекта","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Модели жизненного цикла программного проекта представляют собой различные подходы и методологии, определяющие этапы и последовательность действий для разработки и управления программным проектом от его инициации до завершения. Каждая модель имеет свои особенности и применяется в зависимости от характера проекта и его требований. Ниже перечислены некоторые из популярных моделей жизненного цикла программного проекта:</p><ol><li><p>Модель Waterfall (Водопадная модель): Это классическая линейная модель, где разработка происходит последовательно от одной фазы к другой - от определения требований до развертывания и сопровождения. Каждая фаза завершается перед переходом к следующей.</p></li><li><p>Модель Spiral (Спиральная модель): Это итеративная модель, которая сочетает элементы водопадной модели и прототипирования. Проект разбивается на циклы, называемые спиралями, каждый из которых включает в себя планирование, риски, разработку и оценку.</p></li><li><p>Модель Incremental (Инкрементальная модель): Это модель, основанная на последовательном выпуске функциональных блоков (инкрементов) продукта на каждой итерации. Каждый инкремент добавляет новые функции или улучшает существующие.</p></li><li><p>Модель Agile (Гибкая модель): Это набор подходов и методологий, которые поддерживают гибкий, итеративный подход к разработке. Проект разбивается на короткие спринты, и разработчики и заказчики тесно сотрудничают на протяжении всего процесса.</p></li><li><p>Модель V-образная (V-модель): Это расширение модели Waterfall, где каждый этап разработки имеет соответствующий этап тестирования. Это помогает своевременно проверять соответствие требованиям и устранять ошибки.</p></li><li><p>Модель RAD (Rapid Application Development - Быстрая разработка приложений): Это модель, которая сосредотачивается на быстрой разработке прототипов и вовлечении заказчика на ранних этапах для уточнения требований.</p></li><li><p>Модель Spiral DSDM (Dynamic Systems Development Method): Это методология, объединяющая принципы Agile и спиральной модели, и уделяющая особое внимание вовлечению пользователя и достижению бизнес-целей.</p></li></ol><p>Каждая модель имеет свои преимущества и ограничения, и выбор конкретной модели зависит от характеристик проекта, степени его сложности, требований заказчика и предпочтений команды разработчиков.</p></div>"],["Инициация программного проекта","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Инициация программного проекта - это первый этап жизненного цикла проекта, на котором осуществляется официальное запуск проекта и определяются его цели, основные параметры и ограничения. В этой фазе происходит подготовка к разработке, планированию и управлению проектом. Ниже перечислены основные шаги и активности, которые выполняются в процессе инициации программного проекта:</p><ol><li><p>Определение бизнес-потребности: Анализируется бизнес-среда и выявляются потребности и проблемы, которые могут быть решены с помощью программного проекта. Определяются бизнес-цели и выгода от успешной реализации проекта.</p></li><li><p>Составление предварительного плана проекта: Разрабатывается предварительный план проекта, который содержит общий обзор проекта, его сроки, бюджет и основные этапы. Это позволяет оценить основные параметры проекта и его целесообразность.</p></li><li><p>Определение интересующих сторон: Выявляются заинтересованные стороны (стейкхолдеры) проекта, такие как заказчики, пользователи, исполнители, аналитики, руководство, чтобы понять их потребности и ожидания от проекта.</p></li><li><p>Проведение предварительной оценки рисков: Идентифицируются потенциальные риски и препятствия, которые могут повлиять на успешность проекта. Это позволяет разработать стратегии управления рисками.</p></li><li><p>Проведение исследования и изучение альтернатив: Исследуются возможные альтернативы для реализации проекта, а также технические и технологические подходы. Проводятся исследования, анализируются опыт других проектов и рассматриваются различные варианты.</p></li><li><p>Определение предварительного бюджета: Оценивается предварительный бюджет, необходимый для реализации проекта. Это помогает определить финансовую сторону проекта и его экономическую целесообразность.</p></li><li><p>Разработка деловой документации: Создаются необходимые документы, такие как предварительное исследование, бизнес-план, инициирующий документ, для поддержки и одобрения проекта руководством и заинтересованными сторонами.</p></li><li><p>Одобрение и старт проекта: После завершения инициации, проект подвергается оценке и утверждению руководством. Если проект одобрен, он официально стартует и переходит к следующей фазе разработки и планирования.</p></li></ol><p>Инициация программного проекта позволяет убедиться в его жизнеспособности, установить цели и ограничения, а также определить основные пути и риски, что обеспечивает успешное начало и управление проектом.</p></div>"],["Планирование программного проекта","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Планирование программного проекта - это этап в управлении проектами, на котором определяются конкретные шаги, ресурсы, сроки и задачи, необходимые для успешной реализации проекта. План проекта служит основным документом, который определяет всю работу, которая должна быть выполнена, и устанавливает базу для контроля и управления проектом. Ниже перечислены основные шаги и активности, выполняемые в процессе планирования программного проекта:</p><ol><li><p>Определение целей и требований: На этом этапе уточняются цели проекта и его требования, выявляются ожидания заказчика и заинтересованных сторон, а также устанавливаются критерии успеха.</p></li><li><p>Разработка структуры проекта: Определяются основные компоненты проекта и их взаимосвязи, составляется рабочая структура проекта (WBS), которая разбивает проект на более мелкие и управляемые части.</p></li><li><p>Определение задач и ресурсов: Каждому элементу WBS присваиваются конкретные задачи, определяются ресурсы, необходимые для их выполнения, а также оценивается затрачиваемое время.</p></li><li><p>Определение зависимостей и графика проекта: Определяются логические зависимости между задачами, чтобы установить последовательность и связи между ними. Составляется график выполнения проекта (план-график).</p></li><li><p>Распределение ресурсов: Выполняется распределение ресурсов, таких как люди, оборудование, бюджет, материалы и другие, между различными задачами и этапами проекта.</p></li><li><p>Оценка рисков: Идентифицируются возможные риски проекта, анализируется их воздействие на проект и разрабатываются стратегии управления рисками.</p></li><li><p>Подготовка бюджета: Разрабатывается детализированный бюджет проекта, который включает расходы на ресурсы, затраты на оборудование, материалы, обучение и другие расходы.</p></li><li><p>Составление команды проекта: Формируется команда проекта, назначаются ответственные за различные задачи, и определяется их роли и обязанности.</p></li><li><p>Утверждение плана: Готовый план проекта представляется для утверждения заказчика и руководства, и после одобрения становится основой для реализации проекта.</p></li></ol><p>Планирование программного проекта позволяет предвидеть и организовать все необходимые этапы и ресурсы, что обеспечивает более эффективное управление, предсказуемость и контроль в ходе его выполнения.</p></div>"],["Управление рисками программного проекта","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Управление рисками программного проекта - это процесс и методология, которые позволяют выявлять, анализировать, оценивать и управлять потенциальными рисками, которые могут повлиять на успешность проекта. Риски могут быть связаны с техническими, организационными, финансовыми, временными или другими аспектами проекта. Ниже перечислены основные шаги и подходы, применяемые в управлении рисками программного проекта:</p><ol><li><p>Идентификация рисков: На этом этапе происходит выявление всех возможных рисков, которые могут повлиять на проект. Это включает проведение сессий брейншторминга, анализ опыта предыдущих проектов, консультации со специалистами и т.д.</p></li><li><p>Анализ рисков: Каждый выявленный риск анализируется на предмет его потенциального воздействия на проект. Определяется вероятность возникновения риска и его возможные последствия.</p></li><li><p>Оценка рисков: Производится количественная или качественная оценка рисков с учетом их важности и приоритетности для проекта. Это позволяет определить наиболее критические риски, требующие особого внимания.</p></li><li><p>Планирование реагирования на риски: Для каждого выявленного риска разрабатываются стратегии управления. Это включает определение предупредительных мер, планов реагирования в случае возникновения риска и идентификацию ответственных лиц.</p></li><li><p>Мониторинг и контроль рисков: В ходе выполнения проекта риски должны постоянно мониториться. При возникновении риска или изменении его вероятности/воздействия, применяются заранее спланированные меры реагирования.</p></li><li><p>Риск-менеджмент в команде проекта: Каждый участник команды должен быть осведомлен о выявленных рисках и понимать свою роль в минимизации их воздействия на проект.</p></li><li><p>Своевременное информирование заказчика: Руководство и заказчик должны быть осведомлены о выявленных рисках и предпринимаемых мерах управления. Это обеспечивает прозрачность процесса и согласование мероприятий по минимизации рисков.</p></li><li><p>Заключение рисков после завершения проекта: После завершения проекта производится анализ и заключение по управлению рисками, что позволяет выделить успешные подходы и опыт для будущих проектов.</p></li></ol><p>Управление рисками является важной частью процесса управления программными проектами, так как позволяет предотвращать или минимизировать возможные проблемы и неудачи, обеспечивая более успешную реализацию проекта.</p></div>"],["Ключевые участники и заинтересованные стороны","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Ключевые участники и заинтересованные стороны (стейкхолдеры) в программном проекте - это лица или группы, которые имеют интерес в проекте, его результате или его выполнении. Успешное управление и удовлетворение потребностей стейкхолдеров играют важную роль в достижении целей проекта. Ниже перечислены некоторые из ключевых участников и заинтересованных сторон в программных проектах:</p><ol><li><p>Заказчик (клиент): Это лицо или организация, которая инициировала и финансирует программный проект. Заказчик имеет основной интерес в успешной реализации проекта, соответствии его результатов ожиданиям и получении созданного продукта или услуги.</p></li><li><p>Пользователи: Пользователи - это те, кто будет использовать программный продукт или получать услуги от проекта. Их потребности и удовлетворенность являются ключевыми факторами успеха проекта.</p></li><li><p>Руководство компании: Руководство компании, к которой относится проект, также является заинтересованной стороной. Их интересы могут быть связаны с финансовой успешностью проекта, его влиянием на организацию и выполнением стратегических целей.</p></li><li><p>Команда проекта: Члены команды, работающие над реализацией проекта, также являются ключевыми участниками. Их роли и усилия направлены на достижение целей проекта и его успешное выполнение.</p></li><li><p>Функциональные менеджеры: Функциональные менеджеры предоставляют ресурсы для проекта и имеют интерес в его успехе, а также влиянии на их собственные функциональные области.</p></li><li><p>Поставщики и партнеры: Поставщики и партнеры, которые предоставляют продукты, услуги или ресурсы для проекта, также являются заинтересованными сторонами, у которых есть свои интересы и ожидания от проекта.</p></li><li><p>Государственные и регулирующие органы: Если проект связан с государственными или регулирующими органами, они могут быть заинтересованы в соответствии проекта законодательству и нормативным требованиям.</p></li><li><p>Общество и общественность: В некоторых проектах общественное мнение и интересы могут иметь значение. Это особенно касается проектов, которые могут повлиять на окружающую среду, здоровье и безопасность людей.</p></li></ol><p>Управление интересами и ожиданиями стейкхолдеров является важной задачей для успешного управления программным проектом. Учитывание их потребностей и вовлечение их в процесс принятия решений помогает достичь согласованных результатов и удовлетворения всех заинтересованных сторон.</p></div>"],["Мониторинг и контроль","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Мониторинг и контроль в управлении программными проектами - это процессы и методы, которые позволяют отслеживать выполнение проекта, анализировать его прогресс, выявлять отклонения от плана и принимать корректирующие меры для достижения поставленных целей. Эти процессы осуществляются на протяжении всего жизненного цикла проекта. Ниже перечислены основные шаги и активности, которые выполняются в процессе мониторинга и контроля программного проекта:</p><ol><li><p>Установление метрик и показателей проекта: Определяются ключевые показатели производительности (KPI) и метрики, которые будут использоваться для измерения прогресса и достижения целей проекта.</p></li><li><p>Составление плана мониторинга: Разрабатывается план мониторинга, который определяет, кто и как будет отслеживать и анализировать данные проекта, а также какие инструменты и методы будут использоваться.</p></li><li><p>Сбор данных: Команда проекта собирает данные о выполнении задач, затратах ресурсов, прогрессе работ, рисках и других важных аспектах проекта.</p></li><li><p>Анализ данных: Собранные данные анализируются для определения степени соответствия выполнения проекта его плану, выявления отклонений и идентификации проблемных областей.</p></li><li><p>Выявление рисков и проблем: В процессе мониторинга выявляются новые риски и проблемы, которые могут повлиять на успех проекта.</p></li><li><p>Принятие корректирующих мер: Если выявляются отклонения от плана или проблемы, команда проекта принимает корректирующие меры, чтобы устранить проблемы и вернуть проект на правильный путь.</p></li><li><p>Отчетность: Регулярно составляются отчеты о прогрессе проекта, которые предоставляются руководству и заинтересованным сторонам. Отчеты могут быть формальными или информационными.</p></li><li><p>Вовлечение заинтересованных сторон: Заинтересованные стороны регулярно информируются о прогрессе проекта, и их обратная связь учитывается в принятии решений и планировании дальнейших действий.</p></li><li><p>Регулярные обзоры и аудиты: Производятся регулярные обзоры проекта и аудиты для оценки эффективности мониторинга и контроля и выявления областей для улучшения.</p></li></ol><p>Мониторинг и контроль играют ключевую роль в успешном управлении программными проектами, позволяя своевременно выявлять проблемы, риски и отклонения, а также предпринимать меры для достижения целей и успешной реализации проекта.</p></div>"],["Принципы количественного управления","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Принципы количественного управления в программных проектах представляют собой подходы и методологии, которые базируются на анализе данных и использовании количественных показателей для принятия решений и управления проектами. Это позволяет более объективно оценивать проект и его состояние, а также прогнозировать результаты. Ниже перечислены некоторые из принципов количественного управления в программных проектах:</p><ol><li><p>Использование метрик и KPI: Определение ключевых показателей производительности (KPI) и метрик, которые позволяют измерить прогресс, качество и успех проекта.</p></li><li><p>Данные основанные решения: Принятие решений на основе анализа данных и фактов, а не на основе субъективных мнений или предположений.</p></li><li><p>Оценка рисков и прогнозирование: Применение статистических методов для оценки рисков и прогнозирования результатов проекта.</p></li><li><p>Циклический подход: Применение итеративных методологий и циклического подхода к управлению, позволяющего постоянно улучшать процессы и результаты.</p></li><li><p>Контроль качества: Использование статистического контроля качества для отслеживания соответствия проекта установленным стандартам и требованиям.</p></li><li><p>Сравнение с базой данных и стандартами: Сравнение производительности проекта с предыдущими проектами, базами данных и установленными стандартами, чтобы выявить области для улучшения.</p></li><li><p>Оценка производительности команды: Использование данных о производительности команды для определения ее эффективности и выявления возможностей для повышения производительности.</p></li><li><p>Процесс улучшения: Постоянное улучшение процессов управления на основе анализа данных и обратной связи.</p></li><li><p>Фактам и доказательствам основанные отчеты: Составление отчетов на основе фактов и доказательств, а также прозрачная коммуникация результатов проекта и планируемых мер.</p></li></ol><p>Принципы количественного управления позволяют увеличить эффективность управления программными проектами, повысить прозрачность и точность принимаемых решений, а также достичь лучших результатов. Они основываются на применении математических и статистических методов и помогают более обоснованно и объективно управлять проектами.</p></div>"],["Проект и организационная структура компании","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Проект и организационная структура компании тесно связаны, и эффективное управление программными проектами требует согласования между этими двумя аспектами. Ниже перечислены основные аспекты, связанные с взаимодействием проекта и организационной структуры компании:</p><ol><li><p>Организационная структура: Организационная структура компании определяет иерархию, деловые отношения и роли сотрудников. В зависимости от типа организационной структуры (функциональной, матричной, проектной и т.д.), роль проекта и его влияние на организацию может различаться.</p></li><li><p>Проектное управление: Успешное выполнение программных проектов требует проектного управления. Это может включать формирование специальной проектной команды, назначение проектного менеджера и установление проектной организационной структуры.</p></li><li><p>Матричная структура: Матричная организационная структура сочетает элементы функциональной и проектной структур. Проектные команды могут состоять из сотрудников разных функциональных подразделений, и управление ресурсами происходит совместно функциональными и проектными менеджерами.</p></li><li><p>Ресурсы и приоритеты: Проектам часто требуется доступ к ресурсам компании, таким как сотрудники, бюджет, оборудование и другие. Организационная структура должна обеспечивать проектам достаточные ресурсы и приоритеты для успешной реализации.</p></li><li><p>Вовлечение руководства: Важным аспектом является вовлечение руководства компании в управление программными проектами. Руководство должно поддерживать проектные инициативы, принимать решения и обеспечивать стратегическую поддержку.</p></li><li><p>Культура организации: Культура организации, ее ценности и подход к управлению проектами также могут повлиять на успех программных проектов. Компания должна обладать гибкой, инновационной и проектно ориентированной культурой для поддержки проектов.</p></li><li><p>Коммуникация и синхронизация: Важно обеспечивать открытую коммуникацию между проектами и организацией. Взаимодействие между проектами и функциональными подразделениями должно быть хорошо синхронизировано для избежания конфликтов и проблем.</p></li><li><p>Управление изменениями: Программные проекты могут вносить изменения в организацию, и организационная структура должна быть готова к адаптации и управлению изменениями.</p></li></ol><p>Успешное управление программными проектами требует гармоничного взаимодействия проекта с организационной структурой компании. Это позволяет максимально использовать ресурсы и оптимизировать работу проектных команд для достижения поставленных целей и обеспечения успеха проектов.</p></div>"],["Управление приоритетами проектов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Управление приоритетами проектов - это процесс определения, оценки и установления приоритетов для различных проектов компании или организации. Поскольку ограниченные ресурсы (бюджет, время, персонал и т.д.) могут быть распределены между несколькими проектами, управление приоритетами позволяет оптимизировать ресурсы и сосредотачиваться на проектах с наибольшей стратегической и бизнес-ценностью. Ниже перечислены основные аспекты управления приоритетами проектов:</p><ol><li><p>Стратегическое выравнивание: Проекты должны быть выровнены с общей стратегией компании или организации. Отбираются проекты, которые наилучшим образом поддерживают стратегические цели и ценности компании.</p></li><li><p>Бизнес-ценность: Каждый проект должен быть оценен с точки зрения его бизнес-ценности и вклада в достижение бизнес-целей. Проекты, которые предоставляют наибольшую ценность и имеют наибольший потенциал возврата, получают более высокий приоритет.</p></li><li><p>Риски и сложность: Оцениваются риски и сложность каждого проекта. Проекты с более низкими рисками или более низкой сложностью могут получить приоритет над проектами с более высокими рисками или сложностью.</p></li><li><p>Доступные ресурсы: Анализируется доступность ресурсов (финансы, персонал, оборудование) для каждого проекта. Проекты, для которых есть достаточные ресурсы, получают более высокий приоритет.</p></li><li><p>Временные рамки: Анализируются сроки выполнения проектов. Проекты, которые должны быть завершены в кратчайшие сроки или имеют важные сроки, могут получить приоритет перед проектами с более гибкими сроками.</p></li><li><p>Отношения с клиентами и заинтересованными сторонами: Взаимодействие с клиентами и заинтересованными сторонами учитывается при определении приоритетов проектов. Проекты, которые имеют стратегическое значение для клиентов, могут получить более высокий приоритет.</p></li><li><p>Постоянное обновление приоритетов: Приоритеты проектов могут меняться в зависимости от изменяющихся условий и потребностей компании. Поэтому управление приоритетами должно быть гибким и регулярно обновляться.</p></li><li><p>Принятие решений на основе данных: Решения о приоритетах проектов должны быть основаны на анализе данных, фактах и целевых показателях, а не на субъективных мнениях или предположениях.</p></li></ol><p>Управление приоритетами проектов помогает компании максимизировать свою эффективность и достигать своих стратегических целей, сосредотачиваясь на наиболее важных и ценных проектах и оптимизируя распределение ресурсов.</p></div>"],["Мотивация","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Мотивация в управлении программными проектами - это процесс стимулирования и поддержания интереса, усилий и преданности участников проекта, чтобы они работали на достижение целей проекта с максимальной эффективностью. Мотивация играет важную роль в обеспечении высокой производительности и успешного выполнения проектов. Ниже перечислены основные аспекты мотивации в управлении программными проектами:</p><ol><li><p>Четкие цели и связь с миссией компании: Участники проекта должны четко понимать цели проекта и его вклад в достижение общих стратегических целей компании. Это помогает создать чувство значимости и целенаправленности работы.</p></li><li><p>Признание и вознаграждение: Признание и награды за хорошую работу могут стимулировать участников проекта и повысить их мотивацию. Это может быть как финансовое вознаграждение, так и нематериальные формы признания, такие как похвалы или возможность продвижения.</p></li><li><p>Развитие карьеры и профессиональное развитие: Предоставление возможностей для развития карьеры и повышения профессиональных навыков может стимулировать участников проекта и дать им ощущение роста и прогресса.</p></li><li><p>Участие в принятии решений: Вовлечение участников проекта в принятие решений и предоставление возможности для высказывания своих идей и мнений может усилить их чувство принадлежности и ответственности за проект.</p></li><li><p>Четкое планирование и ресурсное обеспечение: Четкое планирование и обеспечение необходимыми ресурсами проекта создают условия для успешной работы и уменьшают чувство неопределенности, что положительно сказывается на мотивации.</p></li><li><p>Создание положительной рабочей атмосферы: Создание приятной и поддерживающей атмосферы в команде проекта, где сотрудники чувствуют себя уважаемыми и поддержанными, способствует повышению мотивации и эффективности.</p></li><li><p>Поддержка лидерства и команды проекта: Лидеры проекта должны быть вдохновляющими, поддерживающими и обеспечивающими команду необходимой помощью и ресурсами для успешного выполнения проекта.</p></li><li><p>Обратная связь и возможности для улучшения: Предоставление обратной связи участникам проекта помогает им оценить свою работу и узнать, что можно улучшить, что стимулирует стремление к самосовершенствованию.</p></li></ol><p>Мотивация является ключевым элементом управления программными проектами, поскольку она влияет на уровень энергии, участия и преданности участников проекта, что способствует успешной реализации проекта и достижению его целей.</p></div>"],["Жизненный цикл проекта. Фазы и продукты","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Жизненный цикл проекта - это последовательность этапов или фаз, через которые проходит проект, начиная с его создания и заканчивая завершением и передачей результатов. Каждая фаза имеет определенные цели, задачи и продукты, которые должны быть достигнуты. Ниже перечислены основные фазы и типичные продукты, которые могут присутствовать на каждом этапе жизненного цикла программного проекта:</p><ol><li><p>Инициация (Initiation):</p><ul><li>Цели и задачи проекта</li><li>Бизнес-кейс (обоснование проекта)</li><li>Анализ заинтересованных сторон</li><li>Определение предварительного бюджета и сроков</li><li>Формирование команды проекта</li><li>Согласование проекта с руководством и заинтересованными сторонами</li></ul></li><li><p>Планирование (Planning):</p><ul><li>Подробное определение задач и работ проекта</li><li>Разработка графика проекта (гантограмма)</li><li>Определение требований к ресурсам и бюджету</li><li>Определение рисков и разработка стратегий управления рисками</li><li>Создание плана коммуникации</li><li>Разработка плана качества и контроля</li></ul></li><li><p>Выполнение (Execution):</p><ul><li>Разработка и тестирование продукта или результата проекта</li><li>Управление ресурсами и командой проекта</li><li>Контроль выполнения работ и сроков</li><li>Решение проблем и рисков</li><li>Контроль качества</li></ul></li><li><p>Мониторинг и контроль (Monitoring and Control):</p><ul><li>Оценка выполнения проекта по плану</li><li>Анализ прогресса и выявление отклонений</li><li>Корректировка плана при необходимости</li><li>Управление рисками</li><li>Обновление и отчетность о прогрессе проекта</li></ul></li><li><p>Завершение (Closure):</p><ul><li>Передача результатов проекта заказчику или пользователю</li><li>Оценка успешности проекта</li><li>Анализ уроков, извлеченных из проекта</li><li>Завершение работы команды проекта</li><li>Закрытие документации и отчетов</li></ul></li></ol><p>Жизненный цикл проекта может различаться в зависимости от типа и характера проекта, а также применяемой методологии управления (например, водопадная, инкрементальная, спиральная и др.). Каждая из этих фаз имеет свои уникальные характеристики и цели, и они обеспечивают структурированный и контролируемый подход к выполнению программного проекта.</p></div>"],["Главные риски программных проектов и способы реагирования","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Главные риски программных проектов могут быть разнообразными и зависят от многих факторов, таких как размер и сложность проекта, опытность команды, доступность ресурсов и технологий, изменения требований и другие внешние факторы. Однако ниже перечислены некоторые типичные риски программных проектов и способы реагирования на них:</p><ol><li><p>Неправильное определение требований:</p><ul><li>Способ реагирования: Проактивный анализ и согласование требований с заинтересованными сторонами. Применение методологий с принципами изменения требований (например, гибкие методологии разработки).</li></ul></li><li><p>Ошибки в оценках и планировании:</p><ul><li>Способ реагирования: Реалистичная оценка времени и ресурсов на каждый этап проекта. Использование опытных оценщиков и исторических данных.</li></ul></li><li><p>Недостаточные ресурсы:</p><ul><li>Способ реагирования: Предварительное выделение достаточных ресурсов. Мониторинг доступности ресурсов и их рациональное использование.</li></ul></li><li><p>Технические риски:</p><ul><li>Способ реагирования: Раннее выявление технических сложностей. Применение технических аудитов и профессионального тестирования.</li></ul></li><li><p>Неудачная коммуникация:</p><ul><li>Способ реагирования: Разработка плана коммуникации и своевременное информирование всех заинтересованных сторон. Постоянное обновление коммуникационных каналов.</li></ul></li><li><p>Конфликты в команде:</p><ul><li>Способ реагирования: Проактивное разрешение конфликтов и построение положительной рабочей атмосферы. Поддержка развития команды.</li></ul></li><li><p>Зависимость от внешних поставщиков:</p><ul><li>Способ реагирования: Анализ и диверсификация рисков, связанных с внешними поставщиками. Заключение контрактов с определенными гарантиями.</li></ul></li><li><p>Изменение требований или приоритетов:</p><ul><li>Способ реагирования: Гибкая адаптация проектного плана. Регулярное взаимодействие с заказчиком и принятие обоснованных решений.</li></ul></li><li><p>Недостаточное управление рисками:</p><ul><li>Способ реагирования: Раннее выявление и оценка рисков проекта. Разработка стратегий управления рисками и контроль выполнения этих стратегий.</li></ul></li><li><p>Неправильное управление изменениями:</p></li></ol><ul><li>Способ реагирования: Разработка процесса управления изменениями. Оценка влияния изменений на проект и адаптация плана.</li></ul><p>Каждый риск должен быть выявлен и оценен на ранних стадиях проекта, чтобы предпринимать соответствующие меры по предотвращению или смягчению их последствий. Успешное управление рисками является важным аспектом управления программными проектами и помогает повысить вероятность успешной реализации проекта.</p></div>"],["Лидерство и управление","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Лидерство и управление - это две взаимосвязанные, но различные концепции, которые играют ключевую роль в управлении программными проектами. Ниже перечислены основные различия и важные аспекты лидерства и управления в контексте программных проектов:</p><p>Лидерство:</p><ol><li><p>Ориентировано на людей: Лидерство сосредоточено на вдохновении и мотивации команды проекта. Лидеры стремятся развивать потенциал участников проекта, выявлять их сильные стороны и поддерживать их в достижении целей проекта.</p></li><li><p>Влияние и вдохновение: Лидеры влияют на команду не только путем указания задач и контроля, но и путем вдохновения и поддержки. Они стремятся создать эмоциональную связь с командой, чтобы участники проекта чувствовали себя ответственными и преданными проекту.</p></li><li><p>Фокус на видение и стратегию: Лидеры работают над разработкой видения проекта и стратегией для его достижения. Они показывают команде цель проекта и его важность для компании или организации.</p></li><li><p>Продвижение инноваций: Лидеры стимулируют команду на исследование новых и инновационных подходов к решению задач проекта. Они поощряют творческие решения и поддерживают эксперименты.</p></li></ol><p>Управление:</p><ol><li><p>Ориентировано на задачи и процессы: Управление программными проектами сосредоточено на разработке планов, контроле выполнения работ, управлении ресурсами и соблюдении сроков. Управляющие обеспечивают, чтобы все задачи выполнялись в соответствии с планом и процедурами.</p></li><li><p>Контроль и организация: Управляющие обеспечивают соблюдение установленных стандартов и контролируют выполнение проекта. Они организуют работу команды, распределяют ресурсы и решают проблемы, которые могут возникнуть в процессе проекта.</p></li><li><p>Фокус на достижение целей: Управляющие концентрируются на достижении определенных целей проекта. Они заботятся о том, чтобы проект был выполнен в рамках установленного бюджета, сроков и качества.</p></li><li><p>Систематичность и структурированность: Управление проектами строится на структурированных методологиях и подходах к планированию, контролю и управлению рисками. Оно следует определенным процессам и процедурам.</p></li></ol><p>Лидерство и управление оба необходимы для успешного выполнения программных проектов. Лидеры вдохновляют и направляют команду, а управляющие обеспечивают эффективное выполнение работ и достижение целей проекта. Хорошие лидеры-управляющие обладают как навыками мотивации и вдохновения, так и навыками планирования и организации, что позволяет им эффективно управлять проектами и достигать успеха.</p></div>"],["Управление приоритетами проектов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Управление приоритетами проектов - это процесс определения и установления приоритетов для различных проектов в организации или компании. Поскольку ресурсы ограничены, а проектов может быть много, управление приоритетами позволяет оптимизировать распределение ресурсов и сосредотачиваться на наиболее важных и стратегически значимых проектах. Вот основные аспекты управления приоритетами проектов:</p><ol><li><p>Стратегическое выравнивание: Проекты должны быть выровнены с общей стратегией и целями организации. Приоритет следует отдавать проектам, которые наилучшим образом поддерживают стратегические приоритеты компании.</p></li><li><p>Бизнес-ценность: Оценка бизнес-ценности каждого проекта играет важную роль в установлении приоритетов. Проекты, которые предоставляют наибольшую добавленную стоимость или имеют стратегическое значение, должны иметь более высокий приоритет.</p></li><li><p>Ресурсы: Анализ доступности ресурсов (как человеческих, так и финансовых) помогает определить, какие проекты можно выполнить в заданных ограничениях. Приоритет следует отдавать проектам, которые могут быть успешно реализованы с доступными ресурсами.</p></li><li><p>Риски: Оценка рисков каждого проекта также влияет на установление приоритетов. Проекты с высокими рисками или неопределенными факторами могут требовать более тщательного анализа и управления, что может повлиять на их приоритеты.</p></li><li><p>Сроки и срочность: Проекты с жесткими сроками выполнения или с высокой степенью срочности могут получить более высокий приоритет, чтобы обеспечить их своевременное выполнение.</p></li><li><p>Клиентские и внутренние запросы: Приоритет следует отдавать проектам, которые имеют стратегическую значимость для клиентов или других заинтересованных сторон организации.</p></li><li><p>Постоянное обновление: Приоритеты проектов могут меняться со временем в зависимости от изменяющихся потребностей организации, рыночной ситуации и других факторов. Управление приоритетами должно быть гибким и регулярно обновляться.</p></li></ol><p>Управление приоритетами проектов позволяет сосредотачиваться на наиболее важных и ценных проектах, что способствует эффективному использованию ресурсов и достижению стратегических целей компании.</p></div>"],["Управление проектом, направленное на снижение рисков","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Управление проектом, направленное на снижение рисков, это подход к управлению программными проектами, который активно уделяет внимание выявлению, анализу и управлению рисками, с целью минимизации возможных негативных последствий и повышения вероятности успешной реализации проекта. Вот некоторые основные аспекты управления проектом, направленного на снижение рисков:</p><ol><li><p>Идентификация рисков: В начале проекта проводится тщательный анализ, чтобы выявить потенциальные риски, которые могут повлиять на проект. Это включает оценку технических, организационных, экономических и других рисков.</p></li><li><p>Анализ и оценка рисков: Выявленные риски анализируются с точки зрения вероятности и воздействия на проект. Оценка рисков позволяет определить, какие риски являются критическими, и разработать стратегии их управления.</p></li><li><p>Планирование управления рисками: Для каждого выявленного риска разрабатываются планы управления рисками, которые включают стратегии по предотвращению, смягчению или переносу рисков, а также определение ответственных за реализацию этих стратегий.</p></li><li><p>Мониторинг рисков: В течение всего проекта риски мониторятся и оцениваются. Это позволяет выявлять новые риски и отслеживать эффективность применяемых стратегий управления рисками.</p></li><li><p>Регулярное обновление плана: План управления рисками должен быть динамическим и регулярно обновляться в соответствии с изменяющимся контекстом проекта. Новые риски могут возникать, а существующие риски могут изменяться, поэтому план управления рисками должен быть гибким.</p></li><li><p>Участие всех заинтересованных сторон: Управление рисками должно быть процессом, вовлекающим все заинтересованные стороны проекта. Каждый участник проекта должен быть в курсе потенциальных рисков и своей роли в их управлении.</p></li><li><p>Культура управления рисками: В организации должна существовать культура управления рисками, которая поддерживает проактивный подход к выявлению и реагированию на риски. Важно стимулировать команду проекта на поиск и анализ рисков, а не скрывать их.</p></li></ol><p>Управление проектом, направленное на снижение рисков, помогает создать более устойчивые и успешные программные проекты, минимизируя возможные угрозы и повышая вероятность достижения поставленных целей.</p></div>"]],"Логическое и функциональное программирование":[["Особенности языков логического программирования","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Особенности языков логического программирования:</p><ol><li><p>Декларативный подход: Языки логического программирования основаны на декларативном подходе, который описывает, что должно быть сделано, а не как это должно быть сделано. Программист указывает логические отношения и правила, и система самостоятельно находит способы их выполнения.</p></li><li><p>Использование формальной логики: В основе языков логического программирования лежит математическая логика. Программы формулируются в терминах предикатов, правил вывода и логических утверждений.</p></li><li><p>Использование правил и фактов: Программы на языках логического программирования состоят из правил и фактов. Факты представляют информацию, а правила определяют логические связи между фактами.</p></li><li><p>Обратное унификация: Процесс обратной унификации является основной особенностью языков логического программирования. Он позволяет системе находить значения переменных, которые удовлетворяют логическим отношениям и правилам.</p></li><li><p>Неизменяемость данных: Данные в языках логического программирования обычно являются неизменяемыми. После объявления фактов, они не могут быть изменены или модифицированы.</p></li><li><p>Рекурсия: Рекурсия является важным средством в языках логического программирования. Программы могут вызывать сами себя для решения задачи.</p></li><li><p>Неопределенность порядка выполнения: В логических языках не указывается точный порядок выполнения правил и утверждений. Система сама определяет оптимальный порядок для получения результата.</p></li><li><p>Применение в искусственном интеллекте: Языки логического программирования находят широкое применение в искусственном интеллекте, логическом выводе, базах знаний и экспертных системах.</p></li></ol><p>Примеры популярных языков логического программирования включают Prolog (Programming in Logic) и Datalog (Declarative Datalog). Эти языки обеспечивают элегантный и декларативный способ описания знаний и логических отношений, что делает их полезными инструментами для решения задач, связанных с логическим выводом и рассуждением.</p></div>"],["Особенности языков функционального программирования","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Особенности языков функционального программирования:</p><ol><li><p>Функции первого класса: Функции в языках функционального программирования являются объектами первого класса. Это означает, что функции могут передаваться в качестве аргументов другим функциям, возвращаться как результат выполнения функции и сохраняться в переменных.</p></li><li><p>Неизменяемость данных: В функциональном программировании данные обычно считаются неизменяемыми. После создания значения оно не может быть изменено. Вместо этого создаются новые значения на основе старых.</p></li><li><p>Рекурсия: Рекурсия является естественной и распространенной конструкцией в функциональных языках. Вместо циклов, функции часто вызывают сами себя для решения задачи.</p></li><li><p>Отсутствие побочных эффектов: Функциональные языки стараются минимизировать побочные эффекты. Это означает, что функции, как правило, не изменяют состояние программы или внешние данные, а зависят только от входных аргументов.</p></li><li><p>Возможность ленивого вычисления: Некоторые функциональные языки поддерживают ленивое вычисление, что позволяет откладывать вычисление значений до момента, когда они действительно необходимы.</p></li><li><p>Функции высшего порядка: Функциональные языки поддерживают функции высшего порядка, которые могут принимать другие функции в качестве аргументов или возвращать функции как результат выполнения.</p></li><li><p>Каррирование: В некоторых функциональных языках функции автоматически каррируются, что позволяет работать с функциями, имеющими несколько аргументов, как с последовательностью функций с одним аргументом.</p></li><li><p>Программирование без состояния: Функциональные языки стремятся минимизировать использование изменяемых переменных и состояний, что упрощает понимание программы и делает ее более безопасной.</p></li></ol><p>Примеры популярных языков функционального программирования включают Haskell, Lisp, Clojure, Erlang, F# и Scala. Эти языки предоставляют мощные средства для работы с функциями и обработки данных, что делает их привлекательными для решения различных задач, особенно в области параллельного и распределенного программирования.</p></div>"],["Работа со списками на Прологе","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Работа со списками на Прологе:</p><p>Пролог предоставляет мощные средства для работы со списками, которые являются одной из основных структур данных в этом языке. Вот основные операции и понятия, связанные с работой со списками на Прологе:</p><ol><li><p>Определение списка: Список в Прологе представляется в виде последовательности элементов, заключенных в квадратные скобки. Например: <code>[a, b, c, d]</code>.</p></li><li><p>Пустой список: Пустой список представляется в Прологе как <code>[]</code>. Он не содержит ни одного элемента.</p></li><li><p>Рекурсивное определение списка: Список в Прологе может быть определен рекурсивно. Например, список <code>[a, b, c, d]</code> можно определить следующим образом: <code>[a | [b, c, d]]</code>.</p></li><li><p>Голова и хвост списка: Голова списка - это его первый элемент, а хвост - это список, который остается после удаления первого элемента. В Прологе используются предикаты <code>head/2</code> и <code>tail/2</code> для работы с головой и хвостом списка соответственно.</p></li><li><p>Длина списка: Длину списка можно вычислить с помощью рекурсивной функции. Например:</p></li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>prolog</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-prolog\\">length([], 0).  % Пустой список имеет длину 0\\nlength([_|T], N) :- length(T, N1), N is N1 + 1.  % Длина списка равна длине хвоста плюс 1\\n</code></div></div></pre><ol start=\\"6\\"><li>Объединение списков: Два списка можно объединить с помощью оператора <code>|</code>. Например:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>prolog</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-prolog\\">append([], L, L).  % Объединение пустого списка и списка L дает сам список L\\nappend([H|T], L, [H|R]) :- append(T, L, R).  % Объединение списка с головой H и хвостом T со списком L дает список с головой H и хвостом R, который получен объединением T и L\\n</code></div></div></pre><ol start=\\"7\\"><li>Поиск элемента в списке: Для поиска элемента в списке используется рекурсивный поиск. Например:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>prolog</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-prolog\\">member(X, [X|_]).  % Элемент X содержится в списке, если он равен его голове\\nmember(X, [_|T]) :- member(X, T).  % Иначе, ищем X в хвосте списка\\n</code></div></div></pre><ol start=\\"8\\"><li>Удаление элемента из списка: Для удаления элемента из списка можно использовать рекурсивную функцию. Например:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>prolog</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-prolog\\">remove(X, [X|T], T).  % Если X равен голове списка, то удаление X из списка дает его хвост T\\nremove(X, [H|T], [H|R]) :- remove(X, T, R).  % Иначе, ищем X в хвосте списка и удаляем его оттуда\\n</code></div></div></pre><p>Работа со списками в Прологе позволяет эффективно решать задачи, связанные с обработкой данных и логическим выводом, что делает этот язык мощным инструментом для логического программирования.</p></div>"],["Работа со списками на Haskell","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Работа со списками на Haskell:</p><p>Haskell предоставляет богатые средства для работы со списками, которые являются одной из основных структур данных в этом функциональном языке. Вот основные операции и понятия, связанные с работой со списками на Haskell:</p><ol><li><p>Определение списка: Список в Haskell представляется в виде последовательности элементов, разделенных запятыми и заключенных в квадратные скобки. Например: <code>[1, 2, 3, 4]</code>.</p></li><li><p>Пустой список: Пустой список представляется в Haskell как <code>[]</code>. Он не содержит ни одного элемента.</p></li><li><p>Рекурсивное определение списка: Список в Haskell может быть определен рекурсивно. Например, список <code>[1, 2, 3, 4]</code> можно определить следующим образом: <code>1 : (2 : (3 : (4 : [])))</code>, где <code>:</code> - оператор добавления элемента в голову списка.</p></li><li><p>Голова и хвост списка: Голова списка - это его первый элемент, а хвост - это список, который остается после удаления первого элемента. В Haskell используются функции <code>head</code> и <code>tail</code> для работы с головой и хвостом списка соответственно.</p></li><li><p>Длина списка: Длину списка можно вычислить с помощью встроенной функции <code>length</code>.</p></li><li><p>Объединение списков: Два списка можно объединить с помощью оператора <code>++</code>. Например: <code>[1, 2, 3] ++ [4, 5, 6]</code> даст список <code>[1, 2, 3, 4, 5, 6]</code>.</p></li><li><p>Поиск элемента в списке: Для поиска элемента в списке можно использовать функцию <code>elem</code> или оператор <code>elem</code>. Например: <code>elem 3 [1, 2, 3, 4]</code> вернет <code>True</code>, так как элемент <code>3</code> содержится в списке.</p></li><li><p>Удаление элемента из списка: Для удаления элемента из списка можно использовать списковые выражения (list comprehension) или функции высших порядков, такие как <code>filter</code>. Например: <code>filter (/=3) [1, 2, 3, 4]</code> даст список <code>[1, 2, 4]</code>, так как элемент <code>3</code> был удален.</p></li></ol><p>Работа со списками в Haskell позволяет эффективно решать задачи, связанные с обработкой данных, функциональным программированием и реализацией алгоритмов, что делает этот язык мощным инструментом для функционального программирования.</p></div>"],["Рекурсия на прологе","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Рекурсия на Прологе:</p><p>Рекурсия в программировании - это процесс, при котором функция вызывает саму себя для решения задачи. Рекурсия является одним из ключевых инструментов в Прологе и широко используется для обработки структур данных, таких как списки и деревья. Вот некоторые особенности и примеры рекурсии на Прологе:</p><ol><li><p>Особенности рекурсии на Прологе:</p><ul><li>В Прологе рекурсия основана на правиле резолюции, которое позволяет системе логического программирования выполнять логический вывод с использованием правил и фактов.</li><li>Рекурсивные правила в Прологе имеют базовый случай (base case), который определяет завершение рекурсии, и рекурсивный случай (recursive case), который определяет вызов функции с измененными параметрами.</li><li>Пролог использует механизм унификации для сопоставления параметров рекурсивного вызова с базовым случаем, что позволяет системе выполнить рекурсивные вызовы до достижения базового случая.</li></ul></li><li><p>Пример рекурсивной функции на Прологе (вычисление факториала):</p></li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>prolog</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-prolog\\">factorial(0, 1).  % Базовый случай: факториал 0 равен 1\\nfactorial(N, Result) :-\\n    N &gt; 0,\\n    N1 is N - 1,\\n    factorial(N1, SubResult),\\n    Result is N * SubResult.  % Рекурсивный случай: факториал N равен N умножить на факториал (N - 1)\\n</code></div></div></pre><ol start=\\"3\\"><li>Пример рекурсивной функции на Прологе (поиск элемента в списке):</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>prolog</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-prolog\\">member(X, [X|_]).  % Базовый случай: элемент X содержится в списке, если он равен его голове\\nmember(X, [_|T]) :- member(X, T).  % Рекурсивный случай: ищем X в хвосте списка\\n</code></div></div></pre><ol start=\\"4\\"><li>Рекурсия и рекурсивные структуры:<ul><li>В Прологе можно использовать рекурсивные структуры данных, такие как списки и деревья, и рекурсивные функции для их обработки.</li><li>Пример рекурсивной структуры - рекурсивный список: <code>[[1, 2], [3, 4, [5]], [6]]</code>.</li></ul></li></ol><p>Рекурсия на Прологе является мощным средством для обработки данных и решения различных задач, связанных с логическим программированием. Однако при использовании рекурсии необходимо учитывать возможность зацикливания программы при неправильном определении базового случая или условий рекурсии.</p></div>"],["Рекурсия на Haskell","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Рекурсия на Haskell:</p><p>Рекурсия в Haskell - это процесс, при котором функция вызывает саму себя для решения задачи. Haskell является функциональным языком программирования, и рекурсия в нем играет важную роль при обработке данных и решении различных задач. Вот некоторые особенности и примеры рекурсии на Haskell:</p><ol><li><p>Особенности рекурсии на Haskell:</p><ul><li>В Haskell рекурсия основана на принципе математической индукции. Каждая рекурсивная функция имеет базовый случай (base case), который определяет завершение рекурсии, и рекурсивный случай (recursive case), который определяет вызов функции с измененными аргументами.</li><li>В Haskell рекурсия обычно применяется к спискам и рекурсивным структурам данных, таким как деревья.</li></ul></li><li><p>Пример рекурсивной функции на Haskell (вычисление факториала):</p></li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">factorial :: Integer -&gt; Integer\\nfactorial 0 = 1  -- Базовый случай: факториал 0 равен 1\\nfactorial n = n * factorial (n - 1)  -- Рекурсивный случай: факториал N равен N умножить на факториал (N - 1)\\n</code></div></div></pre><ol start=\\"3\\"><li>Пример рекурсивной функции на Haskell (поиск элемента в списке):</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">member :: Eq a =&gt; a -&gt; [a] -&gt; Bool\\nmember _ [] = False  -- Базовый случай: элемент не найден в пустом списке\\nmember x (h:t) = x == h || member x t  -- Рекурсивный случай: ищем X в хвосте списка\\n</code></div></div></pre><ol start=\\"4\\"><li>Рекурсия и рекурсивные структуры:<ul><li>В Haskell можно использовать рекурсивные структуры данных, такие как списки и деревья, и рекурсивные функции для их обработки.</li><li>Пример рекурсивной структуры - рекурсивный список: <code>[1, [2], [3, [4]], [5, 6]]</code>.</li></ul></li></ol><p>Рекурсия на Haskell позволяет эффективно решать задачи, связанные с функциональным программированием, обработкой данных и реализацией алгоритмов. Однако при использовании рекурсии необходимо учитывать возможность переполнения стека (stack overflow) при слишком глубокой рекурсии, поэтому иногда требуется использовать хвостовую рекурсию или другие оптимизации.</p></div>"],["Бесконечные структуры данных и ленивые вычисления.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Бесконечные структуры данных и ленивые вычисления:</p><p>Бесконечные структуры данных и ленивые вычисления - это особенности функциональных языков программирования, таких как Haskell, которые позволяют эффективно работать с бесконечными или потенциально бесконечными структурами данных.</p><ol><li><p>Ленивые вычисления:</p><ul><li>Ленивые вычисления (lazy evaluation) означают откладывание вычислений до момента, когда результат станет фактически необходимым.</li><li>В языке Haskell вычисления происходят \\"по требованию\\". Когда функция вызывается, вычисление её результатов может быть отложено до тех пор, пока результат не будет использован в дальнейшем коде.</li><li>Это позволяет работать с бесконечными или потенциально бесконечными структурами данных, такими как бесконечные списки или потоки (streams), не занимая при этом всю доступную память.</li></ul></li><li><p>Пример бесконечной структуры данных - бесконечный список:</p></li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">infiniteList :: [Int]\\ninfiniteList = [1..]\\n</code></div></div></pre><p>Этот список будет представлять все положительные целые числа, начиная с 1 и до бесконечности. Он будет доступен для использования, но не будет вычислен полностью.</p><ol start=\\"3\\"><li>Пример ленивых вычислений на Haskell:</li></ol><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">squareList :: [Int] -&gt; [Int]\\nsquareList xs = map (\\\\x -&gt; x * x) xs\\n</code></div></div></pre><p>В этом примере, когда <code>squareList</code> вызывается с аргументом <code>xs</code>, вычисления для каждого элемента списка <code>xs</code> будут откладываться до тех пор, пока результат не будет реально использован.</p><p>Благодаря ленивым вычислениям, Haskell может эффективно работать с бесконечными или большими структурами данных без необходимости хранить их полностью в памяти. Это делает Haskell мощным инструментом для работы с задачами, связанными с обработкой потоков данных, бесконечными последовательностями и другими сценариями, где требуется эффективная работа с большими объемами данных.</p></div>"],["Сопоставление с образцом. As-образцы. Универсальные образцы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Сопоставление с образцом (Pattern Matching), As-образцы и Универсальные образцы - это важные концепции, применяемые в функциональных языках программирования, таких как Haskell и ML.</p><ol><li><p>Сопоставление с образцом:</p><ul><li>Сопоставление с образцом - это процесс сопоставления значения или структуры данных с заданным образцом (шаблоном).</li><li>В функциональных языках программирования, сопоставление с образцом используется для выбора соответствующей ветви исполнения на основе структуры или значений аргументов функции.</li></ul></li><li><p>As-образцы (As-patterns):</p><ul><li>As-образцы позволяют привязать переменную к части структуры данных при сопоставлении с образцом.</li><li>Они позволяют использовать имя переменной для обращения к определенной части структуры данных в теле функции.</li><li>Синтаксис As-образца в Haskell выглядит так: <code>var@pattern</code>, где <code>var</code> - имя переменной, а <code>pattern</code> - образец.</li></ul></li></ol><p>Пример As-образца на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">data Point = Point Int Int\\n\\ngetX :: Point -&gt; Int\\ngetX (p@(Point x _)) = x  -- Используем As-образец, чтобы привязать имя \\"p\\" ко всей структуре Point и получить доступ к полю \\"x\\"\\n</code></div></div></pre><ol start=\\"3\\"><li>Универсальные образцы (Wildcards):<ul><li>Универсальные образцы (wildcards) используются для игнорирования значения или структуры данных при сопоставлении.</li><li>Они обозначаются символом подчеркивания <code>_</code> и позволяют сопоставлять только часть аргумента, игнорируя остальное.</li></ul></li></ol><p>Пример универсального образца на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">isThree :: Int -&gt; Bool\\nisThree 3 = True\\nisThree _ = False  -- Универсальный образец для любого другого аргумента, не равного 3\\n</code></div></div></pre><p>Сопоставление с образцом, As-образцы и Универсальные образцы позволяют удобно и эффективно работать с различными структурами данных и значениями в функциональных языках программирования. Они играют важную роль в обработке данных и логическом программировании.</p></div>"],["Семантика сопоставления с образцом. Выражение case. Ленивые образцы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Семантика сопоставления с образцом, выражение case и ленивые образцы:</p><ol><li><p>Семантика сопоставления с образцом:</p><ul><li>Сопоставление с образцом (Pattern Matching) - это процесс сравнения структуры или значений данных с заданными образцами (шаблонами) и выбора соответствующей ветви исполнения на основе сопоставления.</li><li>Семантика сопоставления с образцом описывает, как выбирается и исполняется соответствующая ветвь на основе заданных образцов.</li></ul></li><li><p>Выражение case:</p><ul><li>Выражение case - это конструкция в функциональных языках программирования, которая используется для сопоставления значения с образцами и определения соответствующего поведения в каждом случае.</li><li>Оно позволяет заменить последовательность вложенных условных операторов, что делает код более читаемым и поддерживаемым.</li></ul></li></ol><p>Пример выражения case на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">dayType :: Int -&gt; String\\ndayType day = case day of\\n    1 -&gt; \\"Weekend\\"\\n    6 -&gt; \\"Weekend\\"\\n    _ -&gt; \\"Weekday\\"\\n</code></div></div></pre><ol start=\\"3\\"><li>Ленивые образцы (Lazy patterns):<ul><li>Ленивые образцы позволяют производить ленивое (отложенное) вычисление при сопоставлении с образцами.</li><li>В Haskell ленивые образцы обозначаются символом <code>~</code> и позволяют отложить вычисление значения до тех пор, пока оно не станет фактически необходимым.</li></ul></li></ol><p>Пример ленивого образца на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">lazyPattern :: (Int, Int) -&gt; Int\\nlazyPattern ~(x, y) = x + y\\n</code></div></div></pre><p>Здесь ленивый образец <code>~(x, y)</code> откладывает вычисление значений <code>x</code> и <code>y</code> до момента их реального использования в теле функции.</p><p>Семантика сопоставления с образцом, выражение case и ленивые образцы являются важными инструментами в функциональных языках программирования. Они позволяют более эффективно и удобно обрабатывать данные и принимать решения на основе их структуры или значений.</p></div>"],["Лексическая видимость и вложенные формы. Let-выражения. Предложение where.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Лексическая видимость, вложенные формы, Let-выражения и предложение where:</p><ol><li><p>Лексическая видимость:</p><ul><li>Лексическая видимость (lexical scoping) - это правило определения области видимости переменных на основе структуры исходного кода программы.</li><li>Переменные, объявленные внутри блока кода, доступны только внутри этого блока и его вложенных блоков, но не видны за их пределами.</li><li>Это правило позволяет избежать конфликтов и неоднозначности имен переменных и обеспечивает более предсказуемое поведение программы.</li></ul></li><li><p>Вложенные формы:</p><ul><li>В функциональных языках программирования возможно создание вложенных форм, таких как вложенные функции, условные выражения и циклы.</li><li>Вложенные формы позволяют более компактно и эффективно описывать логику программы, а также повторно использовать код.</li></ul></li><li><p>Let-выражения:</p><ul><li>Let-выражения представляют собой способ определения локальных переменных в Haskell и других функциональных языках программирования.</li><li>Синтаксис Let-выражения в Haskell выглядит следующим образом:</li></ul><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">let &lt;binding&gt;\\nin &lt;expression&gt;\\n</code></div></div></pre><ul><li>Они позволяют определить локальные переменные, которые будут доступны только в выражении после ключевого слова <code>in</code>.</li></ul></li></ol><p>Пример Let-выражения на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">squareSum :: Int -&gt; Int -&gt; Int\\nsquareSum x y = let squaredX = x * x\\n                   squaredY = y * y\\n               in squaredX + squaredY\\n</code></div></div></pre><ol start=\\"4\\"><li>Предложение where:<ul><li>Предложение where - это ещё один способ определения локальных переменных в Haskell.</li><li>Оно позволяет определить локальные переменные, которые будут доступны в теле функции, следующем за предложением where.</li><li>Синтаксис предложения where выглядит следующим образом:</li></ul><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">&lt;expression&gt;\\nwhere &lt;binding&gt;\\n</code></div></div></pre></li></ol><p>Пример предложения where на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">squareSum :: Int -&gt; Int -&gt; Int\\nsquareSum x y = squaredX + squaredY\\n    where\\n        squaredX = x * x\\n        squaredY = y * y\\n</code></div></div></pre><p>Лексическая видимость, вложенные формы, Let-выражения и предложение where позволяют структурировать код, избегать конфликтов и повторно использовать локальные переменные, делая функциональные языки программирования более выразительными и гибкими.</p></div>"],["Комбинаторная логика Х. Карри. Программирование в функциональных обозначениях Л. В. Канторовича.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Комбинаторная логика Х. Карри и программирование в функциональных обозначениях Л. В. Канторовича:</p><ol><li><p>Комбинаторная логика Х. Карри:</p><ul><li>Комбинаторная логика Х. Карри (Combinatory Logic) - это формальная система, разработанная американским математиком Хаскелем Карри, которая изучает комбинаторы и их комбинации для представления и обработки функций.</li><li>Комбинаторы - это функциональные символы без свободных переменных, которые могут быть использованы для построения функций путем комбинирования.</li><li>Комбинаторная логика обладает свойством выразительной силы и универсальности, и она может представить любую вычислимую функцию.</li></ul></li><li><p>Программирование в функциональных обозначениях Л. В. Канторовича:</p><ul><li>Программирование в функциональных обозначениях - это идея разработанная русским математиком и программистом Леонидом Витальевичем Канторовичем, основывающаяся на теории функций и их применении для описания алгоритмов.</li><li>Это подход к программированию, при котором алгоритмы выражаются в терминах функций и их композиций.</li><li>Функции рассматриваются как основной строительный блок программы, и при программировании в функциональных обозначениях акцент делается на использование функций как абстракций и на избегание изменяемого состояния и побочных эффектов.</li></ul></li></ol><p>Оба подхода - комбинаторная логика Х. Карри и программирование в функциональных обозначениях Л. В. Канторовича - относятся к функциональному программированию и обладают сильными математическими основами. Они предоставляют мощные инструменты для разработки алгоритмов и построения выразительных и чистых программ.</p></div>"],["Строго функциональный язык. Элементарные понятия. Символьные данные: лямбда-выражения и представление данных. Элементарные селекторы и конструкторы лямбда-выражений. Элементарные предикаты и арифметика. Рекурсивные функции: разбор случаев, рекурсивные определения, выбор подфункций. Примеры обработки списков.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Строго функциональный язык, элементарные понятия, символьные данные, рекурсивные функции и примеры обработки списков:</p><ol><li><p>Строго функциональный язык:</p><ul><li>Строго функциональный язык программирования - это язык, в котором все вычисления основаны на функциях, и отсутствует понятие изменяемого состояния.</li><li>В строго функциональном языке каждая функция является чистой и детерминированной, то есть для одних и тех же аргументов она всегда возвращает один и тот же результат.</li><li>Отсутствие побочных эффектов делает программы на строго функциональных языках более предсказуемыми, легкими для понимания и тестирования.</li></ul></li><li><p>Символьные данные и лямбда-выражения:</p><ul><li>Символьные данные представляют собой базовые элементы языка, которые используются для создания выражений и данных.</li><li>Лямбда-выражения представляют функции в функциональных языках программирования.</li><li>Лямбда-выражение состоит из абстрактного символа (переменной), точки и тела функции, которое определяет, как функция обрабатывает свой аргумент.</li></ul></li><li><p>Элементарные селекторы и конструкторы лямбда-выражений:</p><ul><li>Элементарные селекторы (selector functions) - это функции, которые возвращают значение одного из аргументов лямбда-выражения.</li><li>Конструкторы (constructor functions) - это функции, которые создают составные данные, объединяя несколько значений в структуру.</li></ul></li><li><p>Элементарные предикаты и арифметика:</p><ul><li>Элементарные предикаты - это функции, которые возвращают булево значение (истина или ложь) на основе свойств данных или их отношений.</li><li>Арифметика в функциональных языках позволяет выполнять арифметические операции над числами.</li></ul></li><li><p>Рекурсивные функции и обработка списков:</p><ul><li>Рекурсивные функции - это функции, которые вызывают сами себя для решения задачи, используя промежуточные результаты.</li><li>Обработка списков является частой задачей в функциональных языках программирования. Списки могут быть рекурсивно разобраны и обработаны с помощью различных функций, таких как функции для добавления элементов в список, удаления элементов, поиска, фильтрации и других манипуляций со списками.</li></ul></li></ol><p>Примеры обработки списков и рекурсивных функций широко используются в функциональных языках программирования для решения различных задач и алгоритмов.</p></div>"],["Дополнительные возможности. Приемы программирования. Аккумуляторы.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Дополнительные возможности, приемы программирования и аккумуляторы:</p><ol><li><p>Дополнительные возможности:</p><ul><li>Функциональные языки программирования предоставляют множество дополнительных возможностей, которые упрощают и облегчают разработку программ:<ul><li>Замыкания (closures) - функции, которые могут захватывать и работать с переменными из окружающего контекста.</li><li>Каррирование (currying) - преобразование функции с несколькими аргументами в последовательность функций с одним аргументом.</li><li>Функции высшего порядка (higher-order functions) - функции, которые могут принимать другие функции в качестве аргументов или возвращать их в качестве результата.</li><li>Рекурсивные типы данных - определение типов данных, которые могут содержать сами себя в качестве части своей структуры.</li><li>Композиция функций - объединение функций для создания новых функций путем последовательного применения.</li><li>Инфиксные и постфиксные операции - возможность использовать операции с различными стилями записи, помимо префиксной (применение операторов к аргументам).</li></ul></li></ul></li><li><p>Приемы программирования:</p><ul><li>В функциональном программировании применяются различные приемы для решения задач и организации кода:<ul><li>Разделение задач на подзадачи и рекурсивное решение их с использованием базовых случаев.</li><li>Использование высокоуровневых абстракций и функций высшего порядка для упрощения кода и улучшения его читаемости.</li><li>Минимизация изменяемого состояния и использование иммутабельных (неизменяемых) данных для предотвращения побочных эффектов.</li><li>Применение подходов к параллельному и конкурентному программированию, так как функциональные языки часто обладают хорошей поддержкой для параллелизма.</li></ul></li></ul></li><li><p>Аккумуляторы:</p><ul><li>В функциональном программировании аккумуляторы представляют собой параметры функций, которые используются для накопления результатов в процессе рекурсивного обхода структур данных.</li><li>Аккумуляторы обычно передаются в рекурсивные функции и используются для хранения промежуточных результатов вычислений.</li><li>Они позволяют избежать необходимости использования изменяемого состояния и сделать функциональный код более чистым и предсказуемым.</li></ul></li></ol><p>Использование дополнительных возможностей, приемов программирования и аккумуляторов позволяет разрабатывать более гибкие, модульные и эффективные функциональные программы, которые легко поддаются масштабированию и поддержке.</p></div>"],["Локальные определения. Функционалы и другие функции высших порядков.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Локальные определения, функционалы и другие функции высших порядков:</p><ol><li>Локальные определения:<ul><li>Локальные определения позволяют определять функции или переменные внутри тела другой функции, которые будут видны только внутри этой функции.</li><li>Это позволяет создавать вспомогательные функции или переменные, которые используются только внутри определенной функции, не загромождая глобальное пространство имен.</li><li>Локальные определения обычно используются в функциональных языках программирования, чтобы сделать код более компактным и легче читаемым.</li></ul></li></ol><p>Пример локального определения на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">-- В данной функции \\"addAndDouble\\" определены локальные функции \\"add\\" и \\"double\\".\\naddAndDouble :: Int -&gt; Int -&gt; Int\\naddAndDouble x y = add x y * 2\\n  where\\n    add a b = a + b\\n    double z = z * 2\\n</code></div></div></pre><ol start=\\"2\\"><li>Функционалы:<ul><li>Функционалы (functionals) - это функции высшего порядка, которые принимают другие функции в качестве аргументов или возвращают их в качестве результата.</li><li>Функционалы позволяют абстрагироваться от конкретных операций и создавать более общие функции, которые могут применяться к различным типам данных или функциональным аргументам.</li></ul></li></ol><p>Пример функционала на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">-- Функционал \\"applyTwice\\" принимает функцию \\"f\\" и аргумент \\"x\\" и применяет функцию \\"f\\" дважды к \\"x\\".\\napplyTwice :: (a -&gt; a) -&gt; a -&gt; a\\napplyTwice f x = f (f x)\\n</code></div></div></pre><ol start=\\"3\\"><li>Другие функции высших порядков:<ul><li>Помимо функционалов, функциональные языки программирования поддерживают множество других функций высших порядков, таких как:<ul><li>Функции отображения (map) - применение функции к каждому элементу списка или другой структуры данных.</li><li>Функции свертки (fold) - комбинирование элементов списка с использованием некоторой ассоциативной операции.</li><li>Функции фильтрации (filter) - выбор элементов списка, которые удовлетворяют заданному условию.</li><li>Функции композиции (compose) - объединение нескольких функций в одну функцию путем последовательного применения.</li></ul></li></ul></li></ol><p>Функциональные языки программирования обладают мощной поддержкой для локальных определений, функционалов и других функций высших порядков, что делает их очень удобными для работы с функциями и абстракциями, способствуя улучшению структуры и читаемости кода.</p></div>"],["Соответствие между функциональными и императивными программами.","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Соответствие между функциональными и императивными программами:</p><p>Соответствие между функциональными и императивными программами заключается в том, что многие алгоритмы и задачи могут быть представлены как в функциональном, так и в императивном стиле программирования. Несмотря на то, что данные стили имеют различные подходы к решению задач, важно понимать, что взаимодействие и взаимозаменяемость между ними возможны.</p><ol><li>Императивное программирование:<ul><li>В императивном программировании код описывает последовательность команд, которые указывают, как выполнять действия над данными и как изменять состояние программы.</li><li>Императивный код акцентирует внимание на \\"как\\" и \\"что делать\\" для достижения цели.</li></ul></li></ol><p>Пример императивного кода на Python:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>python</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-python\\"><span class=\\"hljs-comment\\"># Императивный код для вычисления суммы чисел от 1 до n</span>\\n<span class=\\"hljs-keyword\\">def</span> <span class=\\"hljs-title function_\\">sum_of_numbers</span>(<span class=\\"hljs-params\\">n</span>):\\n    total = <span class=\\"hljs-number\\">0</span>\\n    <span class=\\"hljs-keyword\\">for</span> i <span class=\\"hljs-keyword\\">in</span> <span class=\\"hljs-built_in\\">range</span>(<span class=\\"hljs-number\\">1</span>, n+<span class=\\"hljs-number\\">1</span>):\\n        total += i\\n    <span class=\\"hljs-keyword\\">return</span> total\\n</code></div></div></pre><ol start=\\"2\\"><li>Функциональное программирование:<ul><li>В функциональном программировании код описывает набор функций, которые преобразуют данные без изменения состояния программы или переменных.</li><li>Функциональный код сконцентрирован на \\"что делать\\" и \\"что есть\\" (что данные представляют) для достижения цели.</li></ul></li></ol><p>Пример функционального кода на Haskell:</p><pre><div class=\\"bg-black rounded-md mb-4\\"><div class=\\"flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md\\"><span>haskell</span><button class=\\"flex ml-auto gap-2\\"><svg stroke=\\"currentColor\\" fill=\\"none\\" stroke-width=\\"2\\" viewBox=\\"0 0 24 24\\" stroke-linecap=\\"round\\" stroke-linejoin=\\"round\\" class=\\"h-4 w-4\\" height=\\"1em\\" width=\\"1em\\" xmlns=\\"http://www.w3.org/2000/svg\\"><path d=\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\"></path><rect x=\\"8\\" y=\\"2\\" width=\\"8\\" height=\\"4\\" rx=\\"1\\" ry=\\"1\\"></rect></svg>Copy code</button></div><div class=\\"p-4 overflow-y-auto\\"><code class=\\"!whitespace-pre hljs language-haskell\\">-- Функциональный код для вычисления суммы чисел от 1 до n\\nsumOfNumbers :: Int -&gt; Int\\nsumOfNumbers n = sum [1..n]\\n</code></div></div></pre><p>Соответствие между функциональными и императивными программами возможно через применение конверсий и трансляции между стилями. Однако, стоит отметить, что каждый стиль имеет свои особенности и преимущества, и выбор между ними зависит от конкретных требований задачи, уровня абстракции и предпочтений программиста.</p></div>"]],"Сети ЭВМ и телекоммуникации":[["Основные характеристики, области применения ЭВМ различных классов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные характеристики и области применения ЭВМ различных классов:</p><ol><li><p>Области применения и классы ЭВМ:</p><ul><li><p>Суперкомпьютеры:</p><ul><li>Основное предназначение - высокопроизводительные вычисления для научных и инженерных задач.</li><li>Применяются для моделирования сложных процессов, анализа данных, расчетов в области физики, аэродинамики, климатологии, биомедицины и других научных областях.</li><li>Обладают мощными вычислительными ресурсами, высокой параллельностью и большим объемом оперативной памяти.</li></ul></li><li><p>Серверы:</p><ul><li>Используются для предоставления различных услуг и хранения данных в корпоративных и облачных сетях.</li><li>Серверы могут быть ориентированы на веб-хостинг, базы данных, электронную почту, файловое хранилище и другие приложения.</li></ul></li><li><p>Рабочие станции:</p><ul><li>Предназначены для выполнения сложных инженерных, графических и научных задач.</li><li>Используются в проектировании, архитектуре, графическом дизайне, аудио-видео обработке и других профессиональных областях.</li></ul></li><li><p>Персональные компьютеры (ПК):</p><ul><li>Широко распространены и предназначены для общего назначения - выполнения офисных задач, интернет-серфинга, мультимедийных приложений и игр.</li><li>Используются в домашних условиях и офисах для повседневных задач.</li></ul></li><li><p>Мобильные устройства:</p><ul><li>Включают смартфоны, планшеты и ноутбуки.</li><li>Предоставляют мобильный доступ к интернету, коммуникациям, мультимедийным приложениям и мобильным приложениям.</li></ul></li></ul></li><li><p>Основные характеристики:</p><ul><li>Производительность: определяется мощностью процессора, объемом оперативной памяти и графической подсистемы.</li><li>Архитектура процессора: может быть CISC (Complex Instruction Set Computing) или RISC (Reduced Instruction Set Computing).</li><li>Память: включает оперативную память (RAM) для временного хранения данных и постоянную память (жесткий диск, SSD) для долгосрочного хранения данных.</li><li>Порты и интерфейсы: USB, Ethernet, HDMI, аудио, Wi-Fi и другие интерфейсы для подключения устройств.</li><li>Операционная система: программное обеспечение, которое управляет работой компьютера и обеспечивает взаимодействие с пользователем.</li></ul></li></ol><p>Каждый класс ЭВМ имеет свои уникальные характеристики, которые определяют области их применения. Выбор подходящего класса ЭВМ зависит от конкретных требований задачи и необходимых вычислительных возможностей.</p></div>"],["Функциональная и структурная организация процессора","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Функциональная и структурная организация процессора:</p><p>Функциональная организация процессора:</p><ol><li>Функциональная организация определяет архитектуру процессора и его функциональные блоки, которые выполняют различные операции.</li><li>Основной компонент - арифметико-логическое устройство (ALU), которое отвечает за выполнение арифметических операций (сложение, вычитание и т.д.) и логических операций (И, ИЛИ, НЕ).</li><li>Функциональная организация также включает блок управления, который управляет последовательностью операций и управляющими сигналами.</li></ol><p>Структурная организация процессора:</p><ol><li>Структурная организация определяет физическую реализацию процессора и связи между его функциональными блоками.</li><li>Включает в себя регистры - быструю память, доступную непосредственно для процессора, используемую для временного хранения данных и инструкций.</li><li>Структурная организация также включает шины данных, адресов и управления, которые обеспечивают передачу информации между различными компонентами процессора и памятью.</li></ol><p>Соотношение между функциональной и структурной организацией процессора:</p><ul><li>Функциональная организация определяет, какие операции и функции должен выполнять процессор, а также его архитектуру.</li><li>Структурная организация определяет, как физически реализованы эти функции и как происходит взаимодействие между компонентами процессора.</li></ul><p>Оба типа организации сильно взаимосвязаны и определяют работу процессора. Функциональная организация влияет на возможности процессора и его архитектуру, а структурная организация воплощает эти возможности в физическом исполнении. Комбинация обеих организаций определяет характеристики процессора, такие как скорость работы, производительность и энергопотребление.</p></div>"],["Организация памяти ЭВМ","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Организация памяти ЭВМ:</p><p>Организация памяти в компьютере играет важную роль в хранении данных и инструкций, необходимых для работы программ. Память может быть организована на разных уровнях и с разными характеристиками для обеспечения эффективной работы компьютера.</p><ol><li><p>Основные типы памяти:</p><ul><li><p>Оперативная память (RAM):</p><ul><li>Используется для хранения данных и инструкций, которые компьютер активно использует во время работы программ.</li><li>Оперативная память является \\"временной\\" памятью, так как ее содержимое теряется при выключении компьютера.</li><li>Часто обозначается как \\"виртуальная память\\" и играет важную роль в обеспечении быстрого доступа к данным программ.</li></ul></li><li><p>Постоянная память:</p><ul><li>Используется для хранения данных, которые должны сохраняться после выключения компьютера.</li><li>Включает жесткие диски (HDD), твердотельные накопители (SSD) и оптические диски (CD, DVD, Blu-ray).</li><li>Чаще всего используется для хранения операционной системы, программ и пользовательских данных.</li></ul></li><li><p>Кэш-память:</p><ul><li>Кэш-память является особенной и быстрой формой памяти, используемой для ускорения доступа к данным.</li><li>Она располагается ближе к процессору, чем оперативная и постоянная память, что позволяет уменьшить задержки при доступе к данным.</li></ul></li></ul></li><li><p>Иерархия памяти:</p><ul><li>В компьютере применяется иерархическая организация памяти, где каждый уровень предоставляет определенный компромисс между скоростью и объемом хранения данных.</li><li>Кэш-память обычно представлена несколькими уровнями (L1, L2, L3), расположенными ближе всего к процессору, но с уменьшающимся объемом и возрастанием скорости доступа на каждом последующем уровне.</li><li>Оперативная память и постоянная память составляют более медленные уровни с большим объемом хранения данных.</li></ul></li><li><p>Виртуальная память:</p><ul><li>Виртуальная память используется для обеспечения работы программ, чьи размеры могут превышать объем доступной оперативной памяти.</li><li>Этот механизм позволяет компьютеру использовать часть постоянной памяти в качестве временного хранилища для данных, которые в данный момент не активно используются программами.</li><li>Виртуальная память поддерживается операционной системой и автоматически управляется для обеспечения оптимального использования ресурсов.</li></ul></li></ol><p>Организация памяти в компьютере включает в себя несколько уровней и технологий, обеспечивающих эффективное и удобное хранение и доступ к данным и программам.</p></div>"],["Основные стадии выполнения команды","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Основные стадии выполнения команды:</p><p>Выполнение команды в компьютере происходит в несколько этапов, которые образуют основные стадии выполнения команды. Эти этапы называются циклами команд (instruction cycle) и состоят из следующих стадий:</p><ol><li><p>Получение команды (Fetch):</p><ul><li>Процессор считывает следующую команду из памяти по адресу, указанному в регистре команд (Instruction Pointer или Program Counter).</li><li>Считанная команда загружается во внутренний регистр команд процессора для последующего выполнения.</li></ul></li><li><p>Декодирование команды (Decode):</p><ul><li>Считанная команда декодируется процессором для понимания типа операции, операндов и другой необходимой информации.</li><li>Декодирование определяет, какую операцию нужно выполнить и какие данные из памяти или регистров требуются для этой операции.</li></ul></li><li><p>Исполнение команды (Execute):</p><ul><li>Процессор выполняет операцию, указанную в команде, используя данные из предыдущего этапа и/или из регистров процессора.</li><li>На этом этапе происходят арифметические и логические операции, доступ к данным в памяти или регистрах, и т.д.</li></ul></li><li><p>Запись результата (Write Back):</p><ul><li>Результат выполнения команды записывается в регистры процессора или в память, если это необходимо.</li><li>Это позволяет сохранить результат для последующего использования другими командами или программами.</li></ul></li></ol><p>Цикл выполнения команд повторяется для каждой команды в программе, пока программа не завершится или не будет достигнута инструкция прерывания (interrupt).</p><p>Этапы выполнения команды могут различаться в зависимости от архитектуры процессора и его инструкционного набора. В современных процессорах также используются техники предсказания выполнения команд (branch prediction) и параллельного выполнения команд (pipelining), чтобы повысить производительность и эффективность работы процессора.</p></div>"],["Организация прерываний в ЭВМ","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Организация прерываний в ЭВМ:</p><p>Прерывания (interrupts) в компьютере — это механизм, который позволяет обрабатывать события или запросы, возникающие вне последовательности исполнения программы, и прерывать текущее выполнение процессора для обработки этих событий. Прерывания позволяют обеспечить отклик системы на внешние события в реальном времени и обрабатывать различные типы запросов, такие как ввод-вывод, таймеры, ошибки и другие.</p><p>Организация прерываний включает следующие основные элементы:</p><ol><li><p>Прерывания и прерывательные устройства:</p><ul><li>Прерывания могут быть вызваны внешними устройствами, такими как контроллеры ввода-вывода, сетевые карты, клавиатура и другие.</li><li>Устройства, способные вызывать прерывания, имеют соответствующие линии прерываний, на которых они активируются при возникновении события.</li></ul></li><li><p>Контроллер прерываний (Interrupt Controller):</p><ul><li>Контроллер прерываний — это специальное устройство, которое управляет и распределяет прерывания от различных устройств.</li><li>Он отвечает за приоритизацию прерываний, чтобы система могла обрабатывать их в нужной последовательности.</li></ul></li><li><p>Процессор и обработка прерываний:</p><ul><li>Когда происходит активация линии прерывания, процессор завершает текущее выполнение команды и переходит в режим обработки прерываний.</li><li>Он сохраняет состояние текущей работы (например, значения регистров и указатель команд) и переключается на обработку прерывания.</li></ul></li><li><p>Обработчики прерываний (Interrupt Handlers):</p><ul><li>Обработчики прерываний — это программные процедуры или функции, которые вызываются при возникновении прерывания.</li><li>Они выполняют обработку события, связанного с прерыванием, и восстанавливают состояние системы после завершения обработки.</li></ul></li><li><p>Приоритеты и маскировка прерываний:</p><ul><li>Прерывания могут иметь различные приоритеты, и некоторые могут быть временно отключены (замаскированы) для предотвращения их активации в определенных условиях.</li></ul></li></ol><p>Прерывания позволяют компьютеру эффективно реагировать на внешние события, минимизировать задержки и обеспечивать отклик системы на различные запросы, что делает их важным компонентом в работе ЭВМ и обеспечивает множество функций, таких как многозадачность, ввод-вывод, управление памятью и другие.</p></div>"],["Организация ввода-вывода","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Организация ввода-вывода (Input/Output, I/O) в ЭВМ:</p><p>Организация ввода-вывода в компьютере включает в себя механизмы и методы обмена данными между процессором (ЦПУ) и внешними устройствами, такими как жесткие диски, клавиатура, мышь, принтеры, сетевые карты и другие периферийные устройства. Задача ввода-вывода заключается в обеспечении эффективного и надежного взаимодействия между процессором и устройствами ввода-вывода.</p><p>Основные принципы организации ввода-вывода:</p><ol><li><p>I/O порты:</p><ul><li>Взаимодействие между процессором и устройствами ввода-вывода осуществляется через I/O порты (порты ввода-вывода).</li><li>Каждое устройство ввода-вывода обычно имеет свой адрес в адресном пространстве компьютера, через который оно доступно для обмена данными.</li></ul></li><li><p>Программирование ввода-вывода:</p><ul><li>Для работы с устройствами ввода-вывода, процессор использует специальные команды ввода-вывода, которые позволяют выполнять операции чтения и записи данных.</li><li>Программы должны включать соответствующие команды ввода-вывода, чтобы обмениваться данными с периферийными устройствами.</li></ul></li><li><p>Прерывания:</p><ul><li>Ввод-вывод может осуществляться с использованием прерываний. Когда устройство завершает операцию ввода или вывода, оно может активировать прерывание, чтобы уведомить процессор о завершении операции.</li><li>Процессор может обрабатывать прерывание, вызывая соответствующий обработчик прерывания (interrupt handler) для выполнения дополнительных действий или получения результатов операции.</li></ul></li><li><p>DMA (Direct Memory Access):</p><ul><li>Для ускорения передачи данных между устройствами ввода-вывода и памятью компьютера, используется технология DMA.</li><li>DMA позволяет устройству ввода-вывода напрямую обмениваться данными с памятью, минуя процессор, что увеличивает скорость ввода-вывода.</li></ul></li><li><p>Буферизация:</p><ul><li>Чтобы уменьшить задержки при вводе-выводе данных, используется буферизация.</li><li>Данные временно хранятся в буфере перед передачей между устройством и памятью, что позволяет более эффективно управлять потоком данных.</li></ul></li></ol><p>Организация ввода-вывода включает в себя различные техники и методы, чтобы обеспечить эффективное и надежное взаимодействие между процессором и устройствами ввода-вывода, что является важным аспектом работы компьютерных систем.</p></div>"],["Периферийные устройства","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Периферийные устройства - это устройства, которые подключаются к компьютеру или другим электронным устройствам для обеспечения ввода, вывода, хранения данных и выполнения других функций вне основной центральной обработки. Они представляют собой внешние устройства, которые расширяют функциональность компьютерной системы и позволяют пользователю взаимодействовать с компьютером и обрабатывать данные.</p><p>Некоторые примеры периферийных устройств:</p><ol><li><p>Клавиатура: Используется для ввода текста и команд в компьютер.</p></li><li><p>Мышь: Позволяет управлять указателем на экране и осуществлять взаимодействие с графическим интерфейсом пользователя.</p></li><li><p>Монитор: Отображает информацию, созданную компьютером, и позволяет пользователю визуально взаимодействовать с системой.</p></li><li><p>Принтер: Предназначен для вывода текста и графики на бумагу или другие материалы.</p></li><li><p>Сканер: Используется для получения электронных копий документов или изображений с бумаги или других материалов.</p></li><li><p>Жесткий диск (Hard Drive): Служит для хранения данных и программ на длительный срок.</p></li><li><p>USB-накопители: Портативные устройства для хранения данных, которые подключаются через порт USB.</p></li><li><p>Оптические приводы (CD/DVD/Blu-ray): Используются для чтения и записи данных с оптических дисков.</p></li><li><p>Сетевая карта: Предназначена для подключения компьютера к сети.</p></li><li><p>Звуковая карта: Обрабатывает звуковой сигнал, позволяя компьютеру воспроизводить и записывать звук.</p></li><li><p>Веб-камера: Позволяет пользователю видеть и общаться с другими людьми через интернет.</p></li><li><p>Сканер отпечатков пальцев: Используется для биометрической идентификации пользователя.</p></li></ol><p>Это лишь небольшой список разнообразных периферийных устройств, которые могут быть использованы с компьютером. Они значительно расширяют функциональность и возможности компьютерной системы, делая ее более удобной и полезной для пользователей.</p></div>"],["Архитектурные особенности организации ЭВМ различных классов","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Архитектурные особенности организации ЭВМ различных классов:</p><ol><li><p>Однопроцессорные ЭВМ:</p><ul><li>Однопроцессорные ЭВМ имеют один процессор (ЦПУ), который выполняет все операции.</li><li>Процессор в таких системах последовательно выполняет команды из памяти.</li></ul></li><li><p>Многопроцессорные ЭВМ:</p><ul><li>Многопроцессорные ЭВМ содержат более одного процессора (двух-, четырех-, многопроцессорные системы).</li><li>Процессоры в таких системах работают параллельно, что позволяет эффективно выполнять параллельные задачи и повышает производительность.</li></ul></li><li><p>Суперкомпьютеры:</p><ul><li>Суперкомпьютеры представляют собой мощные многопроцессорные системы, спроектированные для обработки огромных объемов данных и высокопроизводительных вычислений.</li><li>Они используются в научных и инженерных приложениях, моделировании, криптографии и других областях, где требуются экстремальные вычислительные возможности.</li></ul></li><li><p>Кластеры:</p><ul><li>Кластеры представляют собой сети связанных между собой компьютеров, работающих вместе как единая система.</li><li>Они обладают высокой отказоустойчивостью и масштабируемостью и могут использоваться для распределенных вычислений и хранения больших объемов данных.</li></ul></li><li><p>Встроенные системы:</p><ul><li>Встроенные системы предназначены для выполнения специфических задач во встроенных системах или устройствах.</li><li>Они обычно имеют ограниченные вычислительные возможности, но выполняют строго определенные функции, такие как управление бытовой техникой, автомобильными системами, медицинскими устройствами и т.д.</li></ul></li><li><p>Облако (Cloud Computing):</p><ul><li>Облачные вычисления предоставляют доступ к ресурсам и услугам через интернет.</li><li>Это позволяет пользователям арендовать вычислительные мощности и хранение данных без необходимости владеть физическим оборудованием.</li></ul></li></ol><p>Архитектурные особенности каждого класса ЭВМ определяют его функциональность, производительность, масштабируемость и области применения. Выбор определенного класса ЭВМ зависит от требований задачи и специфических потребностей пользователей.</p></div>"],["Параллельные системы","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Параллельные системы - это компьютерные системы или архитектуры, которые используют несколько процессоров (ЦПУ) для выполнения задач параллельно. Вместо последовательной обработки команд каждый процессор обрабатывает свою часть данных или задачи одновременно, что позволяет повысить производительность и ускорить выполнение вычислений.</p><p>Основные особенности параллельных систем:</p><ol><li><p>Параллельные алгоритмы: В параллельных системах используются специальные алгоритмы, которые разбивают задачи на более мелкие подзадачи, которые могут выполняться независимо на разных процессорах.</p></li><li><p>Типы параллелизма:</p><ul><li>Задачи параллельных систем могут быть разделены на несколько потоков (потоковый параллелизм), которые обрабатываются на разных процессорах или ядрах.</li><li>Могут использоваться также векторный параллелизм, когда операции выполняются над массивами данных одновременно.</li></ul></li><li><p>Параллельная обработка данных: В параллельных системах данные могут обрабатываться параллельно, что ускоряет выполнение вычислений, особенно в задачах с большим объемом данных.</p></li><li><p>Модели параллельного программирования: Существуют различные модели и технологии программирования для параллельных систем, такие как использование потоков, процессов, MPI (Message Passing Interface), OpenMP, CUDA и другие.</p></li><li><p>Масштабируемость: Параллельные системы обеспечивают масштабируемость, что означает, что их производительность может увеличиваться с увеличением числа процессоров.</p></li><li><p>Типы параллельных систем:</p><ul><li>Многопроцессорные системы (Multi-Processor Systems): Содержат несколько процессоров в одном компьютере, которые работают независимо друг от друга.</li><li>Кластеры (Clusters): Состоят из нескольких компьютеров, которые работают вместе в сети.</li><li>Суперкомпьютеры (Supercomputers): Это мощные параллельные системы, предназначенные для выполнения сложных и вычислительно интенсивных задач.</li></ul></li></ol><p>Параллельные системы широко используются в научных и инженерных расчетах, обработке больших объемов данных, машинном обучении, графике и других областях, где требуется высокая производительность и эффективность вычислений. Однако, параллельное программирование представляет собой сложную задачу, и эффективность параллельной обработки может зависеть от типа задачи и особенностей архитектуры системы.</p></div>"],["Понятие о многомашинных и многопроцессорных вычислительных система","<div class=\\"markdown prose w-full break-words dark:prose-invert light\\"><p>Многомашинные и многопроцессорные вычислительные системы - это два типа параллельных систем, которые используют несколько процессоров (ЦПУ) для выполнения задач параллельно. Однако они имеют различия в своей структуре и способе организации.</p><ol><li><p>Многомашинные вычислительные системы:</p><ul><li>В многомашинных системах каждый процессор имеет свою собственную память и является независимым компьютером, называемым \\"узлом\\" или \\"машиной\\".</li><li>Узлы соединены сетью, и каждый из них может выполнять свои задачи независимо от других узлов.</li><li>Задачи распределяются между узлами, и они обмениваются данными через сеть.</li><li>Примеры многомашинных систем включают кластеры, где каждый узел представляет собой отдельный компьютер.</li></ul></li><li><p>Многопроцессорные вычислительные системы:</p><ul><li>В многопроцессорных системах несколько процессоров объединяются в единую систему и используют общую память.</li><li>Все процессоры имеют доступ к общей памяти и могут обмениваться данными без необходимости использовать сеть.</li><li>Задачи могут быть разделены на несколько потоков, которые обрабатываются на разных процессорах.</li><li>Многопроцессорные системы предоставляют более прямой и быстрый доступ к общей памяти, чем многомашинные системы.</li><li>Примеры многопроцессорных систем включают системы с несколькими процессорами на одной материнской плате или суперкомпьютеры.</li></ul></li></ol><p>Основное различие между многомашинными и многопроцессорными системами заключается в организации памяти и способе взаимодействия между процессорами. В многомашинных системах каждый процессор имеет свою собственную память и обменивается данными через сеть, в то время как в многопроцессорных системах все процессоры используют общую память и могут обмениваться данными напрямую.</p><p>Выбор между этими двумя типами систем зависит от требований конкретной задачи, структуры данных и алгоритмов, которые будут использоваться.</p></div>"]]}');var Zn=function(){return Zn=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},Zn.apply(this,arguments)};const el=function(){var e=(0,l.useMemo)((function(){return[{title:"Электроэнергетика и электротехника",path:"/enegetic",json:Jn},{title:"Программная инженерия",path:"/program_ingeneric",json:Gn}]}),[]);return(0,t.jsxs)("div",Zn({className:"aLQajU41"},{children:[(0,t.jsx)(w,{children:e.map((function(e){return(0,t.jsx)(v,{path:e.path,element:(0,t.jsx)(l.Suspense,Zn({fallback:(0,t.jsx)(on,{},void 0)},{children:(0,t.jsx)(Yn,{title:e.title,json:e.json},void 0)}),void 0)},e.title)}))},void 0),(0,t.jsx)("div",Zn({className:"mk_yfyKC"},{children:(0,t.jsx)("div",{children:e.map((function(e){return(0,t.jsx)(B,Zn({className:"aRsjz3Q2",to:e.path},{children:e.title}),e.title)}))},void 0)}),void 0)]}),void 0)};function tl(e){return tl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},tl(e)}function nl(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function ll(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}function rl(e,t,n){return t&&ll(e.prototype,t),n&&ll(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function sl(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function il(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&vn(e,t)}function ol(e,t){if(t&&("object"===tl(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return sl(e)}function al(e){return al=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},al(e)}function pl(e){if(Array.isArray(e))return e}function ul(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,l=new Array(t);n<t;n++)l[n]=e[n];return l}function cl(e,t){if(e){if("string"==typeof e)return ul(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ul(e,t):void 0}}function dl(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function fl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function gl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fl(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var hl={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){console&&console[e]&&console[e].apply(console,t)}},vl=new(function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};nl(this,e),this.init(t,n)}return rl(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||hl,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,l){return l&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,gl(gl({},{prefix:"".concat(this.prefix,":").concat(t,":")}),this.options))}}]),e}()),ml=function(){function e(){nl(this,e),this.observers={}}return rl(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];if(this.observers[e]){var r=[].concat(this.observers[e]);r.forEach((function(e){e.apply(void 0,n)}))}if(this.observers["*"]){var s=[].concat(this.observers["*"]);s.forEach((function(t){t.apply(t,[e].concat(n))}))}}}]),e}();function wl(){var e,t,n=new Promise((function(n,l){e=n,t=l}));return n.resolve=e,n.reject=t,n}function yl(e){return null==e?"":""+e}function bl(e,t,n){e.forEach((function(e){t[e]&&(n[e]=t[e])}))}function kl(e,t,n){function l(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function r(){return!e||"string"==typeof e}for(var s="string"!=typeof t?[].concat(t):t.split(".");s.length>1;){if(r())return{};var i=l(s.shift());!e[i]&&n&&(e[i]=new n),e=Object.prototype.hasOwnProperty.call(e,i)?e[i]:{}}return r()?{}:{obj:e,k:l(s.shift())}}function xl(e,t,n){var l=kl(e,t,Object);l.obj[l.k]=n}function jl(e,t){var n=kl(e,t),l=n.obj,r=n.k;if(l)return l[r]}function Sl(e,t,n){var l=jl(e,n);return void 0!==l?l:jl(t,n)}function Ol(e,t,n){for(var l in t)"__proto__"!==l&&"constructor"!==l&&(l in e?"string"==typeof e[l]||e[l]instanceof String||"string"==typeof t[l]||t[l]instanceof String?n&&(e[l]=t[l]):Ol(e[l],t[l],n):e[l]=t[l]);return e}function Cl(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var El={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function Pl(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return El[e]})):e}var Al="undefined"!=typeof window&&window.navigator&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,_l=[" ",",","?","!",";"];function Tl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function Ll(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Tl(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Tl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Nl(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(e){if(e[t])return e[t];for(var l=t.split(n),r=e,s=0;s<l.length;++s){if(!r)return;if("string"==typeof r[l[s]]&&s+1<l.length)return;if(void 0===r[l[s]]){for(var i=2,o=l.slice(s,s+i).join(n),a=r[o];void 0===a&&l.length>s+i;)i++,a=r[o=l.slice(s,s+i).join(n)];if(void 0===a)return;if(t.endsWith(o)){if("string"==typeof a)return a;if(o&&"string"==typeof a[o])return a[o]}var p=l.slice(s+i).join(n);return p?Nl(a,p,n):void 0}r=r[l[s]]}return r}}var Rl=function(e){il(r,e);var t,n,l=(t=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,l=al(t);if(n){var r=al(this).constructor;e=Reflect.construct(l,arguments,r)}else e=l.apply(this,arguments);return ol(this,e)});function r(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return nl(this,r),t=l.call(this),Al&&ml.call(sl(t)),t.data=e||{},t.options=n,void 0===t.options.keySeparator&&(t.options.keySeparator="."),void 0===t.options.ignoreJSONStructure&&(t.options.ignoreJSONStructure=!0),t}return rl(r,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=void 0!==l.keySeparator?l.keySeparator:this.options.keySeparator,s=void 0!==l.ignoreJSONStructure?l.ignoreJSONStructure:this.options.ignoreJSONStructure,i=[e,t];n&&"string"!=typeof n&&(i=i.concat(n)),n&&"string"==typeof n&&(i=i.concat(r?n.split(r):n)),e.indexOf(".")>-1&&(i=e.split("."));var o=jl(this.data,i);return o||!s||"string"!=typeof n?o:Nl(this.data&&this.data[e]&&this.data[e][t],n,r)}},{key:"addResource",value:function(e,t,n,l){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},s=this.options.keySeparator;void 0===s&&(s=".");var i=[e,t];n&&(i=i.concat(s?n.split(s):n)),e.indexOf(".")>-1&&(l=t,t=(i=e.split("."))[1]),this.addNamespaces(t),xl(this.data,i,l),r.silent||this.emit("added",e,t,n,l)}},{key:"addResources",value:function(e,t,n){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var r in n)"string"!=typeof n[r]&&"[object Array]"!==Object.prototype.toString.apply(n[r])||this.addResource(e,t,r,n[r],{silent:!0});l.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,l,r){var s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},i=[e,t];e.indexOf(".")>-1&&(l=n,n=t,t=(i=e.split("."))[1]),this.addNamespaces(t);var o=jl(this.data,i)||{};l?Ol(o,n,r):o=Ll(Ll({},o),n),xl(this.data,i,o),s.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?Ll(Ll({},{}),this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"hasLanguageSomeTranslations",value:function(e){var t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((function(e){return t[e]&&Object.keys(t[e]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),r}(ml),Il={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,l,r){var s=this;return e.forEach((function(e){s.processors[e]&&(t=s.processors[e].process(t,n,l,r))})),t}};function Dl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function Ml(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Dl(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Dl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Bl={},Fl=function(e){il(r,e);var t,n,l=(t=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,l=al(t);if(n){var r=al(this).constructor;e=Reflect.construct(l,arguments,r)}else e=l.apply(this,arguments);return ol(this,e)});function r(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return nl(this,r),t=l.call(this),Al&&ml.call(sl(t)),bl(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,sl(t)),t.options=n,void 0===t.options.keySeparator&&(t.options.keySeparator="."),t.logger=vl.create("translator"),t}return rl(r,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;var n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var l=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,r=t.ns||this.options.defaultNS||[],s=n&&e.indexOf(n)>-1,i=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,n){t=t||"",n=n||"";var l=_l.filter((function(e){return t.indexOf(e)<0&&n.indexOf(e)<0}));if(0===l.length)return!0;var r=new RegExp("(".concat(l.map((function(e){return"?"===e?"\\?":e})).join("|"),")")),s=!r.test(e);if(!s){var i=e.indexOf(n);i>0&&!r.test(e.substring(0,i))&&(s=!0)}return s}(e,n,l));if(s&&!i){var o=e.match(this.interpolator.nestingRegexp);if(o&&o.length>0)return{key:e,namespaces:r};var a=e.split(n);(n!==l||n===l&&this.options.ns.indexOf(a[0])>-1)&&(r=a.shift()),e=a.join(l)}return"string"==typeof r&&(r=[r]),{key:e,namespaces:r}}},{key:"translate",value:function(e,t,n){var l=this;if("object"!==tl(t)&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var s=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,i=this.extractFromKey(e[e.length-1],t),o=i.key,a=i.namespaces,p=a[a.length-1],u=t.lng||this.language,c=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(u&&"cimode"===u.toLowerCase()){if(c){var d=t.nsSeparator||this.options.nsSeparator;return p+d+o}return o}var f=this.resolve(e,t),g=f&&f.res,h=f&&f.usedKey||o,v=f&&f.exactUsedKey||o,m=Object.prototype.toString.apply(g),w=["[object Number]","[object Function]","[object RegExp]"],y=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,b=!this.i18nFormat||this.i18nFormat.handleAsObject,k="string"!=typeof g&&"boolean"!=typeof g&&"number"!=typeof g;if(b&&g&&k&&w.indexOf(m)<0&&("string"!=typeof y||"[object Array]"!==m)){if(!t.returnObjects&&!this.options.returnObjects)return this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(h,g,Ml(Ml({},t),{},{ns:a})):"key '".concat(o," (").concat(this.language,")' returned an object instead of string.");if(s){var x="[object Array]"===m,j=x?[]:{},S=x?v:h;for(var O in g)if(Object.prototype.hasOwnProperty.call(g,O)){var C="".concat(S).concat(s).concat(O);j[O]=this.translate(C,Ml(Ml({},t),{joinArrays:!1,ns:a})),j[O]===C&&(j[O]=g[O])}g=j}}else if(b&&"string"==typeof y&&"[object Array]"===m)(g=g.join(y))&&(g=this.extendTranslation(g,e,t,n));else{var E=!1,P=!1,A=void 0!==t.count&&"string"!=typeof t.count,_=r.hasDefaultValue(t),T=A?this.pluralResolver.getSuffix(u,t.count,t):"",L=t["defaultValue".concat(T)]||t.defaultValue;!this.isValidLookup(g)&&_&&(E=!0,g=L),this.isValidLookup(g)||(P=!0,g=o);var N=t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey,R=N&&P?void 0:g,I=_&&L!==g&&this.options.updateMissing;if(P||E||I){if(this.logger.log(I?"updateKey":"missingKey",u,p,o,I?L:g),s){var D=this.resolve(o,Ml(Ml({},t),{},{keySeparator:!1}));D&&D.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var M=[],B=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&B&&B[0])for(var F=0;F<B.length;F++)M.push(B[F]);else"all"===this.options.saveMissingTo?M=this.languageUtils.toResolveHierarchy(t.lng||this.language):M.push(t.lng||this.language);var q=function(e,n,r){var s=_&&r!==g?r:R;l.options.missingKeyHandler?l.options.missingKeyHandler(e,p,n,s,I,t):l.backendConnector&&l.backendConnector.saveMissing&&l.backendConnector.saveMissing(e,p,n,s,I,t),l.emit("missingKey",e,p,n,g)};this.options.saveMissing&&(this.options.saveMissingPlurals&&A?M.forEach((function(e){l.pluralResolver.getSuffixes(e,t).forEach((function(n){q([e],o+n,t["defaultValue".concat(n)]||L)}))})):q(M,o,L))}g=this.extendTranslation(g,e,t,f,n),P&&g===o&&this.options.appendNamespaceToMissingKey&&(g="".concat(p,":").concat(o)),(P||E)&&this.options.parseMissingKeyHandler&&(g="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(o,E?g:void 0):this.options.parseMissingKeyHandler(g))}return g}},{key:"extendTranslation",value:function(e,t,n,l,r){var s=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,n,l.usedLng,l.usedNS,l.usedKey,{resolved:l});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(Ml(Ml({},n),{interpolation:Ml(Ml({},this.options.interpolation),n.interpolation)}));var i,o="string"==typeof e&&(n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(o){var a=e.match(this.interpolator.nestingRegexp);i=a&&a.length}var p=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(p=Ml(Ml({},this.options.interpolation.defaultVariables),p)),e=this.interpolator.interpolate(e,p,n.lng||this.language,n),o){var u=e.match(this.interpolator.nestingRegexp);i<(u&&u.length)&&(n.nest=!1)}!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,l=new Array(e),i=0;i<e;i++)l[i]=arguments[i];return r&&r[0]===l[0]&&!n.context?(s.logger.warn("It seems you are nesting recursively key: ".concat(l[0]," in key: ").concat(t[0])),null):s.translate.apply(s,l.concat([t]))}),n)),n.interpolation&&this.interpolator.reset()}var c=n.postProcess||this.options.postProcess,d="string"==typeof c?[c]:c;return null!=e&&d&&d.length&&!1!==n.applyPostProcessor&&(e=Il.handle(d,e,t,this.options&&this.options.postProcessPassResolved?Ml({i18nResolved:l},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,l,r,s,i=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!i.isValidLookup(t)){var a=i.extractFromKey(e,o),p=a.key;n=p;var u=a.namespaces;i.options.fallbackNS&&(u=u.concat(i.options.fallbackNS));var c=void 0!==o.count&&"string"!=typeof o.count,d=c&&!o.ordinal&&0===o.count&&i.pluralResolver.shouldUseIntlApi(),f=void 0!==o.context&&("string"==typeof o.context||"number"==typeof o.context)&&""!==o.context,g=o.lngs?o.lngs:i.languageUtils.toResolveHierarchy(o.lng||i.language,o.fallbackLng);u.forEach((function(e){i.isValidLookup(t)||(s=e,!Bl["".concat(g[0],"-").concat(e)]&&i.utils&&i.utils.hasLoadedNamespace&&!i.utils.hasLoadedNamespace(s)&&(Bl["".concat(g[0],"-").concat(e)]=!0,i.logger.warn('key "'.concat(n,'" for languages "').concat(g.join(", "),'" won\'t get resolved as namespace "').concat(s,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),g.forEach((function(n){if(!i.isValidLookup(t)){r=n;var s,a=[p];if(i.i18nFormat&&i.i18nFormat.addLookupKeys)i.i18nFormat.addLookupKeys(a,p,n,e,o);else{var u;c&&(u=i.pluralResolver.getSuffix(n,o.count,o));var g="_zero";if(c&&(a.push(p+u),d&&a.push(p+g)),f){var h="".concat(p).concat(i.options.contextSeparator).concat(o.context);a.push(h),c&&(a.push(h+u),d&&a.push(h+g))}}for(;s=a.pop();)i.isValidLookup(t)||(l=s,t=i.getResource(n,e,s,o))}})))}))}})),{res:t,usedKey:n,exactUsedKey:l,usedLng:r,usedNS:s}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,l):this.resourceStore.getResource(e,t,n,l)}}],[{key:"hasDefaultValue",value:function(e){var t="defaultValue";for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&t===n.substring(0,t.length)&&void 0!==e[n])return!0;return!1}}]),r}(ml);function ql(e){return e.charAt(0).toUpperCase()+e.slice(1)}var zl=function(){function e(t){nl(this,e),this.options=t,this.supportedLngs=this.options.supportedLngs||!1,this.logger=vl.create("languageUtils")}return rl(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=ql(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=ql(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=ql(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isSupportedCode",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:"getBestMatchFromCodes",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var l=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(l)||(t=l)}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var l=n.getLanguagePartFromCode(e);if(n.isSupportedCode(l))return t=l;t=n.options.supportedLngs.find((function(e){if(0===e.indexOf(l))return e}))}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,l=this.getFallbackCodes(t||this.options.fallbackLng||[],e),r=[],s=function(e){e&&(n.isSupportedCode(e)?r.push(e):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&s(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&s(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&s(this.getLanguagePartFromCode(e))):"string"==typeof e&&s(this.formatLanguageCode(e)),l.forEach((function(e){r.indexOf(e)<0&&s(n.formatLanguageCode(e))})),r}}]),e}(),Ul=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],Hl={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}},Vl=["v1","v2","v3"],Ql={zero:0,one:1,two:2,few:3,many:4,other:5};function $l(){var e={};return Ul.forEach((function(t){t.lngs.forEach((function(n){e[n]={numbers:t.nr,plurals:Hl[t.fc]}}))})),e}var Xl=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};nl(this,e),this.languageUtils=t,this.options=n,this.logger=vl.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=$l()}return rl(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(e,{type:t.ordinal?"ordinal":"cardinal"})}catch(e){return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(e,t);return this.shouldUseIntlApi()?n&&n.resolvedOptions().pluralCategories.length>1:n&&n.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,n).map((function(e){return"".concat(t).concat(e)}))}},{key:"getSuffixes",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=this.getRule(e,n);return l?this.shouldUseIntlApi()?l.resolvedOptions().pluralCategories.sort((function(e,t){return Ql[e]-Ql[t]})).map((function(e){return"".concat(t.options.prepend).concat(e)})):l.numbers.map((function(l){return t.getSuffix(e,l,n)})):[]}},{key:"getSuffix",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=this.getRule(e,n);return l?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(l.select(t)):this.getSuffixRetroCompatible(l,t):(this.logger.warn("no plural rule found for: ".concat(e)),"")}},{key:"getSuffixRetroCompatible",value:function(e,t){var n=this,l=e.noAbs?e.plurals(t):e.plurals(Math.abs(t)),r=e.numbers[l];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===r?r="plural":1===r&&(r=""));var s=function(){return n.options.prepend&&r.toString()?n.options.prepend+r.toString():r.toString()};return"v1"===this.options.compatibilityJSON?1===r?"":"number"==typeof r?"_plural_".concat(r.toString()):s():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?s():this.options.prepend&&l.toString()?this.options.prepend+l.toString():l.toString()}},{key:"shouldUseIntlApi",value:function(){return!Vl.includes(this.options.compatibilityJSON)}}]),e}();function Wl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function Kl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Wl(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Wl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Yl=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};nl(this,e),this.logger=vl.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return rl(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:Pl,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?Cl(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?Cl(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?Cl(t.nestingPrefix):t.nestingPrefixEscaped||Cl("$t("),this.nestingSuffix=t.nestingSuffix?Cl(t.nestingSuffix):t.nestingSuffixEscaped||Cl(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,l){var r,s,i,o=this,a=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function p(e){return e.replace(/\$/g,"$$$$")}var u=function(e){if(e.indexOf(o.formatSeparator)<0){var r=Sl(t,a,e);return o.alwaysFormat?o.format(r,void 0,n,Kl(Kl(Kl({},l),t),{},{interpolationkey:e})):r}var s=e.split(o.formatSeparator),i=s.shift().trim(),p=s.join(o.formatSeparator).trim();return o.format(Sl(t,a,i),p,n,Kl(Kl(Kl({},l),t),{},{interpolationkey:i}))};this.resetRegExp();var c=l&&l.missingInterpolationHandler||this.options.missingInterpolationHandler,d=l&&l.interpolation&&void 0!==l.interpolation.skipOnVariables?l.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(e){return p(e)}},{regex:this.regexp,safeValue:function(e){return o.escapeValue?p(o.escape(e)):p(e)}}].forEach((function(t){for(i=0;r=t.regex.exec(e);){var n=r[1].trim();if(void 0===(s=u(n)))if("function"==typeof c){var a=c(e,r,l);s="string"==typeof a?a:""}else if(l&&l.hasOwnProperty(n))s="";else{if(d){s=r[0];continue}o.logger.warn("missed to pass in variable ".concat(n," for interpolating ").concat(e)),s=""}else"string"==typeof s||o.useRawValueToEscape||(s=yl(s));var p=t.safeValue(s);if(e=e.replace(r[0],p),d?(t.regex.lastIndex+=p.length,t.regex.lastIndex-=r[0].length):t.regex.lastIndex=0,++i>=o.maxReplaces)break}})),e}},{key:"nest",value:function(e,t){var n,l,r=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=Kl({},s);function o(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var l=e.split(new RegExp("".concat(n,"[ ]*{"))),r="{".concat(l[1]);e=l[0],r=(r=this.interpolate(r,i)).replace(/'/g,'"');try{i=JSON.parse(r),t&&(i=Kl(Kl({},t),i))}catch(t){return this.logger.warn("failed parsing options string in nesting for key ".concat(e),t),"".concat(e).concat(n).concat(r)}return delete i.defaultValue,e}for(i.applyPostProcessor=!1,delete i.defaultValue;n=this.nestingRegexp.exec(e);){var a=[],p=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var u=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=u.shift(),a=u,p=!0}if((l=t(o.call(this,n[1].trim(),i),i))&&n[0]===e&&"string"!=typeof l)return l;"string"!=typeof l&&(l=yl(l)),l||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),l=""),p&&(l=a.reduce((function(e,t){return r.format(e,t,s.lng,Kl(Kl({},s),{},{interpolationkey:n[1].trim()}))}),l.trim())),e=e.replace(n[0],l),this.regexp.lastIndex=0}return e}}]),e}();function Jl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function Gl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Jl(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Jl(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Zl=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};nl(this,e),this.logger=vl.create("formatter"),this.options=t,this.formats={number:function(e,t,n){return new Intl.NumberFormat(t,n).format(e)},currency:function(e,t,n){return new Intl.NumberFormat(t,Gl(Gl({},n),{},{style:"currency"})).format(e)},datetime:function(e,t,n){return new Intl.DateTimeFormat(t,Gl({},n)).format(e)},relativetime:function(e,t,n){return new Intl.RelativeTimeFormat(t,Gl({},n)).format(e,n.range||"day")},list:function(e,t,n){return new Intl.ListFormat(t,Gl({},n)).format(e)}},this.init(t)}return rl(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}},n=t.interpolation;this.formatSeparator=n.formatSeparator?n.formatSeparator:n.formatSeparator||","}},{key:"add",value:function(e,t){this.formats[e.toLowerCase().trim()]=t}},{key:"format",value:function(e,t,n,l){var r=this,s=t.split(this.formatSeparator).reduce((function(e,t){var s=function(e){var t=e.toLowerCase().trim(),n={};if(e.indexOf("(")>-1){var l=e.split("(");t=l[0].toLowerCase().trim();var r=l[1].substring(0,l[1].length-1);"currency"===t&&r.indexOf(":")<0?n.currency||(n.currency=r.trim()):"relativetime"===t&&r.indexOf(":")<0?n.range||(n.range=r.trim()):r.split(";").forEach((function(e){if(e){var t=function(e){return pl(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||cl(e)||dl()}(e.split(":")),l=t[0],r=t.slice(1).join(":");"false"===r.trim()&&(n[l.trim()]=!1),"true"===r.trim()&&(n[l.trim()]=!0),isNaN(r.trim())||(n[l.trim()]=parseInt(r.trim(),10)),n[l.trim()]||(n[l.trim()]=r.trim())}}))}return{formatName:t,formatOptions:n}}(t),i=s.formatName,o=s.formatOptions;if(r.formats[i]){var a=e;try{var p=l&&l.formatParams&&l.formatParams[l.interpolationkey]||{},u=p.locale||p.lng||l.locale||l.lng||n;a=r.formats[i](e,u,Gl(Gl(Gl({},o),l),p))}catch(e){r.logger.warn(e)}return a}return r.logger.warn("there was no format function for ".concat(i)),e}),e);return s}}]),e}();function er(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function tr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?er(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):er(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var nr=function(e){il(r,e);var t,n,l=(t=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,l=al(t);if(n){var r=al(this).constructor;e=Reflect.construct(l,arguments,r)}else e=l.apply(this,arguments);return ol(this,e)});function r(e,t,n){var s,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return nl(this,r),s=l.call(this),Al&&ml.call(sl(s)),s.backend=e,s.store=t,s.services=n,s.languageUtils=n.languageUtils,s.options=i,s.logger=vl.create("backendConnector"),s.state={},s.queue=[],s.backend&&s.backend.init&&s.backend.init(n,i.backend,i),s}return rl(r,[{key:"queueLoad",value:function(e,t,n,l){var r=this,s=[],i=[],o=[],a=[];return e.forEach((function(e){var l=!0;t.forEach((function(t){var o="".concat(e,"|").concat(t);!n.reload&&r.store.hasResourceBundle(e,t)?r.state[o]=2:r.state[o]<0||(1===r.state[o]?i.indexOf(o)<0&&i.push(o):(r.state[o]=1,l=!1,i.indexOf(o)<0&&i.push(o),s.indexOf(o)<0&&s.push(o),a.indexOf(t)<0&&a.push(t)))})),l||o.push(e)})),(s.length||i.length)&&this.queue.push({pending:i,loaded:{},errors:[],callback:l}),{toLoad:s,pending:i,toLoadLanguages:o,toLoadNamespaces:a}}},{key:"loaded",value:function(e,t,n){var l=e.split("|"),r=l[0],s=l[1];t&&this.emit("failedLoading",r,s,t),n&&this.store.addResourceBundle(r,s,n),this.state[e]=t?-1:2;var i={};this.queue.forEach((function(n){!function(e,t,n,l){var r=kl(e,t,Object),s=r.obj,i=r.k;s[i]=s[i]||[],s[i].push(n)}(n.loaded,[r],s),function(e,t){for(var n=e.indexOf(t);-1!==n;)e.splice(n,1),n=e.indexOf(t)}(n.pending,e),t&&n.errors.push(t),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach((function(e){i[e]||(i[e]=[]),n.loaded[e].length&&n.loaded[e].forEach((function(t){i[e].indexOf(t)<0&&i[e].push(t)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",i),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var l=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:350,i=arguments.length>5?arguments[5]:void 0;return e.length?this.backend[n](e,t,(function(o,a){o&&a&&r<5?setTimeout((function(){l.read.call(l,e,t,n,r+1,2*s,i)}),s):i(o,a)})):i(null,{})}},{key:"prepareLoading",value:function(e,t){var n=this,l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),r&&r();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var s=this.queueLoad(e,t,l,r);if(!s.toLoad.length)return s.pending.length||r(),null;s.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",l=e.split("|"),r=l[0],s=l[1];this.read(r,s,"read",void 0,void 0,(function(l,i){l&&t.logger.warn("".concat(n,"loading namespace ").concat(s," for language ").concat(r," failed"),l),!l&&i&&t.logger.log("".concat(n,"loaded namespace ").concat(s," for language ").concat(r),i),t.loaded(e,l,i)}))}},{key:"saveMissing",value:function(e,t,n,l,r){var s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t)?this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(t,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):null!=n&&""!==n&&(this.backend&&this.backend.create&&this.backend.create(e,t,n,l,null,tr(tr({},s),{},{isUpdate:r})),e&&e[0]&&this.store.addResource(e[0],t,n,l))}}]),r}(ml);function lr(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===tl(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===tl(e[2])||"object"===tl(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n,l){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function rr(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function sr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function ir(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?sr(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):sr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function or(){}function ar(e){Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(t){"function"==typeof e[t]&&(e[t]=e[t].bind(e))}))}var pr=function(e){il(r,e);var t,n,l=(t=r,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,l=al(t);if(n){var r=al(this).constructor;e=Reflect.construct(l,arguments,r)}else e=l.apply(this,arguments);return ol(this,e)});function r(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;if(nl(this,r),e=l.call(this),Al&&ml.call(sl(e)),e.options=rr(t),e.services={},e.logger=vl,e.modules={external:[]},ar(sl(e)),n&&!e.isInitialized&&!t.isClone){if(!e.options.initImmediate)return e.init(t,n),ol(e,sl(e));setTimeout((function(){e.init(t,n)}),0)}return e}return rl(r,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(n=t,t={}),!t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));var l=lr();function r(e){return e?"function"==typeof e?new e:e:null}if(this.options=ir(ir(ir({},l),this.options),rr(t)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=ir(ir({},l.interpolation),this.options.interpolation)),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){var s;this.modules.logger?vl.init(r(this.modules.logger),this.options):vl.init(null,this.options),this.modules.formatter?s=this.modules.formatter:"undefined"!=typeof Intl&&(s=Zl);var i=new zl(this.options);this.store=new Rl(this.options.resources,this.options);var o=this.services;o.logger=vl,o.resourceStore=this.store,o.languageUtils=i,o.pluralResolver=new Xl(i,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!s||this.options.interpolation.format&&this.options.interpolation.format!==l.interpolation.format||(o.formatter=r(s),o.formatter.init(o,this.options),this.options.interpolation.format=o.formatter.format.bind(o.formatter)),o.interpolator=new Yl(this.options),o.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},o.backendConnector=new nr(r(this.modules.backend),o.resourceStore,o,this.options),o.backendConnector.on("*",(function(t){for(var n=arguments.length,l=new Array(n>1?n-1:0),r=1;r<n;r++)l[r-1]=arguments[r];e.emit.apply(e,[t].concat(l))})),this.modules.languageDetector&&(o.languageDetector=r(this.modules.languageDetector),o.languageDetector.init(o,this.options.detection,this.options)),this.modules.i18nFormat&&(o.i18nFormat=r(this.modules.i18nFormat),o.i18nFormat.init&&o.i18nFormat.init(this)),this.translator=new Fl(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,l=new Array(n>1?n-1:0),r=1;r<n;r++)l[r-1]=arguments[r];e.emit.apply(e,[t].concat(l))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}if(this.format=this.options.interpolation.format,n||(n=or),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var a=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);a.length>0&&"dev"!==a[0]&&(this.options.lng=a[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");var p=["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"];p.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}}));var u=["addResource","addResources","addResourceBundle","removeResourceBundle"];u.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments),e}}));var c=wl(),d=function(){var t=function(t,l){e.isInitialized&&!e.initializedStoreOnce&&e.logger.warn("init: i18next is already initialized. You should call init just once!"),e.isInitialized=!0,e.options.isClone||e.logger.log("initialized",e.options),e.emit("initialized",e.options),c.resolve(l),n(t,l)};if(e.languages&&"v1"!==e.options.compatibilityAPI&&!e.isInitialized)return t(null,e.t.bind(e));e.changeLanguage(e.options.lng,t)};return this.options.resources||!this.options.initImmediate?d():setTimeout(d,0),c}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:or,l=n,r="string"==typeof e?e:this.language;if("function"==typeof e&&(l=e),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return l();var s=[],i=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){s.indexOf(e)<0&&s.push(e)}))};if(r)i(r);else{var o=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);o.forEach((function(e){return i(e)}))}this.options.preload&&this.options.preload.forEach((function(e){return i(e)})),this.services.backendConnector.load(s,this.options.ns,l)}else l(null)}},{key:"reloadResources",value:function(e,t,n){var l=wl();return e||(e=this.languages),t||(t=this.options.ns),n||(n=or),this.services.backendConnector.reload(e,t,(function(e){l.resolve(),n(e)})),l}},{key:"use",value:function(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&Il.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var l=wl();this.emit("languageChanging",e);var r=function(e){if(n.language=e,n.languages=n.services.languageUtils.toResolveHierarchy(e),n.resolvedLanguage=void 0,!(["cimode","dev"].indexOf(e)>-1))for(var t=0;t<n.languages.length;t++){var l=n.languages[t];if(!(["cimode","dev"].indexOf(l)>-1)&&n.store.hasLanguageSomeTranslations(l)){n.resolvedLanguage=l;break}}},s=function(s){e||s||!n.services.languageDetector||(s=[]);var i="string"==typeof s?s:n.services.languageUtils.getBestMatchFromCodes(s);i&&(n.language||r(i),n.translator.language||n.translator.changeLanguage(i),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(i)),n.loadResources(i,(function(e){!function(e,s){s?(r(s),n.translator.changeLanguage(s),n.isLanguageChangingTo=void 0,n.emit("languageChanged",s),n.logger.log("languageChanged",s)):n.isLanguageChangingTo=void 0,l.resolve((function(){return n.t.apply(n,arguments)})),t&&t(e,(function(){return n.t.apply(n,arguments)}))}(e,i)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(s):s(e):s(this.services.languageDetector.detect()),l}},{key:"getFixedT",value:function(e,t,n){var l=this,r=function e(t,r){var s;if("object"!==tl(r)){for(var i=arguments.length,o=new Array(i>2?i-2:0),a=2;a<i;a++)o[a-2]=arguments[a];s=l.options.overloadTranslationOptionHandler([t,r].concat(o))}else s=ir({},r);s.lng=s.lng||e.lng,s.lngs=s.lngs||e.lngs,s.ns=s.ns||e.ns;var p=l.options.keySeparator||".",u=n?"".concat(n).concat(p).concat(t):t;return l.t(u,s)};return"string"==typeof e?r.lng=e:r.lngs=e,r.ns=t,r.keyPrefix=n,r}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var l=this.resolvedLanguage||this.languages[0],r=!!this.options&&this.options.fallbackLng,s=this.languages[this.languages.length-1];if("cimode"===l.toLowerCase())return!0;var i=function(e,n){var l=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===l||2===l};if(n.precheck){var o=n.precheck(this,i);if(void 0!==o)return o}return!!this.hasResourceBundle(l,e)||!this.services.backendConnector.backend||!(!i(l,e)||r&&!i(s,e))}},{key:"loadNamespaces",value:function(e,t){var n=this,l=wl();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){l.resolve(),t&&t(e)})),l):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=wl();"string"==typeof e&&(e=[e]);var l=this.options.preload||[],r=e.filter((function(e){return l.indexOf(e)<0}));return r.length?(this.options.preload=l.concat(r),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){return e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),e?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr":"rtl"}},{key:"cloneInstance",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:or,l=ir(ir(ir({},this.options),t),{isClone:!0}),s=new r(l),i=["store","services","language"];return i.forEach((function(t){s[t]=e[t]})),s.services=ir({},this.services),s.services.utils={hasLoadedNamespace:s.hasLoadedNamespace.bind(s)},s.translator=new Fl(s.services,s.options),s.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),l=1;l<t;l++)n[l-1]=arguments[l];s.emit.apply(s,[e].concat(n))})),s.init(l,n),s.translator.options=s.options,s.translator.backendConnector.services.utils={hasLoadedNamespace:s.hasLoadedNamespace.bind(s)},s}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),r}(ml);et(pr,"createInstance",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;return new pr(e,t)}));var ur=pr.createInstance();ur.createInstance=pr.createInstance,ur.createInstance,ur.init,ur.loadResources,ur.reloadResources,ur.use,ur.changeLanguage,ur.getFixedT,ur.t,ur.exists,ur.setDefaultNamespace,ur.hasLoadedNamespace,ur.loadNamespaces,ur.loadLanguages;const cr=ur;function dr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function fr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dr(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var gr,hr={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transWrapTextNodes:"",transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0},vr=l.createContext();function mr(){return hr}var wr=function(){function e(){nl(this,e),this.usedNamespaces={}}return rl(e,[{key:"addUsedNamespaces",value:function(e){var t=this;e.forEach((function(e){t.usedNamespaces[e]||(t.usedNamespaces[e]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),e}();function yr(){return gr}var br={type:"3rdParty",init:function(e){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};hr=fr(fr({},hr),e)}(e.options.react),function(e){gr=e}(e)}};function kr(e){return kr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kr(e)}var xr=[],jr=xr.forEach,Sr=xr.slice;function Or(e){return jr.call(Sr.call(arguments,1),(function(t){if(t)for(var n in t)void 0===e[n]&&(e[n]=t[n])})),e}function Cr(){return"function"==typeof XMLHttpRequest||"object"===("undefined"==typeof XMLHttpRequest?"undefined":kr(XMLHttpRequest))}var Er,Pr,Ar,_r=r(154),Tr=r.t(_r,2);function Lr(e){return Lr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lr(e)}"function"==typeof fetch&&("undefined"!=typeof global&&global.fetch?Er=global.fetch:"undefined"!=typeof window&&window.fetch&&(Er=window.fetch)),Cr&&("undefined"!=typeof global&&global.XMLHttpRequest?Pr=global.XMLHttpRequest:"undefined"!=typeof window&&window.XMLHttpRequest&&(Pr=window.XMLHttpRequest)),"function"==typeof ActiveXObject&&("undefined"!=typeof global&&global.ActiveXObject?Ar=global.ActiveXObject:"undefined"!=typeof window&&window.ActiveXObject&&(Ar=window.ActiveXObject)),Er||!Tr||Pr||Ar||(Er=_r||Tr),"function"!=typeof Er&&(Er=void 0);var Nr=function(e,t){if(t&&"object"===Lr(t)){var n="";for(var l in t)n+="&"+encodeURIComponent(l)+"="+encodeURIComponent(t[l]);if(!n)return e;e=e+(-1!==e.indexOf("?")?"&":"?")+n.slice(1)}return e};const Rr=function(e,t,n,l){return"function"==typeof n&&(l=n,n=void 0),l=l||function(){},Er?function(e,t,n,l){e.queryStringParams&&(t=Nr(t,e.queryStringParams));var r=Or({},"function"==typeof e.customHeaders?e.customHeaders():e.customHeaders);n&&(r["Content-Type"]="application/json"),Er(t,Or({method:n?"POST":"GET",body:n?e.stringify(n):void 0,headers:r},"function"==typeof e.requestOptions?e.requestOptions(n):e.requestOptions)).then((function(e){if(!e.ok)return l(e.statusText||"Error",{status:e.status});e.text().then((function(t){l(null,{status:e.status,data:t})})).catch(l)})).catch(l)}(e,t,n,l):Cr||"function"==typeof ActiveXObject?function(e,t,n,l){n&&"object"===Lr(n)&&(n=Nr("",n).slice(1)),e.queryStringParams&&(t=Nr(t,e.queryStringParams));try{var r;(r=Pr?new Pr:new Ar("MSXML2.XMLHTTP.3.0")).open(n?"POST":"GET",t,1),e.crossDomain||r.setRequestHeader("X-Requested-With","XMLHttpRequest"),r.withCredentials=!!e.withCredentials,n&&r.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),r.overrideMimeType&&r.overrideMimeType("application/json");var s=e.customHeaders;if(s="function"==typeof s?s():s)for(var i in s)r.setRequestHeader(i,s[i]);r.onreadystatechange=function(){r.readyState>3&&l(r.status>=400?r.statusText:null,{status:r.status,data:r.responseText})},r.send(n)}catch(e){console&&console.log(e)}}(e,t,n,l):void 0};function Ir(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Dr(e,t){for(var n=0;n<t.length;n++){var l=t[n];l.enumerable=l.enumerable||!1,l.configurable=!0,"value"in l&&(l.writable=!0),Object.defineProperty(e,l.key,l)}}var Mr=function(){return{loadPath:"/locales/{{lng}}/{{ns}}.json",addPath:"/locales/add/{{lng}}/{{ns}}",allowMultiLoading:!1,parse:function(e){return JSON.parse(e)},stringify:JSON.stringify,parsePayload:function(e,t,n){return function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,n||"")},request:Rr,reloadInterval:"undefined"==typeof window&&36e5,customHeaders:{},queryStringParams:{},crossDomain:!1,withCredentials:!1,overrideMimeType:!1,requestOptions:{mode:"cors",credentials:"same-origin",cache:"default"}}},Br=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Ir(this,e),this.services=t,this.options=n,this.allOptions=l,this.type="backend",this.init(t,n,l)}var t,n;return t=e,n=[{key:"init",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.services=e,this.options=Or(n,this.options||{},Mr()),this.allOptions=l,this.services&&this.options.reloadInterval&&setInterval((function(){return t.reload()}),this.options.reloadInterval)}},{key:"readMulti",value:function(e,t,n){this._readAny(e,e,t,t,n)}},{key:"read",value:function(e,t,n){this._readAny([e],e,[t],t,n)}},{key:"_readAny",value:function(e,t,n,l,r){var s,i=this,o=this.options.loadPath;"function"==typeof this.options.loadPath&&(o=this.options.loadPath(e,n)),(o=function(e){return!!e&&"function"==typeof e.then}(s=o)?s:Promise.resolve(s)).then((function(s){var o=i.services.interpolator.interpolate(s,{lng:e.join("+"),ns:n.join("+")});i.loadUrl(o,r,t,l)}))}},{key:"loadUrl",value:function(e,t,n,l){var r=this;this.options.request(this.options,e,void 0,(function(s,i){if(i&&(i.status>=500&&i.status<600||!i.status))return t("failed loading "+e+"; status code: "+i.status,!0);if(i&&i.status>=400&&i.status<500)return t("failed loading "+e+"; status code: "+i.status,!1);if(!i&&s&&s.message&&s.message.indexOf("Failed to fetch")>-1)return t("failed loading "+e+": "+s.message,!0);if(s)return t(s,!1);var o,a;try{o="string"==typeof i.data?r.options.parse(i.data,n,l):i.data}catch(t){a="failed parsing "+e+" to json"}if(a)return t(a,!1);t(null,o)}))}},{key:"create",value:function(e,t,n,l,r){var s=this;if(this.options.addPath){"string"==typeof e&&(e=[e]);var i=this.options.parsePayload(t,n,l),o=0,a=[],p=[];e.forEach((function(n){var l=s.options.addPath;"function"==typeof s.options.addPath&&(l=s.options.addPath(n,t));var u=s.services.interpolator.interpolate(l,{lng:n,ns:t});s.options.request(s.options,u,i,(function(t,n){o+=1,a.push(t),p.push(n),o===e.length&&r&&r(a,p)}))}))}}},{key:"reload",value:function(){var e=this,t=this.services,n=t.backendConnector,l=t.languageUtils,r=t.logger,s=n.language;if(!s||"cimode"!==s.toLowerCase()){var i=[],o=function(e){l.toResolveHierarchy(e).forEach((function(e){i.indexOf(e)<0&&i.push(e)}))};o(s),this.allOptions.preload&&this.allOptions.preload.forEach((function(e){return o(e)})),i.forEach((function(t){e.allOptions.ns.forEach((function(e){n.read(t,e,"read",null,null,(function(l,s){l&&r.warn("loading namespace ".concat(e," for language ").concat(t," failed"),l),!l&&s&&r.log("loaded namespace ".concat(e," for language ").concat(t),s),n.loaded("".concat(t,"|").concat(e),l,s)}))}))}))}}}],n&&Dr(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();Br.type="backend";const Fr=Br;var qr=[],zr=qr.forEach,Ur=qr.slice;function Hr(e){return zr.call(Ur.call(arguments,1),(function(t){if(t)for(var n in t)void 0===e[n]&&(e[n]=t[n])})),e}var Vr=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/,Qr=function(e,t,n){var l=n||{};l.path=l.path||"/";var r=e+"="+encodeURIComponent(t);if(l.maxAge>0){var s=l.maxAge-0;if(isNaN(s))throw new Error("maxAge should be a Number");r+="; Max-Age="+Math.floor(s)}if(l.domain){if(!Vr.test(l.domain))throw new TypeError("option domain is invalid");r+="; Domain="+l.domain}if(l.path){if(!Vr.test(l.path))throw new TypeError("option path is invalid");r+="; Path="+l.path}if(l.expires){if("function"!=typeof l.expires.toUTCString)throw new TypeError("option expires is invalid");r+="; Expires="+l.expires.toUTCString()}if(l.httpOnly&&(r+="; HttpOnly"),l.secure&&(r+="; Secure"),l.sameSite)switch("string"==typeof l.sameSite?l.sameSite.toLowerCase():l.sameSite){case!0:r+="; SameSite=Strict";break;case"lax":r+="; SameSite=Lax";break;case"strict":r+="; SameSite=Strict";break;case"none":r+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}return r},$r={name:"cookie",lookup:function(e){var t;if(e.lookupCookie&&"undefined"!=typeof document){var n=function(e){for(var t=e+"=",n=document.cookie.split(";"),l=0;l<n.length;l++){for(var r=n[l];" "===r.charAt(0);)r=r.substring(1,r.length);if(0===r.indexOf(t))return r.substring(t.length,r.length)}return null}(e.lookupCookie);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupCookie&&"undefined"!=typeof document&&function(e,t,n,l){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{path:"/",sameSite:"strict"};n&&(r.expires=new Date,r.expires.setTime(r.expires.getTime()+60*n*1e3)),l&&(r.domain=l),document.cookie=Qr(e,encodeURIComponent(t),r)}(t.lookupCookie,e,t.cookieMinutes,t.cookieDomain,t.cookieOptions)}},Xr={name:"querystring",lookup:function(e){var t;if("undefined"!=typeof window)for(var n=window.location.search.substring(1).split("&"),l=0;l<n.length;l++){var r=n[l].indexOf("=");r>0&&n[l].substring(0,r)===e.lookupQuerystring&&(t=n[l].substring(r+1))}return t}},Wr=null,Kr=function(){if(null!==Wr)return Wr;try{Wr="undefined"!==window&&null!==window.localStorage;var e="i18next.translate.boo";window.localStorage.setItem(e,"foo"),window.localStorage.removeItem(e)}catch(e){Wr=!1}return Wr},Yr={name:"localStorage",lookup:function(e){var t;if(e.lookupLocalStorage&&Kr()){var n=window.localStorage.getItem(e.lookupLocalStorage);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupLocalStorage&&Kr()&&window.localStorage.setItem(t.lookupLocalStorage,e)}},Jr=null,Gr=function(){if(null!==Jr)return Jr;try{Jr="undefined"!==window&&null!==window.sessionStorage;var e="i18next.translate.boo";window.sessionStorage.setItem(e,"foo"),window.sessionStorage.removeItem(e)}catch(e){Jr=!1}return Jr},Zr={name:"sessionStorage",lookup:function(e){var t;if(e.lookupSessionStorage&&Gr()){var n=window.sessionStorage.getItem(e.lookupSessionStorage);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupSessionStorage&&Gr()&&window.sessionStorage.setItem(t.lookupSessionStorage,e)}},es={name:"navigator",lookup:function(e){var t=[];if("undefined"!=typeof navigator){if(navigator.languages)for(var n=0;n<navigator.languages.length;n++)t.push(navigator.languages[n]);navigator.userLanguage&&t.push(navigator.userLanguage),navigator.language&&t.push(navigator.language)}return t.length>0?t:void 0}},ts={name:"htmlTag",lookup:function(e){var t,n=e.htmlTag||("undefined"!=typeof document?document.documentElement:null);return n&&"function"==typeof n.getAttribute&&(t=n.getAttribute("lang")),t}},ns={name:"path",lookup:function(e){var t;if("undefined"!=typeof window){var n=window.location.pathname.match(/\/([a-zA-Z-]*)/g);if(n instanceof Array)if("number"==typeof e.lookupFromPathIndex){if("string"!=typeof n[e.lookupFromPathIndex])return;t=n[e.lookupFromPathIndex].replace("/","")}else t=n[0].replace("/","")}return t}},ls={name:"subdomain",lookup:function(e){var t;if("undefined"!=typeof window){var n=window.location.href.match(/(?:http[s]*\:\/\/)*(.*?)\.(?=[^\/]*\..{2,5})/gi);n instanceof Array&&(t="number"==typeof e.lookupFromSubdomainIndex?n[e.lookupFromSubdomainIndex].replace("http://","").replace("https://","").replace(".",""):n[0].replace("http://","").replace("https://","").replace(".",""))}return t}},rs=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};nl(this,e),this.type="languageDetector",this.detectors={},this.init(t,n)}return rl(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.services=e,this.options=Hr(t,this.options||{},{order:["querystring","cookie","localStorage","sessionStorage","navigator","htmlTag"],lookupQuerystring:"lng",lookupCookie:"i18next",lookupLocalStorage:"i18nextLng",lookupSessionStorage:"i18nextLng",caches:["localStorage"],excludeCacheFor:["cimode"]}),this.options.lookupFromUrlIndex&&(this.options.lookupFromPathIndex=this.options.lookupFromUrlIndex),this.i18nOptions=n,this.addDetector($r),this.addDetector(Xr),this.addDetector(Yr),this.addDetector(Zr),this.addDetector(es),this.addDetector(ts),this.addDetector(ns),this.addDetector(ls)}},{key:"addDetector",value:function(e){this.detectors[e.name]=e}},{key:"detect",value:function(e){var t=this;e||(e=this.options.order);var n=[];return e.forEach((function(e){if(t.detectors[e]){var l=t.detectors[e].lookup(t.options);l&&"string"==typeof l&&(l=[l]),l&&(n=n.concat(l))}})),this.services.languageUtils.getBestMatchFromCodes?n:n.length>0?n[0]:null}},{key:"cacheUserLanguage",value:function(e,t){var n=this;t||(t=this.options.caches),t&&(this.options.excludeCacheFor&&this.options.excludeCacheFor.indexOf(e)>-1||t.forEach((function(t){n.detectors[t]&&n.detectors[t].cacheUserLanguage(e,n.options)})))}}]),e}();function ss(e,t){return pl(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var l,r,s=[],i=!0,o=!1;try{for(n=n.call(e);!(i=(l=n.next()).done)&&(s.push(l.value),!t||s.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{i||null==n.return||n.return()}finally{if(o)throw r}}return s}}(e,t)||cl(e,t)||dl()}function is(){if(console&&console.warn){for(var e,t=arguments.length,n=new Array(t),l=0;l<t;l++)n[l]=arguments[l];"string"==typeof n[0]&&(n[0]="react-i18next:: ".concat(n[0])),(e=console).warn.apply(e,n)}}rs.type="languageDetector",cr.use(Fr).use(rs).use(br).init({fallbackLng:"en",debug:!1,interpolation:{escapeValue:!1},backend:{loadPath:"/locales/{{lng}}/{{ns}}.json"}});var os={};function as(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];"string"==typeof t[0]&&os[t[0]]||("string"==typeof t[0]&&(os[t[0]]=new Date),is.apply(void 0,t))}function ps(e,t,n){e.loadNamespaces(t,(function(){e.isInitialized?n():e.on("initialized",(function t(){setTimeout((function(){e.off("initialized",t)}),0),n()}))}))}function us(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!t.languages||!t.languages.length)return as("i18n.languages were undefined or empty",t.languages),!0;var l=t.languages[0],r=!!t.options&&t.options.fallbackLng,s=t.languages[t.languages.length-1];if("cimode"===l.toLowerCase())return!0;var i=function(e,n){var l=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===l||2===l};return!(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&t.services.backendConnector.backend&&t.isLanguageChangingTo&&!i(t.isLanguageChangingTo,e)||!t.hasResourceBundle(l,e)&&t.services.backendConnector.backend&&(!i(l,e)||r&&!i(s,e)))}function cs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function ds(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?cs(Object(n),!0).forEach((function(t){et(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):cs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var fs,gs=function(){return gs=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},gs.apply(this,arguments)},hs=function(e){var n=e.className,r=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.i18n,r=(0,l.useContext)(vr)||{},s=r.i18n,i=r.defaultNS,o=n||s||yr();if(o&&!o.reportNamespaces&&(o.reportNamespaces=new wr),!o){as("You will need to pass in an i18next instance by using initReactI18next");var a=function(e){return Array.isArray(e)?e[e.length-1]:e},p=[a,{},!1];return p.t=a,p.i18n={},p.ready=!1,p}o.options.react&&void 0!==o.options.react.wait&&as("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");var u=ds(ds(ds({},mr()),o.options.react),t),c=u.useSuspense,d=u.keyPrefix,f=e||i||o.options&&o.options.defaultNS;f="string"==typeof f?[f]:f||["translation"],o.reportNamespaces.addUsedNamespaces&&o.reportNamespaces.addUsedNamespaces(f);var g=(o.isInitialized||o.initializedStoreOnce)&&f.every((function(e){return us(e,o,u)}));function h(){return o.getFixedT(null,"fallback"===u.nsMode?f:f[0],d)}var v=ss((0,l.useState)(h),2),m=v[0],w=v[1],y=(0,l.useRef)(!0);(0,l.useEffect)((function(){var e=u.bindI18n,t=u.bindI18nStore;function n(){y.current&&w(h)}return y.current=!0,g||c||ps(o,f,(function(){y.current&&w(h)})),e&&o&&o.on(e,n),t&&o&&o.store.on(t,n),function(){y.current=!1,e&&o&&e.split(" ").forEach((function(e){return o.off(e,n)})),t&&o&&t.split(" ").forEach((function(e){return o.store.off(e,n)}))}}),[o,f.join()]);var b=(0,l.useRef)(!0);(0,l.useEffect)((function(){y.current&&!b.current&&w(h),b.current=!1}),[o]);var k=[m,o,g];if(k.t=m,k.i18n=o,k.ready=g,g)return k;if(!g&&!c)return k;throw new Promise((function(e){ps(o,f,(function(){e()}))}))}().t;return(0,t.jsxs)("div",gs({className:Rt("df00YLS1",{},[n])},{children:[(0,t.jsx)("p",{children:r("Произошла непредвиденная ошибка")},void 0),(0,t.jsx)(Ft,gs({onClick:function(){location.reload()}},{children:r("Обновить страницу")}),void 0)]}),void 0)},vs=(fs=function(e,t){return fs=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},fs(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}fs(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),ms=function(){return ms=Object.assign||function(e){for(var t,n=1,l=arguments.length;n<l;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},ms.apply(this,arguments)};const ws=function(e){function n(t){var n=e.call(this,t)||this;return n.state={hasError:!1},n}return vs(n,e),n.getDerivedStateFromError=function(e){return{hasError:!0}},n.prototype.componentDidCatch=function(e,t){console.log(e,t)},n.prototype.render=function(){var e=this.state.hasError,n=this.props.children;return e?(0,t.jsx)(l.Suspense,ms({fallback:""},{children:(0,t.jsx)(hs,{},void 0)}),void 0):n},n}(l.Component);(0,n.render)((0,t.jsx)((function(e){var n=e.children,l=function(e,t){var n,l,r,s=Yt(Yt({},t),{counter:Lt,user:Wt}),i=(n=Kt({},s),l=pt(n),r=[],{getReducerMap:function(){return n},reduce:function(e,t){return r.length>0&&(e=Kt({},e),r.forEach((function(t){delete e[t]})),r=[]),l(e,t)},add:function(e,t){e&&!n[e]&&(n[e]=t,l=pt(n))},remove:function(e){e&&n[e]&&(delete n[e],r.push(e),l=pt(n))}}),o=Ct({reducer:i.reduce,devTools:!1,preloadedState:e});return o.reducerManager=i,o}(e.initialState,e.asyncReducers);return(0,t.jsx)(K,Jt({store:l},{children:n}),void 0)}),{children:(0,t.jsx)((function(t){let{basename:n,children:r,window:c}=t,d=(0,l.useRef)();null==d.current&&(d.current=function(t){void 0===t&&(t={});var n=t.window,l=void 0===n?document.defaultView:n,r=l.history;function c(){var e=l.location,t=e.pathname,n=e.search,s=e.hash,i=r.state||{};return[i.idx,{pathname:t,search:n,hash:s,state:i.usr||null,key:i.key||"default"}]}var d=null;l.addEventListener("popstate",(function(){if(d)w.call(d),d=null;else{var t=e.Pop,n=c(),l=n[0],r=n[1];if(w.length){if(null!=l){var s=h-l;s&&(d={action:t,location:r,retry:function(){S(-1*s)}},S(s))}}else j(t)}}));var f=e.Pop,g=c(),h=g[0],v=g[1],m=a(),w=a();function y(e){return"string"==typeof e?e:p(e)}function b(e,t){return void 0===t&&(t=null),s({pathname:v.pathname,hash:"",search:""},"string"==typeof e?u(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function k(e,t){return[{usr:e.state,key:e.key,idx:t},y(e)]}function x(e,t,n){return!w.length||(w.call({action:e,location:t,retry:n}),!1)}function j(e){f=e;var t=c();h=t[0],v=t[1],m.call({action:f,location:v})}function S(e){r.go(e)}null==h&&(h=0,r.replaceState(s({},r.state,{idx:h}),""));var O={get action(){return f},get location(){return v},createHref:y,push:function t(n,s){var i=e.Push,o=b(n,s);if(x(i,o,(function(){t(n,s)}))){var a=k(o,h+1),p=a[0],u=a[1];try{r.pushState(p,"",u)}catch(e){l.location.assign(u)}j(i)}},replace:function t(n,l){var s=e.Replace,i=b(n,l);if(x(s,i,(function(){t(n,l)}))){var o=k(i,h),a=o[0],p=o[1];r.replaceState(a,"",p),j(s)}},go:S,back:function(){S(-1)},forward:function(){S(1)},listen:function(e){return m.push(e)},block:function(e){var t=w.push(e);return 1===w.length&&l.addEventListener(i,o),function(){t(),w.length||l.removeEventListener(i,o)}}};return O}({window:c}));let f=d.current,[g,h]=(0,l.useState)({action:f.action,location:f.location});return(0,l.useLayoutEffect)((()=>f.listen(h)),[f]),(0,l.createElement)(m,{basename:n,children:r,location:g.location,navigationType:g.action,navigator:f})}),{children:(0,t.jsx)(ws,{children:(0,t.jsx)((function(e){var n=e.initialTheme,r=e.children,s=(0,l.useState)(n||H),i=s[0],o=s[1],a=(0,l.useMemo)((function(){return{theme:i,setTheme:o}}),[i]);return(0,t.jsx)(q.Provider,U({value:a},{children:r}),void 0)}),{children:(0,t.jsx)((function(){var e;e=(0,l.useContext)(q),e.theme,e.setTheme;var n=te();return(0,l.useEffect)((function(){n(Xt.initAuthData())}),[n]),(0,t.jsx)(nn,{children:(0,t.jsx)(el,{},void 0)},void 0)}),{},void 0)},void 0)},void 0)},void 0)},void 0),document.getElementById("root"))})()})();